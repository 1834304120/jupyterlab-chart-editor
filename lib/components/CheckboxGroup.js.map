{"version":3,"sources":["../../src/components/CheckboxGroup.js"],"names":["CheckboxGroup","createClass","propTypes","options","arrayOf","shape","label","string","isRequired","value","checked","bool","onChange","func","className","orientation","getDefaultProps","getInitialState","props","componentWillReceiveProps","nextProps","setState","handleChange","evt","targetCheckbox","target","getAttribute","checkboxes","getCheckboxes","newOptions","i","length","push","findDOMNode","querySelectorAll","renderOptions","state","map","option","checkClass","itemClass","render","boxClass","module","exports"],"mappings":"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","file":"CheckboxGroup.js","sourcesContent":["import React, { PropTypes } from 'react';\nimport ReactDOM from 'react-dom';\nimport classnames from 'classnames';\n\nconst CheckboxGroup = React.createClass({\n    propTypes: {\n        options: PropTypes.arrayOf(PropTypes.shape({\n            label: PropTypes.string.isRequired,\n            value: PropTypes.string.isRequired,\n            checked: PropTypes.bool.isRequired\n        })).isRequired,\n        onChange: PropTypes.func,\n        className: PropTypes.string,\n        orientation: PropTypes.string\n    },\n\n    getDefaultProps() {\n        return {\n            className: ''\n        };\n    },\n\n    getInitialState() {\n        return {\n            options: this.props.options\n        };\n    },\n\n    /*\n     * We've gotten new props from a parent. Sync local state so its\n     * up to date with parent props.\n     */\n    componentWillReceiveProps(nextProps) {\n        this.setState({\n            options: nextProps.options\n        });\n    },\n\n    /*\n     * Called whenever a checkbox is changed, this updates the local\n     * state to reflect the change and then called props.onChange with\n     * the new options.\n     */\n    handleChange(evt) {\n\n        // Which one was changed?\n        const targetCheckbox = evt.target.getAttribute('data-value');\n\n        // Grab all the checkboxes\n        const checkboxes = this.getCheckboxes();\n        const newOptions = [];\n\n        // Loop through and update state to reflect changed UI\n        for (let i = 0; i < checkboxes.length; i ++) {\n\n            const value = checkboxes[i].getAttribute('data-value');\n            let checked = checkboxes[i].getAttribute('data-checked') === 'true';\n            let label = checkboxes[i].getAttribute('data-label');\n\n            // Is it the one that was changed? Toggle its 'checked' property.\n            if (targetCheckbox === value) checked = !checked;\n\n            newOptions.push({ label, value, checked });\n        }\n\n        // Optimistically set local state to newOptions\n        this.setState({\n            options: newOptions\n        });\n\n        // Pipe off the newOptions to props.onChange so actions can hook in\n        this.props.onChange(newOptions);\n    },\n\n    /**\n     * @returns {nodeList} Array-list list of DOM nodes of type \"checkbox\"\n     */\n    getCheckboxes() {\n        return ReactDOM.findDOMNode(this)\n            .querySelectorAll('div.checkbox__box');\n    },\n\n    renderOptions() {\n        const {orientation} = this.props;\n\n        /*\n         * Loop through the options assigned to state\n         * and create a checkbox element for each\n         */\n        return this.state.options.map((option, i) => {\n\n            const checkClass = classnames([\n                'checkbox__check',\n                'icon'\n            ], {\n                'icon-check-mark': option.checked\n            });\n\n            const itemClass = classnames('checkbox__item', {\n                'checkbox__item--vertical': orientation === 'vertical',\n                'checkbox__item--horizontal': orientation === 'horizontal'\n            });\n\n            return (\n                <div key={i} className={itemClass}>\n\n                    <div className=\"checkbox__box\"\n                        ref={option.value}\n                        onClick={this.handleChange}\n                        data-value={option.value}\n                        data-checked={option.checked}\n                        data-label={option.label}\n                    >\n                        {\n                            option.checked ?\n                                <i className={checkClass}\n                                    data-value={option.value}\n                                    data-checked={option.checked}\n                                    data-label={option.label}\n                                />\n                            : null\n                        }\n                    </div>\n\n                    <div className=\"checkbox__label\">{option.label}</div>\n                </div>\n            );\n        });\n    },\n\n    render() {\n        const {orientation, className} = this.props;\n\n        const boxClass = classnames('checkbox__group', className, {\n            'checkbox__group_horizontal': orientation === 'horizontal'\n        });\n        return (\n            <div className={boxClass}>\n                { this.renderOptions() }\n            </div>\n        );\n    }\n});\n\nmodule.exports = CheckboxGroup;\n"]}