{"version":3,"sources":["../../src/components/ColorPaletteSelector.js"],"names":["HEIGHT","WIDTH","STANDARD_COLORSCALE_LENGTH","length","ColorPaletteSelector","props","colorscales","interpolated","map","colorscale","colorpair","state","newColorScale","Array","isArray","Plotly","plotly","Colorscale","scales","i","j","firstColorsMatch","unshift","setState","addColorScale","nextProps","newColorscale","key","colorscaleLength","isGrouped","userDataIndex","isPie","currentColorscale","scaleWithBreakpoints","color","index","scaleFunc","makeColorScaleFunc","extractScale","_","colorblocks","colorBlockStyle","height","backgroundColor","width","onClick","colorpanels","_renderColorScale","marginLeft","marginRight","propTypes","oneOfType","arrayOf","string","number","func","bool","PropTypes","array","isRequired","defaultProps"],"mappings":"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","file":"ColorPaletteSelector.js","sourcesContent":["import COLOR_SCALES from '@workspace/constants/color';\nimport Environment from '@common/utils/environment';\nimport PropTypes from 'prop-types';\nimport React, {Component} from 'react';\n\nconst HEIGHT = 90;\nconst WIDTH = 18;\nconst STANDARD_COLORSCALE_LENGTH = COLOR_SCALES[0].length;\n\nexport default class ColorPaletteSelector extends Component {\n\n    constructor(props) {\n        super(props);\n\n        let colorscales;\n        if (this.props.interpolated) {\n            colorscales = COLOR_SCALES;\n        } else {\n            // pull the color out of the colorscales\n            colorscales = COLOR_SCALES.map(\n                colorscale => colorscale.map(\n                    colorpair => colorpair[1]\n                )\n            );\n        }\n\n        this.state = {colorscales};\n    }\n\n    /*\n     * if the supplied colorscale isn't in our state, add it to the front\n     */\n    addColorScale(newColorScale) {\n\n        if (!newColorScale || newColorScale.length === 0) {\n            return;\n        } else if (!Array.isArray(newColorScale)) {\n            const Plotly = Environment.plotly;\n            newColorScale = Plotly.Colorscale.scales[newColorScale];\n        }\n\n        const colorscales = this.state.colorscales;\n\n\n        for (let i = 0; i < colorscales.length; i++) {\n            const colorscale = colorscales[i];\n            if (colorscale.length === newColorScale.length) {\n                for (let j = 0; j < colorscale.length; j++) {\n                    if (this.props.interpolated &&\n                        colorscale[j][0] === newColorScale[j][0] &&\n                        colorscale[j][1] === newColorScale[j][1]) {\n                        // newColorScale is in our list of colorscales\n                        return;\n                    } else if (\n                        !this.props.interpolated &&\n                        colorscale[j] === newColorScale[j]\n                    ) {\n                        return;\n                    }\n                }\n            } else {\n                /*\n                 * It could happen that our new colorscale is actually a trimmed down or\n                 * expanded version of a current color scale. This is especially true\n                 * now that we have grouped styled traces. We don't want to add a new\n                 * colorscale in those cases.\n                 */\n                let firstColorsMatch = colorscale[0][1] === newColorScale[0][1];\n\n                if (!this.props.interpolated) {\n                    firstColorsMatch = colorscale[0] === newColorScale[0];\n                }\n\n                if (firstColorsMatch) {\n                    return;\n                }\n            }\n        }\n\n        // newColorScale is not in our list of colorscales, so add it\n        colorscales.unshift(newColorScale);\n        this.setState({colorscales});\n\n    }\n\n    componentWillMount() {\n        this.addColorScale(this.props.colorscale);\n    }\n\n    componentWillReceiveProps(nextProps) {\n        this.addColorScale(nextProps.colorscale);\n    }\n\n    _renderColorScale(newColorscale, key) {\n        /*\n         * The colorpalette control can also be used to color multiple traces\n         * based on one colorscale. Our colorscale has to have at least as many\n         * colors as there are user traces.\n         */\n        const Plotly = Environment.plotly;\n        let colorscaleLength = newColorscale.length;\n\n        const {isGrouped, userDataIndex, isPie, colorscale: currentColorscale,\n            interpolated} = this.props;\n\n        if (isGrouped && userDataIndex.length > STANDARD_COLORSCALE_LENGTH) {\n            const scaleWithBreakpoints = newColorscale.map((color, index) => (\n                [index / newColorscale.length, color]\n            ));\n\n            const scaleFunc = Plotly.Colorscale.makeColorScaleFunc(\n\n                // scale boundaries: from 0 to 1\n                Plotly.Colorscale.extractScale(scaleWithBreakpoints, 0, 1)\n            );\n\n            colorscaleLength = userDataIndex.length;\n\n            newColorscale = userDataIndex.map((_, index) => (\n                scaleFunc(index / colorscaleLength)\n            ));\n        }\n\n        // Fix pie chart coloring\n        if (isPie && currentColorscale.length > STANDARD_COLORSCALE_LENGTH) {\n            const scaleWithBreakpoints = newColorscale.map((color, index) => (\n                [index / newColorscale.length, color]\n            ));\n            const scaleFunc = Plotly.Colorscale.makeColorScaleFunc(\n\n                // scale boundaries: from 0 to 1\n                Plotly.Colorscale.extractScale(scaleWithBreakpoints, 0, 1)\n            );\n\n            colorscaleLength = currentColorscale.length;\n\n            newColorscale = currentColorscale.map((_, index) => (\n                scaleFunc(index / colorscaleLength)\n            ));\n        }\n\n        const colorblocks = [];\n\n        for (let i = 0; i < colorscaleLength; i++) {\n            const color = interpolated ? newColorscale[i][1] : newColorscale[i];\n\n            const colorBlockStyle = {\n                height: HEIGHT / colorscaleLength,\n                backgroundColor: color\n            };\n\n            colorblocks[i] = (\n                <div key={i}\n                     style={colorBlockStyle}\n                     className=\"js-color-block\"\n                >\n                </div>\n            );\n        }\n\n        return (\n            <div key={key}\n                 className={'color-palette js-color-palette'}\n                 style={{width: WIDTH}}\n                 onClick={() => this.props.onClick(newColorscale)}\n            >\n                {colorblocks}\n            </div>\n        );\n    }\n\n    render() {\n        const colorscales = this.state.colorscales;\n\n        const colorpanels = [];\n        for (let i = 0; i < colorscales.length; i++) {\n            colorpanels[i] = this._renderColorScale(colorscales[i], i);\n        }\n\n        return (\n            <div className={'color-palette-selector'}\n                 style={{\n                     width: WIDTH * colorscales.length,\n                     marginLeft: 'auto', marginRight: 'auto'\n                 }}\n            >\n                {colorpanels}\n            </div>\n        );\n    }\n}\n\nColorPaletteSelector.propTypes = {\n    colorscale: PropTypes.oneOfType([\n        PropTypes.arrayOf(\n            PropTypes.oneOfType([\n                PropTypes.string,\n\n                PropTypes.arrayOf(\n                    PropTypes.oneOfType([\n                        PropTypes.number,\n                        PropTypes.string\n                    ])\n                )\n            ])\n        ),\n        PropTypes.string\n    ]),\n    onClick: PropTypes.func,\n\n    /*\n     * if true, colorscales are in the form [[x1, color1], [x2, color2], ...]\n     * if false, colorscales are in the form [color1, color2, ...]\n     *\n     * true is used for charts with colorscales like heatmaps or\n     * scatter's  marker.color\n     *\n     * false is used for mapping colors across traces and\n     * pie chart's marker.colors\n     */\n    interpolated: PropTypes.bool,\n\n    /*\n     * specify which trace this control applies to if we're\n     * rendering a trace control\n     * Can be an array if we're trying to group style traces:\n     * https://github.com/plotly/streambed/issues/7973\n     */\n    userDataIndex: React.PropTypes.oneOfType(\n        [React.PropTypes.number, React.PropTypes.array]\n    ).isRequired,\n    isGrouped: React.PropTypes.bool,\n    isPie: React.PropTypes.bool.isRequired\n};\n\nColorPaletteSelector.defaultProps = {\n    interpolated: true\n};\n"]}