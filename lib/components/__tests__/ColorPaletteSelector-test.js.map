{"version":3,"sources":["../../../src/components/__tests__/ColorPaletteSelector-test.js"],"names":["describe","it","userDataIndices","component","basicColorscaleLength","length","colorpalette","find","enhancedColorPaletteLength","nodes","props","children","expect","toBe","additionalScales","finalScale","concat","fn","jest","first","simulate","toBeCalledWith","map","colorPair","colorscales","state","aRealNewColorscale","initialColorscalesLength","renderedColorscales","newColorscale","slice"],"mappings":"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","file":"ColorPaletteSelector-test.js","sourcesContent":["\nimport React from 'react';\nimport {shallow} from 'enzyme';\n\nimport ColorPaletteSelector from '@workspace/components/widgets/ColorPaletteSelector';\nimport COLOR_SCALES from '@workspace/constants/color';\n\ndescribe('ColorPaletteSelector', () => {\n\n    it('completes colorscale if grouped traces length > # of colorscale\\'s color blocks', () => {\n        const userDataIndices = [0, 1, 2, 3, 4, 5, 6, 7];\n\n        const component = shallow(\n            <ColorPaletteSelector\n                userDataIndex={userDataIndices}\n                isGrouped={true}\n                colorscale={COLOR_SCALES[0]}\n                isPie={false}\n            />\n        );\n\n        const basicColorscaleLength = COLOR_SCALES[0].length;\n        const colorpalette = component.find('.js-color-palette');\n        const enhancedColorPaletteLength = colorpalette.nodes[0].props.children.length;\n\n        expect(userDataIndices.length === enhancedColorPaletteLength).toBe(true);\n        expect(basicColorscaleLength < enhancedColorPaletteLength).toBe(true);\n    });\n\n    it('completes colorscale for pie traces', () => {\n        const additionalScales = ['rgb(1, 1, 1)', 'rgb(3, 3, 3)'];\n        const finalScale = COLOR_SCALES[0].concat(additionalScales);\n        const component = shallow(\n            <ColorPaletteSelector\n                userDataIndex={0}\n                colorscale={finalScale}\n                isPie={true}\n                interpolated={false}\n            />\n        );\n\n        const basicColorscaleLength = COLOR_SCALES[0].length;\n        const colorpalette = component.find('.js-color-palette');\n        const enhancedColorPaletteLength = colorpalette.nodes[0].props.children.length;\n\n        expect(finalScale.length === enhancedColorPaletteLength).toBe(true);\n        expect(basicColorscaleLength < enhancedColorPaletteLength).toBe(true);\n    });\n\n    it('passes the colorscale on click', () => {\n        const fn = jest.fn();\n        const component = shallow(\n            <ColorPaletteSelector\n                onClick={fn}\n                userDataIndex={0}\n                colorscale={COLOR_SCALES[0]}\n                isPie={false}\n            />\n        );\n\n        component.find('.js-color-palette').first().simulate('click');\n        expect(fn).toBeCalledWith(COLOR_SCALES[0]);\n    });\n\n    it('passes un-nested colorscales when interpolated is false', () => {\n        const fn = jest.fn();\n        const component = shallow(\n            <ColorPaletteSelector\n                onClick={fn}\n                interpolated={false}\n                userDataIndex={0}\n                isPie={false}\n            />\n        );\n\n        component.find('.js-color-palette').first().simulate('click');\n        expect(fn).toBeCalledWith(\n            COLOR_SCALES[0].map(colorPair => colorPair[1])\n        );\n    });\n\n    it('works with named plotly.js colorscales', () => {\n        const component = shallow(\n            <ColorPaletteSelector\n                colorscale=\"Viridis\"\n                userDataIndex={0}\n                isPie={false}\n            />\n        );\n\n        const colorscales = component.state('colorscales');\n        // The new unknown colorscale is added\n        expect(colorscales.length).toBe(13);\n    });\n\n    it('adds a new colorscales correctly', () => {\n        const aRealNewColorscale = [[0, 'rgb(1, 1, 1)'], [1, 'rgb(2, 2, 2)']];\n        const initialColorscalesLength = COLOR_SCALES.length;\n\n        const component = shallow(\n            <ColorPaletteSelector\n                colorscale={aRealNewColorscale}\n                userDataIndex={0}\n                isPie={false}\n            />\n        );\n\n        const renderedColorscales = component.state('colorscales');\n        expect(initialColorscalesLength + 1 === renderedColorscales.length).toBe(true);\n    });\n\n    it('does not add colorscale for trimmed down version of existing colorscale', () => {\n        // Trimmed down version of existing colorscale\n        const newColorscale = COLOR_SCALES[0].slice(0, 3);\n        const initialColorscalesLength = COLOR_SCALES.length;\n\n        const component = shallow(\n            <ColorPaletteSelector\n                colorscale={newColorscale}\n                userDataIndex={0}\n                isPie={false}\n            />\n        );\n\n        const renderedColorscales = component.state('colorscales');\n        expect(initialColorscalesLength === renderedColorscales.length).toBe(true);\n    });\n});\n"]}