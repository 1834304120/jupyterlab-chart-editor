{"version":3,"sources":["../../src/components/SelectColumn.js"],"names":["TEST_SELECTOR_CLASS","UnconnectedSelectColumn","props","isConsistent","bind","onColumnSelection","getOptions","getValue","newOption","multi","multiTable","srcString","columnMeta","selection","selectedColumnId","tables","tableIds","restrictOptions","fid","reduce","options","table","tableId","index","indexOf","push","disabled","label","columnIds","get","forEach","getIn","columnId","value","colRef","type","uids","find","allColumnIds","toJS","referencedColumnIds","uid","EXCLUDE","SINGLE","INCLUDE","ALL","Error","srcs","Array","src","nextProps","minWidth","placeholder","propTypes","func","isRequired","oneOfType","array","string","bool","map","list","defaultProps","clearable","mapStateToProps","state","workspace","SelectColumn"],"mappings":";;;;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;AAEO,IAAMA,oDAAsB,iBAA5B;;IAEMC,uB,WAAAA,uB;;;AAET,qCAAYC,KAAZ,EAAmB;AAAA;;AAAA,sJACTA,KADS;;AAEf,cAAKC,YAAL,GAAoB,MAAKA,YAAL,CAAkBC,IAAlB,OAApB;AACA,cAAKC,iBAAL,GAAyB,MAAKA,iBAAL,CAAuBD,IAAvB,OAAzB;AACA,cAAKE,UAAL,GAAkB,MAAKA,UAAL,CAAgBF,IAAhB,OAAlB;AACA,cAAKG,QAAL,GAAgB,MAAKA,QAAL,CAAcH,IAAd,OAAhB;AALe;AAMlB;;;;0CAEiBI,S,EAAW;AAAA,yBACsB,KAAKN,KAD3B;AAAA,gBAClBO,KADkB,UAClBA,KADkB;AAAA,gBACXC,UADW,UACXA,UADW;AAAA,gBACCL,iBADD,UACCA,iBADD;;AAEzB,gBAAII,KAAJ,EAAW;AACP,oBAAIC,UAAJ,EAAgB;AACZL,sCAAkB,oBAAQG,aAAa,EAArB,IAA2B,IAA3B,GAAkCA,SAApD;AACH,iBAFD,MAEO;AACH;AACA,wBAAMG,YAAY,uBAASH,aAAa,EAAtB,CAAlB;AACAH,sCAAkBM,YAAYA,SAAZ,GAAwB,IAA1C;AACH;AACJ,aARD,MAQO;AACHN,kCAAkBG,SAAlB;AACH;AACJ;;;qCAEY;AAAA,0BAKL,KAAKN,KALA;AAAA,gBAGLU,UAHK,WAGLA,UAHK;AAAA,gBAGOH,KAHP,WAGOA,KAHP;AAAA,gBAGcC,UAHd,WAGcA,UAHd;AAAA,gBAG4CG,SAH5C,WAG0BC,gBAH1B;AAAA,gBAGuDC,MAHvD,WAGuDA,MAHvD;AAAA,gBAILC,QAJK,WAILA,QAJK;;AAOT;;AACA,gBAAMC,kBAAkB,CAACP,UAAD,IAAeD,KAAf,IAAwBI,SAAhD;AACA,gBAAMK,MAAMD,kBAAkB,uBAASJ,SAAT,EAAoBK,GAAtC,GAA4C,IAAxD;;AAEA,mBAAOH,OAAOI,MAAP,CAAc,UAACC,OAAD,EAAUC,KAAV,EAAiBC,OAAjB,EAA6B;;AAE9C,oBAAMC,QAAQP,SAASQ,OAAT,CAAiBF,OAAjB,CAAd;;AAEA,oBAAIL,eAAJ,EAAqB;AACjB;AACA,wBAAIC,QAAQI,OAAZ,EAAqB;AACjB,+BAAOF,OAAP;AACH;AACJ;;AAED;AACAA,wBAAQK,IAAR,CAAa,EAACC,UAAU,IAAX,EAAiBC,kBAAeJ,QAAQ,CAAvB,CAAjB,EAAb;;AAEA;AACA,oBAAMK,YAAYP,MAAMQ,GAAN,CAAU,WAAV,CAAlB;AACAD,0BAAUE,OAAV,CAAkB,oBAAY;AAC1B,wBAAMH,QAAQf,WAAWmB,KAAX,CAAiB,CAACC,QAAD,EAAW,MAAX,CAAjB,CAAd;AACAZ,4BAAQK,IAAR,CAAa,EAACE,YAAD,EAAQM,OAAOD,QAAf,EAAb;AACH,iBAHD;;AAKA,uBAAOZ,OAAP;AAEH,aAvBM,EAuBJ,EAvBI,CAAP;AAyBH;;;mCAEU;AAAA,0BAIH,KAAKlB,KAJF;AAAA,gBAGHO,KAHG,WAGHA,KAHG;AAAA,gBAGIC,UAHJ,WAGIA,UAHJ;AAAA,gBAGgBK,MAHhB,WAGgBA,MAHhB;AAAA,gBAG0CF,SAH1C,WAGwBC,gBAHxB;;AAMP;;AACA,gBAAI,CAACL,KAAL,EAAY;AACR,uBAAOI,SAAP;AACH;;AAED;AACA,gBAAI,oBAAQA,aAAa,EAArB,CAAJ,EAA8B;AAC1B,uBAAO,IAAP;AACH;;AAED;AACA,gBAAIH,UAAJ,EAAgB;AACZ,uBAAOG,SAAP;AACH;;AAED;;AArBO,4BAsBe,uBAASA,SAAT,CAtBf;AAAA,gBAsBAqB,MAtBA,aAsBAA,MAtBA;AAAA,gBAsBQhB,GAtBR,aAsBQA,GAtBR;;AAAA,+BAuBmB,0BAAYgB,MAAZ,CAvBnB;AAAA,gBAuBAC,IAvBA,gBAuBAA,IAvBA;AAAA,iDAuBMC,IAvBN;AAAA,gBAuBMA,IAvBN,qCAuBa,EAvBb;;AAwBP,gBAAMf,QAAQN,OAAOsB,IAAP,CAAY;AAAA,uBAASJ,MAAMJ,GAAN,CAAU,KAAV,MAAqBX,GAA9B;AAAA,aAAZ,CAAd;AACA,gBAAMoB,eAAejB,MAAMQ,GAAN,CAAU,WAAV,EAAuBU,IAAvB,EAArB;AACA,gBAAMC,sBAAsB,gBAAI;AAAA,uBAAUtB,GAAV,SAAiBuB,GAAjB;AAAA,aAAJ,EAA4BL,IAA5B,CAA5B;;AAEA,oBAAQD,IAAR;AACI,qBAAK,qBAAcO,OAAnB;AACI,2BAAO,uBAAWJ,YAAX,EAAyBE,mBAAzB,CAAP;AACJ,qBAAK,qBAAcG,MAAnB;AACA,qBAAK,qBAAcC,OAAnB;AACI,2BAAOJ,mBAAP;AACJ,qBAAK,qBAAcK,GAAnB;AACI,2BAAOP,YAAP;AACJ;AACI,0BAAM,IAAIQ,KAAJ,CAAU,sCAAV,CAAN;AATR;AAWH;;;qCAEYjC,S,EAAWE,M,EAAQ;;AAE5B;;;;;;AAMA,gBAAI,kBAAMF,SAAN,KAAoB,oBAAQA,SAAR,CAAxB,EAA4C;AACxC;AACA,uBAAO,IAAP;AACH;;AAED;;;;;;;;AAQA,gBAAMkC,OAAO,eAAGC,KAAH,EAAUnC,SAAV,IAAuBA,SAAvB,GAAmC,CAACA,SAAD,CAAhD;AArB4B;AAAA;AAAA;;AAAA;AAAA;AAAA,wBAsBjBoC,GAtBiB;;AAAA,qCAuBV,uBAASA,GAAT,CAvBU;AAAA,wBAuBjB/B,GAvBiB,cAuBjBA,GAvBiB;;AAwBxB,wBAAMG,QAAQN,OAAOsB,IAAP,CAAY;AAAA,+BAASJ,MAAMJ,GAAN,CAAU,KAAV,MAAqBX,GAA9B;AAAA,qBAAZ,CAAd;AACA,wBAAI,CAACG,KAAL,EAAY;AACR;AAAA,+BAAO;AAAP;AACH;AA3BuB;;AAsB5B,qCAAkB0B,IAAlB,8HAAwB;AAAA;;AAAA;AAMvB;AA5B2B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AA6B5B,mBAAO,IAAP;AACH;;;8CAEqBG,S,EAAW;;AAE7B;AAF6B,gBAGJrC,SAHI,GAGiBqC,SAHjB,CAGtBpC,gBAHsB;AAAA,gBAGOC,MAHP,GAGiBmC,SAHjB,CAGOnC,MAHP;;AAI7B,mBAAO,KAAKZ,YAAL,CAAkBU,SAAlB,EAA6BE,MAA7B,CAAP;AAEH;;;iCAEQ;AAAA,0BAEyC,KAAKb,KAF9C;AAAA,gBAEEyB,KAFF,WAEEA,KAFF;AAAA,gBAESwB,QAFT,WAESA,QAFT;AAAA,gBAEmB1C,KAFnB,WAEmBA,KAFnB;AAAA,gBAE0B2C,WAF1B,WAE0BA,WAF1B;;AAGL,gBAAMhC,UAAU,KAAKd,UAAL,EAAhB;AACA,gBAAM2B,QAAQ,KAAK1B,QAAL,EAAd;;AAEA,mBACI;AAAA;AAAA,kBAAM,WAAU,iBAAhB;AACI;AACI,+BAAcP,mBAAd,SAAqC2B,KADzC;AAEI,yBAAK,UAFT;AAGI,6BAASP,OAHb;AAII,2BAAOa,KAJX;AAKI,gCAAY,IALhB;AAMI,iCAAamB,WANjB;AAOI,8BAAU,KAAK/C,iBAPnB;AAQI,+BAAW,IARf;AASI,8BAAU8C,QATd;AAUI,2BAAO1C,KAVX;AAWI,2BAAO;AAXX;AADJ,aADJ;AAiBH;;;;;;AAILR,wBAAwBoD,SAAxB,GAAoC;;AAEhC;AACAhD,uBAAmB,iBAAUiD,IAAV,CAAeC,UAHF;AAIhCzC,sBAAkB,iBAAU0C,SAAV,CAAoB,gCAAe,iBAAUC,KAAzB,CAApB,CAJc;AAKhCL,iBAAa,iBAAUM,MALS;AAMhCP,cAAU,iBAAUO,MANY;AAOhCjD,WAAO,iBAAUkD,IAPe;AAQhCjD,gBAAY,iBAAUiD,IARU;AAShChC,WAAO,iBAAU+B,MATe;;AAWhC;AACA9C,gBAAY,kCAAmBgD,GAZC;AAahC7C,YAAQ,kCAAmB6C,GAbK;AAchC5C,cAAU,kCAAmB6C;;AAdG,CAApC;;AAkBA5D,wBAAwB6D,YAAxB,GAAuC;AACnCV,iBAAa,EADsB;AAEnCW,eAAW,IAFwB;AAGnCtD,WAAO,KAH4B;AAInCC,gBAAY,KAJuB;AAKnCiB,WAAO;AAL4B,CAAvC;;AAQA,IAAMqC,kBAAkB,SAAlBA,eAAkB,QAAS;AAAA,2BACUC,MAAMC,SADhB;AAAA,QACtBtD,UADsB,oBACtBA,UADsB;AAAA,QACVG,MADU,oBACVA,MADU;AAAA,QACFC,QADE,oBACFA,QADE;;AAE7B,WAAO,EAACJ,sBAAD,EAAaG,cAAb,EAAqBC,kBAArB,EAAP;AACH,CAHD;;AAKA,IAAMmD,eAAe,yBAAQH,eAAR,EACjB,sCAAuB,IAAvB,EAA6B,IAA7B,EAAmC/D,uBAAnC,CADiB,CAArB;;kBAIekE,Y","file":"SelectColumn.js","sourcesContent":["import Dropdown from '@workspace/components/widgets/Dropdown';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport React, {Component, PropTypes} from 'react';\nimport connectWorkspaceSheets from '@workspace/utils/connectWorkspaceSheets';\nimport {difference, is, isEmpty, isNil, map} from 'ramda';\nimport {connect} from 'react-redux';\nimport {COL_REF_TYPES} from '@workspace/constants/files';\nimport {stringOrNull} from '@workspace/utils/customPropTypes';\nimport {joinSrcs, parseColRef, parseSrc} from '@workspace/utils/regexps';\n\nexport const TEST_SELECTOR_CLASS = 'js-SelectColumn';\n\nexport class UnconnectedSelectColumn extends Component {\n\n    constructor(props) {\n        super(props);\n        this.isConsistent = this.isConsistent.bind(this);\n        this.onColumnSelection = this.onColumnSelection.bind(this);\n        this.getOptions = this.getOptions.bind(this);\n        this.getValue = this.getValue.bind(this);\n    }\n\n    onColumnSelection(newOption) {\n        const {multi, multiTable, onColumnSelection} = this.props;\n        if (multi) {\n            if (multiTable) {\n                onColumnSelection(isEmpty(newOption || []) ? null : newOption);\n            } else {\n                // newOption can be `undefined` or an array.\n                const srcString = joinSrcs(newOption || []);\n                onColumnSelection(srcString ? srcString : null);\n            }\n        } else {\n            onColumnSelection(newOption);\n        }\n    }\n\n    getOptions() {\n\n        const {\n            columnMeta, multi, multiTable, selectedColumnId: selection, tables,\n            tableIds\n        } = this.props;\n\n        // If multiTable is true, selection is an array of columnIds.\n        const restrictOptions = !multiTable && multi && selection;\n        const fid = restrictOptions ? parseSrc(selection).fid : null;\n\n        return tables.reduce((options, table, tableId) => {\n\n            const index = tableIds.indexOf(tableId);\n\n            if (restrictOptions) {\n                // Only allow new selections to match currently-selected table.\n                if (fid !== tableId) {\n                    return options;\n                }\n            }\n\n            // This is just a label, which is why it's always disabled.\n            options.push({disabled: true, label: `Grid ${index + 1}`});\n\n            // These are the select-able options.\n            const columnIds = table.get('columnIds');\n            columnIds.forEach(columnId => {\n                const label = columnMeta.getIn([columnId, 'name']);\n                options.push({label, value: columnId});\n            });\n\n            return options;\n\n        }, []);\n\n    }\n\n    getValue() {\n\n        const {\n            multi, multiTable, tables, selectedColumnId: selection\n        } = this.props;\n\n        // If we're not in multi-mode, we return the string we're given.\n        if (!multi) {\n            return selection;\n        }\n\n        // We're in multi-mode, but be consistent undefined, null, '', & [].\n        if (isEmpty(selection || [])) {\n            return null;\n        }\n\n        // If we're in multiTable-mode, just return the array we have.\n        if (multiTable) {\n            return selection;\n        }\n\n        // For everything else, we need to parse the src to return an array.\n        const {colRef, fid} = parseSrc(selection);\n        const {type, uids = []} = parseColRef(colRef);\n        const table = tables.find(value => value.get('fid') === fid);\n        const allColumnIds = table.get('columnIds').toJS();\n        const referencedColumnIds = map(uid => `${fid}:${uid}`, uids);\n\n        switch (type) {\n            case COL_REF_TYPES.EXCLUDE:\n                return difference(allColumnIds, referencedColumnIds);\n            case COL_REF_TYPES.SINGLE:\n            case COL_REF_TYPES.INCLUDE:\n                return referencedColumnIds;\n            case COL_REF_TYPES.ALL:\n                return allColumnIds;\n            default:\n                throw new Error('Unknown colRef type in SelectColumn.');\n        }\n    }\n\n    isConsistent(selection, tables) {\n\n        /*\n         * This is really tricky, we need the props from our parent component\n         * (selectedSrc) to be consistent with props from connect (tables).\n         * Shockingly, we can't depend on this being synchronous.\n         */\n\n        if (isNil(selection) || isEmpty(selection)) {\n            // Nothing to cross-check with, we're A-OK.\n            return true;\n        }\n\n        /*\n         * We return false if the connected 'tables' doesn't match passed-down\n         * 'selectedSrc'. Note that there's also a potential problem with the\n         * uids in the `selectedSrc`, however, this doesn't lead to bad render\n         * cycles and it's hard to tell if the given `selectedSrc` was just bad\n         * from the beginning or if it's just a temporary inconsistency due to\n         * a race condition.\n         */\n        const srcs = is(Array, selection) ? selection : [selection];\n        for (const src of srcs) {\n            const {fid} = parseSrc(src);\n            const table = tables.find(value => value.get('fid') === fid);\n            if (!table) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    shouldComponentUpdate(nextProps) {\n\n        // TODO: Tricky issue with connected leaf components. See #7517\n        const {selectedColumnId: selection, tables} = nextProps;\n        return this.isConsistent(selection, tables);\n\n    }\n\n    render() {\n\n        const {label, minWidth, multi, placeholder} = this.props;\n        const options = this.getOptions();\n        const value = this.getValue();\n\n        return (\n            <span className=\"widget-dropdown\">\n                <Dropdown\n                    className={`${TEST_SELECTOR_CLASS}-${label}`}\n                    ref={'dropdown'}\n                    options={options}\n                    value={value}\n                    searchable={true}\n                    placeholder={placeholder}\n                    onChange={this.onColumnSelection}\n                    clearable={true}\n                    minWidth={minWidth}\n                    multi={multi}\n                    width={'100%'}\n                />\n            </span>\n        );\n    }\n\n}\n\nUnconnectedSelectColumn.propTypes = {\n\n    // Props from parent component.\n    onColumnSelection: PropTypes.func.isRequired,\n    selectedColumnId: PropTypes.oneOfType([stringOrNull, PropTypes.array]),\n    placeholder: PropTypes.string,\n    minWidth: PropTypes.string,\n    multi: PropTypes.bool,\n    multiTable: PropTypes.bool,\n    label: PropTypes.string,\n\n    // Props from connect.\n    columnMeta: ImmutablePropTypes.map,\n    tables: ImmutablePropTypes.map,\n    tableIds: ImmutablePropTypes.list\n\n};\n\nUnconnectedSelectColumn.defaultProps = {\n    placeholder: '',\n    clearable: true,\n    multi: false,\n    multiTable: false,\n    label: ''\n};\n\nconst mapStateToProps = state => {\n    const {columnMeta, tables, tableIds} = state.workspace;\n    return {columnMeta, tables, tableIds};\n};\n\nconst SelectColumn = connect(mapStateToProps)(\n    connectWorkspaceSheets(null, true)(UnconnectedSelectColumn)\n);\n\nexport default SelectColumn;\n"]}