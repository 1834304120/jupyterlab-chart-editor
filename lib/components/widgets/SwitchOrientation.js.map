{"version":3,"sources":["../../../src/components/widgets/SwitchOrientation.js"],"names":["OPTIONS","label","value","switchOrientationCommands","traceIndex","orientation","targetTracePath","targetXaxisIdPath","targetYaxisIdPath","targetXaxisId","path","targetYaxisId","finder","trace","xaxis","yaxis","type","traceIndicesWithSharedAxes","findIndicesAtPath","restyleArray","map","data","target","i","relayoutObject","reduce","r","thisTraceIndex","tracePath","xaxisId","yaxisId","xaxisKey","slice","yaxisKey","xaxisTypePath","yaxisTypePath","SwitchOrientation","activeOption","className","dispatch","onOptionChange","commands","propTypes","func","isRequired","string","number"],"mappings":"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","file":"SwitchOrientation.js","sourcesContent":["import React, { PropTypes } from \"react\";\nimport { contains } from \"ramda\";\n\nimport RadioItems from \"./RadioItems\";\nimport connectWorkspacePlot from \"@workspace/utils/connectWorkspacePlot\";\nimport { WorkspacePlot } from \"@workspace/utils/Plot\";\nimport { relayout, restyle } from \"@workspace/actions/workspace\";\n\n/*\n * Style Control for switching the vertical or horizontal orientation\n * of traces in subplots.\n *\n * The Plotly 2 interpretation of orientation is a lil\n * more involved than just the plotly.js per-trace\n * `orientation` key.\n * - We switch the orientation of *all* of the traces that\n *   are in the same subplot rather than just the single\n *   trace.\n * - We switch the types of the axes that the trace belongs\n *   to.\n *\n * Another confusing case happens when there are multiple sets of\n * shared axes like in this example: https://plot.ly/~chris/17707/\n * This is pretty rare and so for now we'll rely on\n * plotly.js's sensible behaviour (plots the numerical and\n * categorical data together on one axis) and let the user\n * add new axes if they wish to.\n *\n */\n\nconst OPTIONS = [\n  { label: \"Vertical\", value: \"v\" },\n  { label: \"Horizontal\", value: \"h\" },\n];\n\n/*\n * Compute the restyle and relayout commands necessary to switch\n * the orientation of a trace\n */\nfunction switchOrientationCommands(traceIndex, orientation) {\n  const targetTracePath = [\"_fullData\", traceIndex];\n  const targetXaxisIdPath = [...targetTracePath, \"xaxis\"];\n  const targetYaxisIdPath = [...targetTracePath, \"yaxis\"];\n  const targetXaxisId = WorkspacePlot.path(targetXaxisIdPath);\n  const targetYaxisId = WorkspacePlot.path(targetYaxisIdPath);\n\n  const finder = trace => {\n    return (\n      (trace.xaxis === targetXaxisId || trace.yaxis === targetYaxisId) &&\n      contains(trace.type, [\"bar\", \"histogram\", \"box\"])\n    );\n  };\n  const traceIndicesWithSharedAxes = WorkspacePlot.findIndicesAtPath(finder, [\n    \"_fullData\",\n  ]);\n\n  // Swap the orientation of all of the traces in that subplot\n  const restyleArray = traceIndicesWithSharedAxes.map(i => ({\n    data: { orientation },\n    target: i,\n  }));\n\n  // Swap axis types\n  const relayoutObject = traceIndicesWithSharedAxes.reduce(\n    (r, thisTraceIndex) => {\n      const tracePath = [\"_fullData\", thisTraceIndex];\n\n      // e.g. x, x2 AND e.g. y, y2\n      const xaxisId = WorkspacePlot.path([...tracePath, \"xaxis\"]);\n      const yaxisId = WorkspacePlot.path([...tracePath, \"yaxis\"]);\n\n      const xaxisKey = `xaxis${xaxisId.slice(1)}`;\n      const yaxisKey = `yaxis${yaxisId.slice(1)}`;\n      const xaxisTypePath = [\"_fullLayout\", xaxisKey, \"type\"];\n      const yaxisTypePath = [\"_fullLayout\", yaxisKey, \"type\"];\n\n      // Note that we switch x/y here.\n      r[`${xaxisKey}.type`] = WorkspacePlot.path(yaxisTypePath);\n      r[`${yaxisKey}.type`] = WorkspacePlot.path(xaxisTypePath);\n\n      return r;\n    },\n    {}\n  );\n\n  return { restyleArray, relayoutObject };\n}\n\nconst SwitchOrientation = ({\n  activeOption,\n  className,\n  dispatch,\n  traceIndex,\n}) => {\n  const onOptionChange = orientation => {\n    const commands = switchOrientationCommands(traceIndex, orientation);\n    const { restyleArray, relayoutObject } = commands;\n    dispatch(restyle(restyleArray));\n    dispatch(relayout(relayoutObject));\n  };\n\n  return (\n    <RadioItems\n      onOptionChange={onOptionChange}\n      options={OPTIONS}\n      activeOption={activeOption}\n      stylingClass={className}\n    />\n  );\n};\n\nSwitchOrientation.propTypes = {\n  dispatch: PropTypes.func.isRequired,\n  activeOption: PropTypes.string.isRequired,\n  traceIndex: PropTypes.number.isRequired,\n  className: PropTypes.string,\n};\n\nexport { switchOrientationCommands };\n\nexport default connectWorkspacePlot(null, true)(SwitchOrientation);\n"]}