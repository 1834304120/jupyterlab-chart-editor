{"version":3,"sources":["../../../src/components/widgets/Anchor.js"],"names":["Anchor","options","onChange","value","propTypes","string","isRequired","func","array","axisLetter","oneOf","mapPlotToProps","plot","props","keysAtPath","filter","key","startsWith","map","label","axisName","replace","unshift","module","exports"],"mappings":";;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA;;;;;AAKA,IAAMA,SAAS,SAATA,MAAS;AAAA,MAAGC,OAAH,QAAGA,OAAH;AAAA,MAAYC,QAAZ,QAAYA,QAAZ;AAAA,MAAsBC,KAAtB,QAAsBA,KAAtB;AAAA,SACb;AACE,aAASF,OADX;AAEE,WAAOE,KAFT;AAGE,cAAUD,QAHZ;AAIE,cAAU;AAJZ,IADa;AAAA,CAAf;;AASAF,OAAOI,SAAP,GAAmB;AACjBD,SAAO,oBAAUE,MAAV,CAAiBC,UADP;AAEjBJ,YAAU,oBAAUK,IAAV,CAAeD,UAFR;AAGjBL,WAAS,oBAAUO,KAAV,CAAgBF,UAHR;AAIjBG,cAAY,oBAAUC,KAAV,CAAgB,CAAC,GAAD,EAAM,GAAN,CAAhB;AAJK,CAAnB;;AAOA,SAASC,cAAT,CAAwBC,IAAxB,EAA8BC,KAA9B,EAAqC;AAAA,MAC3BJ,UAD2B,GACZI,KADY,CAC3BJ,UAD2B;;AAEnC,MAAMR,UAAUW,KACbE,UADa,CACF,CAAC,aAAD,CADE,EAEbC,MAFa,CAEN;AAAA,WAAOC,IAAIC,UAAJ,CAAkBR,UAAlB,UAAP;AAAA,GAFM,EAGbS,GAHa,CAGT;AAAA,WAAa;AAChBC,aAAOC,QADS;AAEhBjB,aAAOiB,SAASC,OAAT,CAAiB,MAAjB,EAAyB,EAAzB;AAFS,KAAb;AAAA,GAHS,CAAhB;AAOApB,UAAQqB,OAAR,CAAgB,EAAEH,OAAO,YAAT,EAAuBhB,OAAO,MAA9B,EAAhB;AACA,SAAO,EAAEF,gBAAF,EAAP;AACD;;AAEDsB,OAAOC,OAAP,GAAiB,oCAAqBb,cAArB,EAAqCX,MAArC,CAAjB","file":"Anchor.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Dropdown from \"./widgets/Dropdown\";\nimport connectWorkspacePlot from \"@workspace/utils/connectWorkspacePlot\";\n\n/*\n * The Anchor component is a control for specifing the `anchor` axis property\n * in plotly.js: https://plot.ly/javascript/reference/#layout-xaxis-anchor\n */\n\nconst Anchor = ({ options, onChange, value }) => (\n  <Dropdown\n    options={options}\n    value={value}\n    onChange={onChange}\n    minWidth={\"110px\"}\n  />\n);\n\nAnchor.propTypes = {\n  value: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n  options: PropTypes.array.isRequired,\n  axisLetter: PropTypes.oneOf([\"x\", \"y\"]),\n};\n\nfunction mapPlotToProps(plot, props) {\n  const { axisLetter } = props;\n  const options = plot\n    .keysAtPath([\"_fullLayout\"])\n    .filter(key => key.startsWith(`${axisLetter}axis`))\n    .map(axisName => ({\n      label: axisName,\n      value: axisName.replace(\"axis\", \"\"),\n    }));\n  options.unshift({ label: \"Unanchored\", value: \"free\" });\n  return { options };\n}\n\nmodule.exports = connectWorkspacePlot(mapPlotToProps)(Anchor);\n"]}