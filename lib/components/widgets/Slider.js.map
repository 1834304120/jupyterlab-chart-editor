{"version":3,"sources":["../../../src/components/widgets/Slider.js"],"names":["orientation","vertical","dimension","clientAxis","zeroPoint","horizontal","Slider","props","state","value","handleChange","bind","positionToValue","getPosition","getValue","moveSlider","startSlider","stopSlider","renderFill","nextProps","setState","onChange","position","sliderSize","refs","sliderBox","positionModifier","Math","round","event","mouseCoordinate","sliderMin","getBoundingClientRect","step","min","max","newValue","newPosition","document","removeEventListener","addEventListener","currentValue","fill","orientationVertical","fillStyles","height","top","width","fillClassName","currentPosition","left","sliderHandle","propTypes","PropTypes","oneOfType","number","string","func","isRequired","bool","oneOf","defaultProps","module","exports"],"mappings":"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","file":"Slider.js","sourcesContent":["import React, { Component, PropTypes } from 'react';\nimport {findDOMNode} from 'react-dom';\nimport classnames from 'classnames';\nimport {\n    keepWithinMaxMin,\n    getStep\n} from '@workspace/utils/number';\n\n/**\n * Basic slider\n * Accepts min, max, step and orientation parameters\n * Integer values\n */\n\nconst orientation = {\n    vertical: {\n        dimension: 'clientHeight',\n        clientAxis: 'clientY',\n        zeroPoint: 'bottom'\n    },\n    horizontal: {\n        dimension: 'clientWidth',\n        clientAxis: 'clientX',\n        zeroPoint: 'left'\n    }\n};\n\nclass Slider extends Component {\n    constructor(props) {\n        super(props);\n        this.state = { value: props.value };\n        this.handleChange = this.handleChange.bind(this);\n        this.positionToValue = this.positionToValue.bind(this);\n        this.getPosition = this.getPosition.bind(this);\n        this.getValue = this.getValue.bind(this);\n        this.moveSlider = this.moveSlider.bind(this);\n        this.startSlider = this.startSlider.bind(this);\n        this.stopSlider = this.stopSlider.bind(this);\n        this.renderFill = this.renderFill.bind(this);\n    }\n\n    componentWillReceiveProps(nextProps) {\n        // Updates the value to the graph's actual value\n        if (nextProps.value !== this.state.value) {\n            this.setState({\n                value: nextProps.value\n            });\n        }\n    }\n\n    handleChange(value) {\n        this.setState({ value });\n        this.props.onChange(value);\n    }\n\n    positionToValue(position) {\n        const dimension = orientation[this.props.orientation].dimension;\n        const sliderSize = findDOMNode(this.refs.sliderBox)[dimension];\n        const positionModifier = 100 / sliderSize;\n\n        return Math.round(position * positionModifier);\n    }\n\n    getPosition(event) {\n        const sliderBox = findDOMNode(this.refs.sliderBox);\n        const zeroPoint = orientation[this.props.orientation].zeroPoint;\n        const mouseCoordinate = event[\n            orientation[this.props.orientation].clientAxis\n        ];\n        const sliderMin = sliderBox.getBoundingClientRect()[zeroPoint];\n\n        let position;\n        if (this.props.orientation === 'vertical') {\n            position = sliderMin - mouseCoordinate;\n        } else {\n            position = mouseCoordinate - sliderMin;\n        }\n\n        return position;\n    }\n\n    getValue(position) {\n        const { step, min, max } = this.props;\n        let newValue = this.positionToValue(position);\n        newValue = getStep(newValue, step);\n        newValue = keepWithinMaxMin(newValue, min, max);\n\n        return newValue;\n    }\n\n    moveSlider(event) {\n        const newPosition = this.getPosition(event);\n        const newValue = this.getValue(newPosition);\n        this.handleChange(newValue);\n    }\n\n    stopSlider() {\n        document.removeEventListener('mousemove', this.moveSlider);\n        document.removeEventListener('mouseup', this.stopSlider);\n    }\n\n    startSlider() {\n        document.addEventListener('mousemove', this.moveSlider);\n        document.addEventListener('mouseup', this.stopSlider);\n    }\n\n    renderFill() {\n        const currentValue = this.state.value;\n        if (this.props.fill === true) {\n            const orientationVertical = this.props.orientation === 'vertical';\n\n            let fillStyles;\n            if (orientationVertical) {\n                fillStyles = {\n                    height: currentValue + '%',\n                    top: 100 - currentValue + '%'\n               };\n            } else {\n                fillStyles = {\n                    width: currentValue + '%'\n                };\n            }\n\n            const fillClassName = classnames('slider__fill', {\n              'slider__fill--horizontal': !orientationVertical,\n              'slider__fill--vertical': orientationVertical\n            });\n\n            return (\n                <div\n                    style={fillStyles}\n                    className={fillClassName}\n                />\n            );\n        }\n\n        return null;\n    }\n\n    render() {\n        const orientationVertical = this.props.orientation === 'vertical';\n        const currentValue = this.state.value;\n\n        let currentPosition;\n\n        if (orientationVertical) {\n            currentPosition = {\n                top: 100 - currentValue + '%'\n           };\n        } else {\n            currentPosition = {\n                left: currentValue + '%'\n            };\n        }\n\n        const sliderBox = classnames('slider__track', {\n          'slider__track_horizontal': !orientationVertical,\n          'slider__track_vertical': orientationVertical\n        });\n\n        const sliderHandle = classnames('slider__handle', {\n          'slider__handle--horizontal': !orientationVertical,\n          'slider__handle--vertical': orientationVertical\n        });\n\n\n\n        return (\n            <div className={sliderBox}\n                ref=\"sliderBox\"\n                onMouseDown={this.moveSlider}\n            >\n                {this.renderFill()}\n                <div className={sliderHandle}\n                    style={currentPosition}\n                    onMouseDown={this.startSlider}\n                    onMouseUp={this.stopSlider}\n                />\n            </div>\n        );\n    }\n}\n\nSlider.propTypes = {\n    value: React.PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.string\n    ]),\n    onChange: PropTypes.func.isRequired,\n    min: PropTypes.number,\n    max: PropTypes.number,\n    step: PropTypes.number,\n    fill: PropTypes.bool,\n    orientation: PropTypes.oneOf([\n        'horizontal',\n        'vertical'\n    ])\n};\n\nSlider.defaultProps = {\n    value: 50,\n    min: 0,\n    max: 100,\n    step: 1,\n    orientation: 'horizontal',\n    fill: true\n};\n\nmodule.exports = Slider;\n"]}