{"version":3,"sources":["../../../src/components/widgets/EditableText.js"],"names":["EditableText","props","handleClick","bind","handleChange","handleUpdate","handleKeyPress","event","target","select","onChange","value","onUpdate","keyCode","which","refs","text","blur","focus","type","className","disable","autoFocus","onKeyDown","placeholder","readOnly","size","propTypes","func","string","bool","oneOf","number","defaultProps","module","exports"],"mappings":";;;;AAAA;;;;AACA;;;;;;;;;;;;AAEA;;;;IAIMA,Y;;;AACJ,wBAAYC,KAAZ,EAAmB;AAAA;;AAAA,4HACXA,KADW;;AAGjB,UAAKC,WAAL,GAAmB,MAAKA,WAAL,CAAiBC,IAAjB,OAAnB;AACA,UAAKC,YAAL,GAAoB,MAAKA,YAAL,CAAkBD,IAAlB,OAApB;AACA,UAAKE,YAAL,GAAoB,MAAKA,YAAL,CAAkBF,IAAlB,OAApB;AACA,UAAKG,cAAL,GAAsB,MAAKA,cAAL,CAAoBH,IAApB,OAAtB;AANiB;AAOlB;;AAED;;;;;gCACYI,K,EAAO;AACjBA,YAAMC,MAAN,CAAaC,MAAb;AACD;;;iCAEYF,K,EAAO;AAAA,UACVG,QADU,GACG,KAAKT,KADR,CACVS,QADU;;;AAGlB,UAAIA,QAAJ,EAAc;AACZA,iBAASH,MAAMC,MAAN,CAAaG,KAAtB;AACD;AACF;;;iCAEYJ,K,EAAO;AAAA,UACVK,QADU,GACG,KAAKX,KADR,CACVW,QADU;;;AAGlB,UAAIA,QAAJ,EAAc;AACZA,iBAASL,MAAMC,MAAN,CAAaG,KAAtB;AACD;AACF;;;mCAEcJ,K,EAAO;AACpB;;;AAGA,UAAI,CAACA,MAAMM,OAAN,IAAiBN,MAAMO,KAAxB,MAAmC,EAAvC,EAA2C;AACzC,aAAKC,IAAL,CAAUC,IAAV,CAAeC,IAAf;AACD;AACF;;;4BAEO;AACN,WAAKF,IAAL,CAAUC,IAAV,CAAeE,KAAf;AACD;;;6BAEQ;AAAA,mBAWH,KAAKjB,KAXF;AAAA,UAELkB,IAFK,UAELA,IAFK;AAAA,UAGLC,SAHK,UAGLA,SAHK;AAAA,UAILJ,IAJK,UAILA,IAJK;AAAA,UAKLK,OALK,UAKLA,OALK;AAAA,UAMLC,SANK,UAMLA,SANK;AAAA,UAOLC,SAPK,UAOLA,SAPK;AAAA,UAQLC,WARK,UAQLA,WARK;AAAA,UASLC,QATK,UASLA,QATK;AAAA,UAULC,IAVK,UAULA,IAVK;;AAYP,aACE;AACE,aAAI,MADN;AAEE,cAAMP,IAFR;AAGE,mBAAWC,aAAa,EAH1B;AAIE,eAAOJ,IAJT;AAKE,iBAAS,KAAKd,WALhB;AAME,kBAAU,KAAKE,YANjB;AAOE,gBAAQ,KAAKC,YAPf;AAQE,kBAAUgB,OARZ;AASE,mBAAWC,SATb;AAUE,oBAAY,KAAKhB,cAVnB;AAWE,mBAAWiB,SAXb;AAYE,qBAAaC,WAZf;AAaE,kBAAUC,QAbZ;AAcE,cAAMC;AAdR,QADF;AAkBD;;;;;;AAGH1B,aAAa2B,SAAb,GAAyB;AACvB;AACAjB,YAAU,oBAAUkB,IAFG;;AAIvB;AACAhB,YAAU,oBAAUgB,IALG;;AAOvB;AACAL,aAAW,oBAAUK,IARE;;AAUvB;AACAZ,QAAM,oBAAUa,MAXO;;AAavB;AACAL,eAAa,oBAAUK,MAdA;AAevBT,aAAW,oBAAUS,MAfE;AAgBvBR,WAAS,oBAAUS,IAhBI;AAiBvBR,aAAW,oBAAUQ,IAjBE;AAkBvBL,YAAU,oBAAUK,IAlBG;AAmBvBX,QAAM,oBAAUY,KAAV,CAAgB,CAAC,MAAD,EAAS,UAAT,CAAhB,CAnBiB;AAoBvBL,QAAM,oBAAUM;AApBO,CAAzB;;AAuBAhC,aAAaiC,YAAb,GAA4B;AAC1BR,YAAU,KADgB;AAE1BN,QAAM;AAFoB,CAA5B;;AAKAe,OAAOC,OAAP,GAAiBnC,YAAjB","file":"EditableText.js","sourcesContent":["import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\n\n/**\n * A generic component to handle text that can be edited when the user\n * clicks on it.\n */\nclass EditableText extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleClick = this.handleClick.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleUpdate = this.handleUpdate.bind(this);\n    this.handleKeyPress = this.handleKeyPress.bind(this);\n  }\n\n  // Selects/highlights all of the text in the filename input\n  handleClick(event) {\n    event.target.select();\n  }\n\n  handleChange(event) {\n    const { onChange } = this.props;\n\n    if (onChange) {\n      onChange(event.target.value);\n    }\n  }\n\n  handleUpdate(event) {\n    const { onUpdate } = this.props;\n\n    if (onUpdate) {\n      onUpdate(event.target.value);\n    }\n  }\n\n  handleKeyPress(event) {\n    /*\n         * This will force handleUpdate to be called via the input's onBlur\n         */\n    if ((event.keyCode || event.which) === 13) {\n      this.refs.text.blur();\n    }\n  }\n\n  focus() {\n    this.refs.text.focus();\n  }\n\n  render() {\n    const {\n      type,\n      className,\n      text,\n      disable,\n      autoFocus,\n      onKeyDown,\n      placeholder,\n      readOnly,\n      size,\n    } = this.props;\n    return (\n      <input\n        ref=\"text\"\n        type={type}\n        className={className || \"\"}\n        value={text}\n        onClick={this.handleClick}\n        onChange={this.handleChange}\n        onBlur={this.handleUpdate}\n        disabled={disable}\n        autoFocus={autoFocus}\n        onKeyPress={this.handleKeyPress}\n        onKeyDown={onKeyDown}\n        placeholder={placeholder}\n        readOnly={readOnly}\n        size={size}\n      />\n    );\n  }\n}\n\nEditableText.propTypes = {\n  // Called with input value on changes (as the user types)\n  onChange: PropTypes.func,\n\n  // Called with input value on blur (and enter if no onEnter is given)\n  onUpdate: PropTypes.func,\n\n  // Called on input keyDown events\n  onKeyDown: PropTypes.func,\n\n  // Input value property\n  text: PropTypes.string,\n\n  // Input properties\n  placeholder: PropTypes.string,\n  className: PropTypes.string,\n  disable: PropTypes.bool,\n  autoFocus: PropTypes.bool,\n  readOnly: PropTypes.bool,\n  type: PropTypes.oneOf([\"text\", \"password\"]),\n  size: PropTypes.number,\n};\n\nEditableText.defaultProps = {\n  readOnly: false,\n  type: \"text\",\n};\n\nmodule.exports = EditableText;\n"]}