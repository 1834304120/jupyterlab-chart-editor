{"version":3,"sources":["../../../src/components/widgets/Hint.js"],"names":["Hint","delay","bind","reset","shown","timeoutHandle","clearTimeout","setTimeout","show","forceUpdate","props","delayMilliseconds","position","hint","error","children","isShowing","Boolean","className","propTypes","bool","string","number","oneOf","PropTypes","node","defaultProps"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;;;;;;;;;IAEqBA,I;;;AAEjB,oBAAc;AAAA;;AAAA;;AAGV,cAAKC,KAAL,GAAa,MAAKA,KAAL,CAAWC,IAAX,OAAb;AACA,cAAKC,KAAL,GAAa,MAAKA,KAAL,CAAWD,IAAX,OAAb;AACA,cAAKE,KAAL,GAAa,KAAb;AALU;AAMb;;;;gCAEO;AAAA;;AACJ,gBAAI,KAAKC,aAAT,EAAwB;AACpBC,6BAAa,KAAKD,aAAlB;AACH;AACD,iBAAKA,aAAL,GAAqBE,WAAW,YAAM;AAClC,uBAAKF,aAAL,GAAqB,IAArB;AACA,uBAAKG,IAAL,GAAY,IAAZ;AACA,uBAAKC,WAAL;AACH,aAJoB,EAIlB,KAAKC,KAAL,CAAWC,iBAJO,CAArB;AAKH;;;+CAEsB;AACnB,iBAAKR,KAAL;AACH;;;gCAEO;AACJ,gBAAI,KAAKE,aAAT,EAAwB;AACpBC,6BAAa,KAAKD,aAAlB;AACH;AACD,iBAAKG,IAAL,GAAY,KAAZ;AACH;;;iCAEQ;AAAA,yBACwD,KAAKE,KAD7D;AAAA,gBACEE,QADF,UACEA,QADF;AAAA,gBACYC,IADZ,UACYA,IADZ;AAAA,gBACkBC,KADlB,UACkBA,KADlB;AAAA,gBACyBC,QADzB,UACyBA,QADzB;AAAA,gBACmCJ,iBADnC,UACmCA,iBADnC;;AAEL,gBAAMK,YAAYC,QAAQJ,IAAR,MAAkBF,oBAAoB,KAAKH,IAAzB,GAAgC,IAAlD,CAAlB;;AAEA;;;;AAIA,iBAAKL,KAAL;;AAEA;AACA,gBAAI,CAACa,SAAD,IAAcC,QAAQJ,IAAR,CAAlB,EAAiC;AAC7B,qBAAKZ,KAAL;AACH;;AAED;AACA,gBAAI,CAACe,SAAL,EAAgB;AACZ,uBACI;AAAA;AAAA,sBAAK,WAAW,KAAKN,KAAL,CAAWQ,SAA3B;AACKH;AADL,iBADJ;AAKH;;AAED;AACA,gBAAMG,YAAY,0BAAW,CACzB,KAAKR,KAAL,CAAWQ,SADc,EAEzB,cAFyB,aAGhBN,QAHgB,CAAX,EAIf;AACC,+BAAeK,QAAQJ,IAAR,KAAiBC;AADjC,aAJe,CAAlB;;AAQA,mBACI;AAAA;AAAA,kBAAK,WAAWI,SAAhB,EAA2B,aAAWL,IAAtC;AACKE;AADL,aADJ;AAKH;;;;;;kBAtEgBf,I;;;AAyErBA,KAAKmB,SAAL,GAAiB;AACbL,WAAO,iBAAUM,IADJ;AAEbP,UAAM,iBAAUQ,MAFH;AAGbH,eAAW,iBAAUG,MAHR;AAIbV,uBAAmB,iBAAUW,MAJhB;AAKbV,cAAU,iBAAUW,KAAV,CAAgB,CACtB,cADsB,EACN,QADM,EACI,aADJ,EACmB,OADnB,EAC4B,MAD5B,EAEtB,WAFsB,EAET,MAFS,EAED,WAFC,EAEY,KAFZ,EAEmB,UAFnB,CAAhB,CALG;AASbR,cAAU,gBAAMS,SAAN,CAAgBC;AATb,CAAjB;;AAYAzB,KAAK0B,YAAL,GAAoB;AAChBd,cAAU;AADM,CAApB","file":"Hint.js","sourcesContent":["import React, {PropTypes, Component} from 'react';\nimport classnames from 'classnames';\n\nexport default class Hint extends Component {\n\n    constructor() {\n        super();\n\n        this.delay = this.delay.bind(this);\n        this.reset = this.reset.bind(this);\n        this.shown = false;\n    }\n\n    delay() {\n        if (this.timeoutHandle) {\n            clearTimeout(this.timeoutHandle);\n        }\n        this.timeoutHandle = setTimeout(() => {\n            this.timeoutHandle = null;\n            this.show = true;\n            this.forceUpdate();\n        }, this.props.delayMilliseconds);\n    }\n\n    componentWillUnmount() {\n        this.reset();\n    }\n\n    reset() {\n        if (this.timeoutHandle) {\n            clearTimeout(this.timeoutHandle);\n        }\n        this.show = false;\n    }\n\n    render() {\n        const {position, hint, error, children, delayMilliseconds} = this.props;\n        const isShowing = Boolean(hint) && (delayMilliseconds ? this.show : true);\n\n        /*\n         * When a hint is triggered we reset the timer.\n         * Only when a user pauses do we want to show a hint.\n         */\n        this.reset();\n\n        // If we are using a delay and want to show a hint but its not yet shown\n        if (!isShowing && Boolean(hint)) {\n            this.delay();\n        }\n\n        // If there is no hint or a delayed hint is not being shown\n        if (!isShowing) {\n            return (\n                <div className={this.props.className}>\n                    {children}\n                </div>\n            );\n        }\n\n        // Now we are either rendering a delayed Hint or a hint with no delay.\n        const className = classnames([\n            this.props.className,\n            'hint--always',\n            `hint--${position}`\n        ], {\n            'hint--error': Boolean(hint) && error\n        });\n\n        return (\n            <div className={className} data-hint={hint}>\n                {children}\n            </div>\n        );\n    }\n}\n\nHint.propTypes = {\n    error: PropTypes.bool,\n    hint: PropTypes.string,\n    className: PropTypes.string,\n    delayMilliseconds: PropTypes.number,\n    position: PropTypes.oneOf([\n        'bottom-right', 'bottom', 'bottom-left', 'right', 'left',\n        'top-right', 'left', 'top-right', 'top', 'top-left'\n    ]),\n    children: React.PropTypes.node\n};\n\nHint.defaultProps = {\n    position: 'left'\n};\n"]}