{"version":3,"sources":["../../../src/components/widgets/Hint.js"],"names":["Hint","delay","bind","reset","shown","timeoutHandle","clearTimeout","setTimeout","show","forceUpdate","props","delayMilliseconds","position","hint","error","children","isShowing","Boolean","className","propTypes","bool","string","number","oneOf","node","defaultProps"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;AACA;;;;;;;;;;;;IAEqBA,I;;;AACnB,kBAAc;AAAA;;AAAA;;AAGZ,UAAKC,KAAL,GAAa,MAAKA,KAAL,CAAWC,IAAX,OAAb;AACA,UAAKC,KAAL,GAAa,MAAKA,KAAL,CAAWD,IAAX,OAAb;AACA,UAAKE,KAAL,GAAa,KAAb;AALY;AAMb;;;;4BAEO;AAAA;;AACN,UAAI,KAAKC,aAAT,EAAwB;AACtBC,qBAAa,KAAKD,aAAlB;AACD;AACD,WAAKA,aAAL,GAAqBE,WAAW,YAAM;AACpC,eAAKF,aAAL,GAAqB,IAArB;AACA,eAAKG,IAAL,GAAY,IAAZ;AACA,eAAKC,WAAL;AACD,OAJoB,EAIlB,KAAKC,KAAL,CAAWC,iBAJO,CAArB;AAKD;;;2CAEsB;AACrB,WAAKR,KAAL;AACD;;;4BAEO;AACN,UAAI,KAAKE,aAAT,EAAwB;AACtBC,qBAAa,KAAKD,aAAlB;AACD;AACD,WAAKG,IAAL,GAAY,KAAZ;AACD;;;6BAEQ;AAAA,mBACwD,KAAKE,KAD7D;AAAA,UACCE,QADD,UACCA,QADD;AAAA,UACWC,IADX,UACWA,IADX;AAAA,UACiBC,KADjB,UACiBA,KADjB;AAAA,UACwBC,QADxB,UACwBA,QADxB;AAAA,UACkCJ,iBADlC,UACkCA,iBADlC;;AAEP,UAAMK,YAAYC,QAAQJ,IAAR,MAAkBF,oBAAoB,KAAKH,IAAzB,GAAgC,IAAlD,CAAlB;;AAEA;;;;AAIA,WAAKL,KAAL;;AAEA;AACA,UAAI,CAACa,SAAD,IAAcC,QAAQJ,IAAR,CAAlB,EAAiC;AAC/B,aAAKZ,KAAL;AACD;;AAED;AACA,UAAI,CAACe,SAAL,EAAgB;AACd,eAAO;AAAA;AAAA,YAAK,WAAW,KAAKN,KAAL,CAAWQ,SAA3B;AAAuCH;AAAvC,SAAP;AACD;;AAED;AACA,UAAMG,YAAY,0BAChB,CAAC,KAAKR,KAAL,CAAWQ,SAAZ,EAAuB,cAAvB,aAAgDN,QAAhD,CADgB,EAEhB;AACE,uBAAeK,QAAQJ,IAAR,KAAiBC;AADlC,OAFgB,CAAlB;;AAOA,aACE;AAAA;AAAA,UAAK,WAAWI,SAAhB,EAA2B,aAAWL,IAAtC;AACGE;AADH,OADF;AAKD;;;;;;kBAhEkBf,I;;;AAmErBA,KAAKmB,SAAL,GAAiB;AACfL,SAAO,oBAAUM,IADF;AAEfP,QAAM,oBAAUQ,MAFD;AAGfH,aAAW,oBAAUG,MAHN;AAIfV,qBAAmB,oBAAUW,MAJd;AAKfV,YAAU,oBAAUW,KAAV,CAAgB,CACxB,cADwB,EAExB,QAFwB,EAGxB,aAHwB,EAIxB,OAJwB,EAKxB,MALwB,EAMxB,WANwB,EAOxB,MAPwB,EAQxB,WARwB,EASxB,KATwB,EAUxB,UAVwB,CAAhB,CALK;AAiBfR,YAAU,oBAAUS;AAjBL,CAAjB;;AAoBAxB,KAAKyB,YAAL,GAAoB;AAClBb,YAAU;AADQ,CAApB","file":"Hint.js","sourcesContent":["import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport classnames from \"classnames\";\n\nexport default class Hint extends Component {\n  constructor() {\n    super();\n\n    this.delay = this.delay.bind(this);\n    this.reset = this.reset.bind(this);\n    this.shown = false;\n  }\n\n  delay() {\n    if (this.timeoutHandle) {\n      clearTimeout(this.timeoutHandle);\n    }\n    this.timeoutHandle = setTimeout(() => {\n      this.timeoutHandle = null;\n      this.show = true;\n      this.forceUpdate();\n    }, this.props.delayMilliseconds);\n  }\n\n  componentWillUnmount() {\n    this.reset();\n  }\n\n  reset() {\n    if (this.timeoutHandle) {\n      clearTimeout(this.timeoutHandle);\n    }\n    this.show = false;\n  }\n\n  render() {\n    const { position, hint, error, children, delayMilliseconds } = this.props;\n    const isShowing = Boolean(hint) && (delayMilliseconds ? this.show : true);\n\n    /*\n         * When a hint is triggered we reset the timer.\n         * Only when a user pauses do we want to show a hint.\n         */\n    this.reset();\n\n    // If we are using a delay and want to show a hint but its not yet shown\n    if (!isShowing && Boolean(hint)) {\n      this.delay();\n    }\n\n    // If there is no hint or a delayed hint is not being shown\n    if (!isShowing) {\n      return <div className={this.props.className}>{children}</div>;\n    }\n\n    // Now we are either rendering a delayed Hint or a hint with no delay.\n    const className = classnames(\n      [this.props.className, \"hint--always\", `hint--${position}`],\n      {\n        \"hint--error\": Boolean(hint) && error,\n      }\n    );\n\n    return (\n      <div className={className} data-hint={hint}>\n        {children}\n      </div>\n    );\n  }\n}\n\nHint.propTypes = {\n  error: PropTypes.bool,\n  hint: PropTypes.string,\n  className: PropTypes.string,\n  delayMilliseconds: PropTypes.number,\n  position: PropTypes.oneOf([\n    \"bottom-right\",\n    \"bottom\",\n    \"bottom-left\",\n    \"right\",\n    \"left\",\n    \"top-right\",\n    \"left\",\n    \"top-right\",\n    \"top\",\n    \"top-left\",\n  ]),\n  children: PropTypes.node,\n};\n\nHint.defaultProps = {\n  position: \"left\",\n};\n"]}