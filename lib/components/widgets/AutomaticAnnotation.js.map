{"version":3,"sources":["../../../src/components/widgets/AutomaticAnnotation.js"],"names":["DEFAULT_ANNOTATION_VALUES","ax","ay","annotationTemplate","align","fontcolor","fontsize","fontfamily","showarrow","arrowcolor","arrowwidth","AutomaticAnnotationWidget","state","showControls","plotlyClickHandler","bind","renderControls","gd","document","querySelector","on","removeListener","clickObject","props","annotationsLength","dispatch","relayoutObject","i","points","length","point","trace","fullData","pointNumber","templateVariables","text","annotationIndex","Number","isNaN","j","t","replace","Array","isArray","annotation","x","y","xref","xaxis","_id","yref","yaxis","font","color","family","size","arrowhead","setState","value","label","icon","onClose","propTypes","func","isRequired","number"],"mappings":"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","file":"AutomaticAnnotation.js","sourcesContent":["import AccordionMenuItem from \"./AccordionMenuItem\";\nimport AnnotationEditor from \"./annotation_editor/AnnotationEditor\";\nimport ColorPicker from \"./ColorPicker\";\nimport FontSelector from \"./FontSelector\";\nimport NumericInputStatefulWrapper from \"./NumericInputStatefulWrapper\";\nimport RadioBlocks from \"./RadioBlocks\";\nimport React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport ToolMenuItem from \"./ToolMenuItem\";\nimport { _ } from \"@common/utils/i18n\";\nimport { contains, has, empty, merge } from \"ramda\";\nimport { relayout } from \"@workspace/actions/workspace\";\nimport { showNotification } from \"@common/actions/notification\";\n\nexport const DEFAULT_ANNOTATION_VALUES = {\n  ax: 0,\n  ay: -20,\n  annotationTemplate: \"{x}, {y}\",\n\n  align: \"left\",\n  fontcolor: \"rgb(60, 60, 60)\",\n  fontsize: 12,\n  fontfamily: '\"Open Sans\", verdana, arial, sans-serif',\n\n  showarrow: true,\n  arrowcolor: \"rgb(60, 60, 60)\",\n  arrowwidth: 1,\n};\n\nexport default class AutomaticAnnotationWidget extends Component {\n  constructor() {\n    super();\n    this.state = merge(DEFAULT_ANNOTATION_VALUES, { showControls: false });\n    this.plotlyClickHandler = this.plotlyClickHandler.bind(this);\n    this.renderControls = this.renderControls.bind(this);\n  }\n\n  componentDidMount() {\n    const gd = document.querySelector(\".js-plot-panel\");\n    gd.on(\"plotly_click\", this.plotlyClickHandler);\n  }\n\n  componentWillUnmount() {\n    const gd = document.querySelector(\".js-plot-panel\");\n    // TODO: removeListener seems to be the right API, but I've\n    // seen removeEventListener elsewhere in the code\n    gd.removeListener(\"plotly_click\", this.plotlyClickHandler);\n  }\n\n  plotlyClickHandler(clickObject) {\n    const { annotationsLength, dispatch } = this.props;\n\n    const {\n      ax,\n      ay,\n      annotationTemplate,\n      align,\n      fontcolor,\n      fontsize,\n      fontfamily,\n      showarrow,\n      arrowcolor,\n      arrowwidth,\n    } = this.state;\n\n    const relayoutObject = {};\n\n    for (var i = 0; i < clickObject.points.length; i++) {\n      const point = clickObject.points[i];\n\n      /*\n            * Annotations can only be bound to x and y axes\n            * 'z', 'lat', 'lon', etc axes aren't supported.\n            * Validate the the point has an 'xaxis' and 'yaxis'\n            * and no 'z' axis.\n            */\n      if (!(has(\"xaxis\", point) && has(\"yaxis\", point))) {\n        showNotification(`\n                    Clicking on data points to add annotations isn't supported\n                    for this chart type. It is only supported for 2D plots.`);\n        continue;\n      } else if (\n        has(\"xaxis\", point) &&\n        has(\"yaxis\", point) &&\n        has(\"zaxis\", point)\n      ) {\n        showNotification(`\n                    Adding annotations by clicking on points\n                    isn't supported for 3D charts yet.\n                    `);\n        continue;\n      }\n\n      // fullData is confusingly named. this is really the full trace.\n      const trace = point.fullData;\n      const pointNumber = point.pointNumber;\n      const templateVariables = [\"x\", \"y\", \"text\", \"z\"];\n      let text = annotationTemplate;\n      let annotationIndex = Number.isNaN(annotationsLength)\n        ? 0\n        : annotationsLength;\n      for (let j = 0; j < templateVariables.length; j++) {\n        const t = templateVariables[j];\n\n        /*\n                * the point object contains data about the hover point\n                * that was clicked on. this might actually be different\n                * than the trace data itself. For example, in box plots,\n                * the point.x and point.y contains positional data of\n                * the 5 hover flags on the box plot\n                * (median, quartials, tails) not the underlying data.\n                *\n                * the 'text' data is found in the actual trace.\n                */\n\n        // 'x', 'y', 'z' data\n        if (has(t, point)) {\n          text = text.replace(`{${t}}`, point[t]);\n        } else if (\n          has(t, trace) &&\n          Array.isArray(trace[t]) &&\n          point.pointNumber < trace[t].length\n        ) {\n          // 'text' data\n          text = text.replace(`{${t}}`, trace[t][pointNumber]);\n        }\n      }\n\n      const annotation = {\n        text,\n        // position the annotation with an arrow (which may be transparent)\n        showarrow: DEFAULT_ANNOTATION_VALUES.showarrow,\n        x: point.x,\n        y: point.y,\n        xref: point.xaxis._id,\n        yref: point.yaxis._id,\n        ax,\n        ay,\n        arrowcolor: showarrow ? arrowcolor : \"rgba(0, 0, 0, 0)\",\n\n        align,\n        font: {\n          color: fontcolor,\n          family: fontfamily,\n          size: fontsize,\n        },\n        arrowwidth,\n        arrowhead: 0,\n      };\n\n      relayoutObject[`annotations[${annotationIndex}]`] = annotation;\n      annotationIndex += 1;\n    }\n\n    if (empty(relayoutObject)) {\n      dispatch(relayout(relayoutObject));\n    }\n  }\n\n  renderControls() {\n    return (\n      <div>\n        <div className=\"automatic-annotation-widget__container\">\n          <div>{_(\"Text Template\")}</div>\n          <AnnotationEditor\n            onChange={value => this.setState({ annotationTemplate: value })}\n            placeholder={\"y = {y}\"}\n            value={this.state.annotationTemplate}\n          />\n\n          <div className=\"automatic-annotation-widget__description\">\n            {_(\"Note\")}: <code>{\" {y} \"}</code>\n            {_(\"and\")}\n            <code>{\" {x} \"}</code>\n            {_(`are special tokens that will get\n                        filled in with the x and y values\n                        of the data point that you click on.\n                        {text} and {z} are also supported if\n                        your data points contains those attributes.\n                        Stuck? `)}\n            <a\n              href=\"http://help.plot.ly/how-to-add-annotations/#step-6-add-an-automatically-positioned-label\"\n              target=\"_blank\"\n            >\n              {_(\"Check out our tutorial\")}\n            </a>.\n          </div>\n        </div>\n\n        {contains(\"<br>\", this.state.annotationTemplate) ? (\n          <ToolMenuItem className={\"js-alignment\"} title={_(\"Alignment\")}>\n            <RadioBlocks\n              options={[\n                { label: \"\", value: \"left\", icon: \"icon-align-left\" },\n                { label: \"\", value: \"center\", icon: \"icon-align-center\" },\n                { label: \"\", value: \"right\", icon: \"icon-align-right\" },\n              ]}\n              activeOption={this.state.align}\n              onOptionChange={align => {\n                this.setState({ align });\n              }}\n            />\n          </ToolMenuItem>\n        ) : null}\n\n        <ToolMenuItem\n          className={\"js-ay\"}\n          title={_(\"Vertical Position Relative to Data Point\")}\n          units={\"px\"}\n        >\n          <NumericInputStatefulWrapper\n            value={this.state.ay}\n            onUpdate={ay => this.setState({ ay })}\n            step={10}\n          />\n        </ToolMenuItem>\n\n        <ToolMenuItem\n          className={\"js-ax\"}\n          title={_(\"Horizontal Position Relative to Data Point\")}\n          units={\"px\"}\n        >\n          <NumericInputStatefulWrapper\n            value={this.state.ax}\n            onUpdate={ax => this.setState({ ax })}\n            step={10}\n          />\n        </ToolMenuItem>\n\n        {/* Standard Properties */}\n\n        <ToolMenuItem className={\"js-fontcolor\"} title={_(\"Text Color\")}>\n          <ColorPicker\n            onColorChange={fontcolor => {\n              this.setState({ fontcolor });\n            }}\n            dispatch={this.props.dispatch}\n            selectedColor={this.state.fontcolor}\n          />\n        </ToolMenuItem>\n\n        <ToolMenuItem title={_(\"Size\")}>\n          <NumericInputStatefulWrapper\n            value={this.state.fontsize}\n            onUpdate={fontsize => this.setState({ fontsize })}\n            step={10}\n          />\n        </ToolMenuItem>\n\n        <ToolMenuItem title={_(\"Typeface\")}>\n          <FontSelector\n            onChange={fontfamily => {\n              this.setState({ fontfamily });\n            }}\n            dispatch={this.props.dispatch}\n            activeOption={this.state.fontfamily}\n          />\n        </ToolMenuItem>\n\n        <ToolMenuItem title={_(\"Arrow\")}>\n          <RadioBlocks\n            options={[\n              { value: true, label: \"Show\" },\n              { value: false, label: \"Hide\" },\n            ]}\n            activeOption={this.state.showarrow}\n            onOptionChange={showarrow => {\n              this.setState({ showarrow });\n            }}\n          />\n        </ToolMenuItem>\n\n        {this.state.showarrow ? (\n          <ToolMenuItem title={_(\"Arrow Color\")}>\n            <ColorPicker\n              onColorChange={arrowcolor => {\n                this.setState({ arrowcolor });\n              }}\n              dispatch={this.props.dispatch}\n              selectedColor={this.state.color}\n            />\n          </ToolMenuItem>\n        ) : null}\n\n        {this.state.showarrow ? (\n          <ToolMenuItem title={_(\"Line Width\")} units={\"px\"}>\n            <NumericInputStatefulWrapper\n              value={this.state.arrowwidth}\n              onUpdate={arrowwidth => this.setState({ arrowwidth })}\n              step={1}\n            />\n          </ToolMenuItem>\n        ) : null}\n      </div>\n    );\n  }\n\n  render() {\n    return (\n      <div>\n        <div className=\"automatic-annotation-widget__header\">\n          {_(\"Add annotations by clicking on data points in the graph. \")}\n        </div>\n\n        <div>\n          <AccordionMenuItem\n            id=\"automatic-annotation-controls\"\n            isOpen={this.state.showControls}\n            onToggle={() =>\n              this.setState({\n                showControls: !this.state.showControls,\n              })}\n            title={\"Annotation Template\"}\n          >\n            {this.renderControls()}\n          </AccordionMenuItem>\n\n          <div className=\"automatic-annotation-widget__button_container\">\n            <div className=\"btnbase btn--default\" onClick={this.props.onClose}>\n              {_(\"Done\")}\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nAutomaticAnnotationWidget.propTypes = {\n  dispatch: PropTypes.func.isRequired,\n  annotationsLength: PropTypes.number.isRequired,\n  onClose: PropTypes.func.isRequired,\n};\n"]}