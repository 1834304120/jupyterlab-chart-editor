{"version":3,"sources":["../../../src/components/widgets/AutomaticAnnotation.js"],"names":["DEFAULT_ANNOTATION_VALUES","ax","ay","annotationTemplate","align","fontcolor","fontsize","fontfamily","showarrow","arrowcolor","arrowwidth","AutomaticAnnotationWidget","state","showControls","plotlyClickHandler","bind","renderControls","gd","document","querySelector","on","removeListener","clickObject","props","annotationsLength","dispatch","relayoutObject","i","points","length","point","trace","fullData","pointNumber","templateVariables","text","annotationIndex","Number","isNaN","j","t","replace","Array","isArray","annotation","x","y","xref","xaxis","_id","yref","yaxis","font","color","family","size","arrowhead","setState","value","label","icon","onClose","propTypes","func","isRequired","number"],"mappings":";;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;AAGO,IAAMA,gEAA4B;AACrCC,QAAI,CADiC;AAErCC,QAAI,CAAC,EAFgC;AAGrCC,wBAAoB,UAHiB;;AAKrCC,WAAO,MAL8B;AAMrCC,eAAW,iBAN0B;AAOrCC,cAAU,EAP2B;AAQrCC,gBAAY,yCARyB;;AAUrCC,eAAW,IAV0B;AAWrCC,gBAAY,iBAXyB;AAYrCC,gBAAY;AAZyB,CAAlC;;IAecC,yB;;;AACjB,yCAAc;AAAA;;AAAA;;AAEV,cAAKC,KAAL,GAAa,kBACTZ,yBADS,EAET,EAACa,cAAc,KAAf,EAFS,CAAb;AAIA,cAAKC,kBAAL,GAA0B,MAAKA,kBAAL,CAAwBC,IAAxB,OAA1B;AACA,cAAKC,cAAL,GAAsB,MAAKA,cAAL,CAAoBD,IAApB,OAAtB;AAPU;AAQb;;;;4CAEmB;AAChB,gBAAME,KAAKC,SAASC,aAAT,CAAuB,gBAAvB,CAAX;AACAF,eAAGG,EAAH,CAAM,cAAN,EAAsB,KAAKN,kBAA3B;AACH;;;+CAEsB;AACnB,gBAAMG,KAAKC,SAASC,aAAT,CAAuB,gBAAvB,CAAX;AACA;AACA;AACAF,eAAGI,cAAH,CAAkB,cAAlB,EAAkC,KAAKP,kBAAvC;AACH;;;2CAEkBQ,W,EAAa;AAAA,yBACU,KAAKC,KADf;AAAA,gBACrBC,iBADqB,UACrBA,iBADqB;AAAA,gBACFC,QADE,UACFA,QADE;AAAA,yBAaxB,KAAKb,KAbmB;AAAA,gBAIxBX,EAJwB,UAIxBA,EAJwB;AAAA,gBAIpBC,EAJoB,UAIpBA,EAJoB;AAAA,gBAKxBC,kBALwB,UAKxBA,kBALwB;AAAA,gBAMxBC,KANwB,UAMxBA,KANwB;AAAA,gBAOxBC,SAPwB,UAOxBA,SAPwB;AAAA,gBAQxBC,QARwB,UAQxBA,QARwB;AAAA,gBASxBC,UATwB,UASxBA,UATwB;AAAA,gBAUxBC,SAVwB,UAUxBA,SAVwB;AAAA,gBAWxBC,UAXwB,UAWxBA,UAXwB;AAAA,gBAYxBC,UAZwB,UAYxBA,UAZwB;;;AAe5B,gBAAMgB,iBAAiB,EAAvB;;AAEA,iBAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIL,YAAYM,MAAZ,CAAmBC,MAAvC,EAA+CF,GAA/C,EAAoD;AAChD,oBAAMG,QAAQR,YAAYM,MAAZ,CAAmBD,CAAnB,CAAd;;AAEA;;;;;;AAMA,oBAAI,EAAE,gBAAI,OAAJ,EAAaG,KAAb,KAAuB,gBAAI,OAAJ,EAAaA,KAAb,CAAzB,CAAJ,EAAmD;;AAE/C;AAGI;AACP,iBAND,MAMO,IAAI,gBAAI,OAAJ,EAAaA,KAAb,KACA,gBAAI,OAAJ,EAAaA,KAAb,CADA,IAEA,gBAAI,OAAJ,EAAaA,KAAb,CAFJ,EAEyB;;AAE5B;AAII;AAEP;;AAED;AACA,oBAAMC,QAAQD,MAAME,QAApB;AACA,oBAAMC,cAAcH,MAAMG,WAA1B;AACA,oBAAMC,oBAAoB,CAAC,GAAD,EAAM,GAAN,EAAW,MAAX,EAAmB,GAAnB,CAA1B;AACA,oBAAIC,OAAOhC,kBAAX;AACA,oBAAIiC,kBAAkBC,OAAOC,KAAP,CAAad,iBAAb,IAClB,CADkB,GACdA,iBADR;AAEA,qBAAK,IAAIe,IAAI,CAAb,EAAgBA,IAAIL,kBAAkBL,MAAtC,EAA8CU,GAA9C,EAAmD;AAC/C,wBAAMC,IAAIN,kBAAkBK,CAAlB,CAAV;;AAEA;;;;;;;;;;;AAWA;AACA,wBAAI,gBAAIC,CAAJ,EAAOV,KAAP,CAAJ,EAAmB;AACfK,+BAAOA,KAAKM,OAAL,OAAiBD,CAAjB,QAAuBV,MAAMU,CAAN,CAAvB,CAAP;AACH;;AAED;AAJA,yBAKK,IAAI,gBAAIA,CAAJ,EAAOT,KAAP,KACAW,MAAMC,OAAN,CAAcZ,MAAMS,CAAN,CAAd,CADA,IAEAV,MAAMG,WAAN,GAAoBF,MAAMS,CAAN,EAASX,MAFjC,EAEyC;;AAE1CM,mCAAOA,KAAKM,OAAL,OAAiBD,CAAjB,QAAuBT,MAAMS,CAAN,EAASP,WAAT,CAAvB,CAAP;AAEH;AAEJ;;AAED,oBAAMW,aAAa;AACfT,8BADe;AAEf;AACA3B,+BAAWR,0BAA0BQ,SAHtB;AAIfqC,uBAAGf,MAAMe,CAJM;AAKfC,uBAAGhB,MAAMgB,CALM;AAMfC,0BAAMjB,MAAMkB,KAAN,CAAYC,GANH;AAOfC,0BAAMpB,MAAMqB,KAAN,CAAYF,GAPH;AAQfhD,0BARe;AASfC,0BATe;AAUfO,gCACID,YACAC,UADA,GAEA,kBAbW;;AAgBfL,gCAhBe;AAiBfgD,0BAAM;AACFC,+BAAOhD,SADL;AAEFiD,gCAAQ/C,UAFN;AAGFgD,8BAAMjD;AAHJ,qBAjBS;AAsBfI,0CAtBe;AAuBf8C,+BAAW;AAvBI,iBAAnB;;AA0BA9B,gDAA8BU,eAA9B,UAAoDQ,UAApD;AACAR,mCAAmB,CAAnB;AAEH;;AAED,gBAAI,kBAAMV,cAAN,CAAJ,EAA2B;AACvBD,yBAAS,yBAASC,cAAT,CAAT;AACH;AAEJ;;;yCAEgB;AAAA;;AACb,mBACA;AAAA;AAAA;AACI;AAAA;AAAA,sBAAK,WAAU,wCAAf;AACI;AAAA;AAAA;AAAM,qCAAE,eAAF;AAAN,qBADJ;AAEI;AACI,kCAAU;AAAA,mCAAS,OAAK+B,QAAL,CAAc,EAACtD,oBAAoBuD,KAArB,EAAd,CAAT;AAAA,yBADd;AAEI,qCAAa,SAFjB;AAGI,+BAAO,KAAK9C,KAAL,CAAWT;AAHtB,sBAFJ;AAQI;AAAA;AAAA,0BAAK,WAAU,0CAAf;AACK,qCAAE,MAAF,CADL;AAAA;AACiB;AAAA;AAAA;AAAO;AAAP,yBADjB;AAEK,qCAAE,KAAF,CAFL;AAGI;AAAA;AAAA;AAAO;AAAP,yBAHJ;AAIK,qWAJL;AAUI;AAAA;AAAA,8BAAG,MAAK,0FAAR;AACG,wCAAO;AADV;AAGK,yCAAE,wBAAF;AAHL,yBAVJ;AAAA;AAAA;AARJ,iBADJ;AA4BQ,qCAAS,MAAT,EAAiB,KAAKS,KAAL,CAAWT,kBAA5B,IAEA;AAAA;AAAA,sBAAc,WAAW,cAAzB,EAAyC,OAAO,aAAE,WAAF,CAAhD;AAEI;AACI,iCAAS,CACL,EAACwD,OAAO,EAAR,EAAYD,OAAO,MAAnB,EAA2BE,MAAM,iBAAjC,EADK,EAEL,EAACD,OAAO,EAAR,EAAYD,OAAO,QAAnB,EAA6BE,MAAM,mBAAnC,EAFK,EAGL,EAACD,OAAO,EAAR,EAAYD,OAAO,OAAnB,EAA4BE,MAAM,kBAAlC,EAHK,CADb;AAMI,sCAAc,KAAKhD,KAAL,CAAWR,KAN7B;AAOI,wCAAgB,+BAAS;AACrB,mCAAKqD,QAAL,CAAc,EAACrD,YAAD,EAAd;AAAwB;AARhC;AAFJ,iBAFA,GAkBE,IA9CV;AAiDI;AAAA;AAAA;AACI,mCAAW,OADf;AAEI,+BAAO,aAAE,0CAAF,CAFX;AAGI,+BAAO;AAHX;AAKI;AACI,+BAAO,KAAKQ,KAAL,CAAWV,EADtB;AAEI,kCAAU;AAAA,mCAAM,OAAKuD,QAAL,CAAc,EAACvD,MAAD,EAAd,CAAN;AAAA,yBAFd;AAGI,8BAAM;AAHV;AALJ,iBAjDJ;AA6DI;AAAA;AAAA;AACI,mCAAW,OADf;AAEI,+BAAO,aAAE,4CAAF,CAFX;AAGI,+BAAO;AAHX;AAKI;AACI,+BAAO,KAAKU,KAAL,CAAWX,EADtB;AAEI,kCAAU;AAAA,mCAAM,OAAKwD,QAAL,CAAc,EAACxD,MAAD,EAAd,CAAN;AAAA,yBAFd;AAGI,8BAAM;AAHV;AALJ,iBA7DJ;AA2EI;AAAA;AAAA;AACI,mCAAW,cADf;AAEI,+BAAO,aAAE,YAAF;AAFX;AAII;AACI,uCAAe,kCAAa;AACxB,mCAAKwD,QAAL,CAAc,EAACpD,oBAAD,EAAd;AACH,yBAHL;AAII,kCAAU,KAAKkB,KAAL,CAAWE,QAJzB;AAKI,uCAAe,KAAKb,KAAL,CAAWP;AAL9B;AAJJ,iBA3EJ;AAwFI;AAAA;AAAA,sBAAc,OAAO,aAAE,MAAF,CAArB;AACI;AACA,+BAAO,KAAKO,KAAL,CAAWN,QADlB;AAEA,kCAAU;AAAA,mCAAY,OAAKmD,QAAL,CAAc,EAACnD,kBAAD,EAAd,CAAZ;AAAA,yBAFV;AAGA,8BAAM;AAHN;AADJ,iBAxFJ;AAgGI;AAAA;AAAA,sBAAc,OAAO,aAAE,UAAF,CAArB;AACI;AACI,kCAAU,8BAAc;AACpB,mCAAKmD,QAAL,CAAc,EAAClD,sBAAD,EAAd;AACH,yBAHL;AAII,kCAAU,KAAKgB,KAAL,CAAWE,QAJzB;AAKI,sCAAc,KAAKb,KAAL,CAAWL;AAL7B;AADJ,iBAhGJ;AA0GI;AAAA;AAAA,sBAAc,OAAO,aAAE,OAAF,CAArB;AACI;AACI,iCAAS,CACL,EAACmD,OAAO,IAAR,EAAcC,OAAO,MAArB,EADK,EAEL,EAACD,OAAO,KAAR,EAAeC,OAAO,MAAtB,EAFK,CADb;AAKI,sCAAc,KAAK/C,KAAL,CAAWJ,SAL7B;AAMI,wCAAgB,mCAAa;AACzB,mCAAKiD,QAAL,CAAc,EAACjD,oBAAD,EAAd;AAA4B;AAPpC;AADJ,iBA1GJ;AAwHQ,qBAAKI,KAAL,CAAWJ,SAAX,GACA;AAAA;AAAA,sBAAc,OAAO,aAAE,aAAF,CAArB;AACI;AACI,uCAAe,mCAAc;AACzB,mCAAKiD,QAAL,CAAc,EAAChD,sBAAD,EAAd;AACH,yBAHL;AAII,kCAAU,KAAKc,KAAL,CAAWE,QAJzB;AAKI,uCAAe,KAAKb,KAAL,CAAWyC;AAL9B;AADJ,iBADA,GAUE,IAlIV;AAsIQ,qBAAKzC,KAAL,CAAWJ,SAAX,GACA;AAAA;AAAA;AACI,+BAAO,aAAE,YAAF,CADX;AAEI,+BAAO;AAFX;AAII;AACI,+BAAO,KAAKI,KAAL,CAAWF,UADtB;AAEI,kCAAU;AAAA,mCAAc,OAAK+C,QAAL,CAAc,EAAC/C,sBAAD,EAAd,CAAd;AAAA,yBAFd;AAGI,8BAAM;AAHV;AAJJ,iBADA,GAWE;AAjJV,aADA;AAqJH;;;iCAEQ;AAAA;;AACL,mBACI;AAAA;AAAA;AAEI;AAAA;AAAA,sBAAK,WAAU,qCAAf;AACK,iCAAE,2DAAF;AADL,iBAFJ;AAMI;AAAA;AAAA;AACI;AAAA;AAAA;AACI,gCAAG,+BADP;AAEI,oCAAQ,KAAKE,KAAL,CAAWC,YAFvB;AAGI,sCAAU;AAAA,uCAAM,OAAK4C,QAAL,CAAc;AAC1B5C,kDAAc,CAAC,OAAKD,KAAL,CAAWC;AADA,iCAAd,CAAN;AAAA,6BAHd;AAMI,mCAAO;AANX;AAQK,6BAAKG,cAAL;AARL,qBADJ;AAYI;AAAA;AAAA,0BAAK,WAAU,+CAAf;AACI;AAAA;AAAA;AACI,2CAAU,sBADd;AAEI,yCAAS,KAAKO,KAAL,CAAWsC;AAFxB;AAIK,yCAAE,MAAF;AAJL;AADJ;AAZJ;AANJ,aADJ;AAgCH;;;;;;kBAtUgBlD,yB;;;AAyUrBA,0BAA0BmD,SAA1B,GAAsC;AAClCrC,cAAU,oBAAUsC,IAAV,CAAeC,UADS;AAElCxC,uBAAmB,oBAAUyC,MAAV,CAAiBD,UAFF;AAGlCH,aAAS,oBAAUE,IAAV,CAAeC;AAHU,CAAtC","file":"AutomaticAnnotation.js","sourcesContent":["import AccordionMenuItem from './AccordionMenuItem';\nimport AnnotationEditor from './annotation_editor/AnnotationEditor';\nimport ColorPicker from './ColorPicker';\nimport FontSelector from './FontSelector';\nimport NumericInputStatefulWrapper from './NumericInputStatefulWrapper';\nimport RadioBlocks from './RadioBlocks';\nimport React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport ToolMenuItem from './ToolMenuItem';\nimport {_} from '@common/utils/i18n';\nimport {contains, has, empty, merge} from 'ramda';\nimport {relayout} from '@workspace/actions/workspace';\nimport {showNotification} from '@common/actions/notification';\n\n\nexport const DEFAULT_ANNOTATION_VALUES = {\n    ax: 0,\n    ay: -20,\n    annotationTemplate: '{x}, {y}',\n\n    align: 'left',\n    fontcolor: 'rgb(60, 60, 60)',\n    fontsize: 12,\n    fontfamily: '\"Open Sans\", verdana, arial, sans-serif',\n\n    showarrow: true,\n    arrowcolor: 'rgb(60, 60, 60)',\n    arrowwidth: 1\n};\n\nexport default class AutomaticAnnotationWidget extends Component {\n    constructor() {\n        super();\n        this.state = merge(\n            DEFAULT_ANNOTATION_VALUES,\n            {showControls: false}\n        );\n        this.plotlyClickHandler = this.plotlyClickHandler.bind(this);\n        this.renderControls = this.renderControls.bind(this);\n    }\n\n    componentDidMount() {\n        const gd = document.querySelector('.js-plot-panel');\n        gd.on('plotly_click', this.plotlyClickHandler);\n    }\n\n    componentWillUnmount() {\n        const gd = document.querySelector('.js-plot-panel');\n        // TODO: removeListener seems to be the right API, but I've\n        // seen removeEventListener elsewhere in the code\n        gd.removeListener('plotly_click', this.plotlyClickHandler);\n    }\n\n    plotlyClickHandler(clickObject) {\n        const {annotationsLength, dispatch} = this.props;\n\n        const {\n            ax, ay,\n            annotationTemplate,\n            align,\n            fontcolor,\n            fontsize,\n            fontfamily,\n            showarrow,\n            arrowcolor,\n            arrowwidth\n        } = this.state;\n\n        const relayoutObject = {};\n\n        for (var i = 0; i < clickObject.points.length; i++) {\n            const point = clickObject.points[i];\n\n            /*\n            * Annotations can only be bound to x and y axes\n            * 'z', 'lat', 'lon', etc axes aren't supported.\n            * Validate the the point has an 'xaxis' and 'yaxis'\n            * and no 'z' axis.\n            */\n            if (!(has('xaxis', point) && has('yaxis', point))) {\n\n                showNotification(`\n                    Clicking on data points to add annotations isn't supported\n                    for this chart type. It is only supported for 2D plots.`);\n                    continue;\n            } else if (has('xaxis', point) &&\n                       has('yaxis', point) &&\n                       has('zaxis', point)) {\n\n                showNotification(`\n                    Adding annotations by clicking on points\n                    isn't supported for 3D charts yet.\n                    `);\n                    continue;\n\n            }\n\n            // fullData is confusingly named. this is really the full trace.\n            const trace = point.fullData;\n            const pointNumber = point.pointNumber;\n            const templateVariables = ['x', 'y', 'text', 'z'];\n            let text = annotationTemplate;\n            let annotationIndex = Number.isNaN(annotationsLength) ?\n                0 : annotationsLength;\n            for (let j = 0; j < templateVariables.length; j++) {\n                const t = templateVariables[j];\n\n                /*\n                * the point object contains data about the hover point\n                * that was clicked on. this might actually be different\n                * than the trace data itself. For example, in box plots,\n                * the point.x and point.y contains positional data of\n                * the 5 hover flags on the box plot\n                * (median, quartials, tails) not the underlying data.\n                *\n                * the 'text' data is found in the actual trace.\n                */\n\n                // 'x', 'y', 'z' data\n                if (has(t, point)) {\n                    text = text.replace(`{${t}}`, point[t]);\n                }\n\n                // 'text' data\n                else if (has(t, trace) &&\n                         Array.isArray(trace[t]) &&\n                         point.pointNumber < trace[t].length) {\n\n                    text = text.replace(`{${t}}`, trace[t][pointNumber]);\n\n                }\n\n            }\n\n            const annotation = {\n                text,\n                // position the annotation with an arrow (which may be transparent)\n                showarrow: DEFAULT_ANNOTATION_VALUES.showarrow,\n                x: point.x,\n                y: point.y,\n                xref: point.xaxis._id,\n                yref: point.yaxis._id,\n                ax,\n                ay,\n                arrowcolor: (\n                    showarrow ?\n                    arrowcolor :\n                    'rgba(0, 0, 0, 0)'\n                ),\n\n                align,\n                font: {\n                    color: fontcolor,\n                    family: fontfamily,\n                    size: fontsize\n                },\n                arrowwidth,\n                arrowhead: 0\n            };\n\n            relayoutObject[`annotations[${annotationIndex}]`] = annotation;\n            annotationIndex += 1;\n\n        }\n\n        if (empty(relayoutObject)) {\n            dispatch(relayout(relayoutObject));\n        }\n\n    }\n\n    renderControls() {\n        return (\n        <div>\n            <div className=\"automatic-annotation-widget__container\">\n                <div>{_('Text Template')}</div>\n                <AnnotationEditor\n                    onChange={value => this.setState({annotationTemplate: value})}\n                    placeholder={'y = {y}'}\n                    value={this.state.annotationTemplate}\n                />\n\n                <div className=\"automatic-annotation-widget__description\">\n                    {_('Note')}: <code>{' {y} '}</code>\n                    {_('and')}\n                    <code>{' {x} '}</code>\n                    {_(`are special tokens that will get\n                        filled in with the x and y values\n                        of the data point that you click on.\n                        {text} and {z} are also supported if\n                        your data points contains those attributes.\n                        Stuck? `)}\n                    <a href=\"http://help.plot.ly/how-to-add-annotations/#step-6-add-an-automatically-positioned-label\"\n                       target=\"_blank\"\n                    >\n                        {_('Check out our tutorial')}\n                    </a>.\n                </div>\n            </div>\n\n            {\n                contains('<br>', this.state.annotationTemplate) ?\n\n                <ToolMenuItem className={'js-alignment'} title={_('Alignment')}>\n\n                    <RadioBlocks\n                        options={[\n                            {label: '', value: 'left', icon: 'icon-align-left'},\n                            {label: '', value: 'center', icon: 'icon-align-center'},\n                            {label: '', value: 'right', icon: 'icon-align-right'}\n                        ]}\n                        activeOption={this.state.align}\n                        onOptionChange={align => {\n                            this.setState({align});}\n                        }\n                    />\n\n                </ToolMenuItem>\n\n                : null\n            }\n\n            <ToolMenuItem\n                className={'js-ay'}\n                title={_('Vertical Position Relative to Data Point')}\n                units={'px'}\n            >\n                <NumericInputStatefulWrapper\n                    value={this.state.ay}\n                    onUpdate={ay => this.setState({ay})}\n                    step={10}\n                />\n            </ToolMenuItem>\n\n            <ToolMenuItem\n                className={'js-ax'}\n                title={_('Horizontal Position Relative to Data Point')}\n                units={'px'}\n            >\n                <NumericInputStatefulWrapper\n                    value={this.state.ax}\n                    onUpdate={ax => this.setState({ax})}\n                    step={10}\n                />\n            </ToolMenuItem>\n\n            {/* Standard Properties */}\n\n            <ToolMenuItem\n                className={'js-fontcolor'}\n                title={_('Text Color')}\n            >\n                <ColorPicker\n                    onColorChange={fontcolor => {\n                        this.setState({fontcolor});\n                    }}\n                    dispatch={this.props.dispatch}\n                    selectedColor={this.state.fontcolor}\n                />\n            </ToolMenuItem>\n\n            <ToolMenuItem title={_('Size')}>\n                <NumericInputStatefulWrapper\n                value={this.state.fontsize}\n                onUpdate={fontsize => this.setState({fontsize})}\n                step={10}\n                />\n            </ToolMenuItem>\n\n            <ToolMenuItem title={_('Typeface')}>\n                <FontSelector\n                    onChange={fontfamily => {\n                        this.setState({fontfamily});\n                    }}\n                    dispatch={this.props.dispatch}\n                    activeOption={this.state.fontfamily}\n                />\n            </ToolMenuItem>\n\n            <ToolMenuItem title={_('Arrow')}>\n                <RadioBlocks\n                    options={[\n                        {value: true, label: 'Show'},\n                        {value: false, label: 'Hide'}\n                    ]}\n                    activeOption={this.state.showarrow}\n                    onOptionChange={showarrow => {\n                        this.setState({showarrow});}\n                    }\n                />\n            </ToolMenuItem>\n\n            {\n                this.state.showarrow ?\n                <ToolMenuItem title={_('Arrow Color')}>\n                    <ColorPicker\n                        onColorChange={arrowcolor => {\n                            this.setState({arrowcolor});\n                        }}\n                        dispatch={this.props.dispatch}\n                        selectedColor={this.state.color}\n                    />\n                </ToolMenuItem>\n                : null\n            }\n\n            {\n                this.state.showarrow ?\n                <ToolMenuItem\n                    title={_('Line Width')}\n                    units={'px'}\n                >\n                    <NumericInputStatefulWrapper\n                        value={this.state.arrowwidth}\n                        onUpdate={arrowwidth => this.setState({arrowwidth})}\n                        step={1}\n                    />\n                </ToolMenuItem>\n                : null\n            }\n        </div>);\n    }\n\n    render() {\n        return (\n            <div>\n\n                <div className=\"automatic-annotation-widget__header\">\n                    {_('Add annotations by clicking on data points in the graph. ')}\n                </div>\n\n                <div>\n                    <AccordionMenuItem\n                        id=\"automatic-annotation-controls\"\n                        isOpen={this.state.showControls}\n                        onToggle={() => this.setState({\n                            showControls: !this.state.showControls\n                        })}\n                        title={'Annotation Template'}\n                    >\n                        {this.renderControls()}\n                    </AccordionMenuItem>\n\n                    <div className=\"automatic-annotation-widget__button_container\">\n                        <div\n                            className=\"btnbase btn--default\"\n                            onClick={this.props.onClose}\n                        >\n                            {_('Done')}\n                        </div>\n                    </div>\n\n                </div>\n\n            </div>\n        );\n    }\n}\n\nAutomaticAnnotationWidget.propTypes = {\n    dispatch: PropTypes.func.isRequired,\n    annotationsLength: PropTypes.number.isRequired,\n    onClose: PropTypes.func.isRequired\n};\n"]}