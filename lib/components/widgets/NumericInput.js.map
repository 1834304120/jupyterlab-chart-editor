{"version":3,"sources":["../../../src/components/widgets/NumericInput.js"],"names":["UP_ARROW","DOWN_ARROW","TEST_SELECTOR_CLASS","NumericInput","props","onKeyDown","bind","incrementValue","e","keyCode","direction","step","currentValue","value","onUpdate","onChange","showArrows","wrapperClassName","editableClass","editableClassName","String","renderArrows","defaultProps","showError"],"mappings":";;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;;;;;AAEO,IAAMA,8BAAW,EAAjB;AACA,IAAMC,kCAAa,EAAnB;AACA,IAAMC,oDAAsB,iBAA5B;;IAEcC,Y;;;AACnB,wBAAYC,KAAZ,EAAmB;AAAA;;AAAA,4HACXA,KADW;;AAGjB,UAAKC,SAAL,GAAiB,MAAKA,SAAL,CAAeC,IAAf,OAAjB;AACA,UAAKC,cAAL,GAAsB,MAAKA,cAAL,CAAoBD,IAApB,OAAtB;AAJiB;AAKlB;;;;8BAESE,C,EAAG;AACX,cAAQA,EAAEC,OAAV;AACE,aAAKT,QAAL;AACE,iBAAO,KAAKO,cAAL,CAAoB,UAApB,CAAP;AACF,aAAKN,UAAL;AACE,iBAAO,KAAKM,cAAL,CAAoB,UAApB,CAAP;AACF;AACE;AANJ;AAQD;;;mCAEcG,S,EAAW;AACxB,UAAMC,OAAO,KAAKP,KAAL,CAAWO,IAAX,IAAmB,CAAhC;AACA,UAAIC,eAAe,KAAKR,KAAL,CAAWS,KAA9B;;AAEA,UAAI,6BAAU,KAAKT,KAAL,CAAWS,KAArB,CAAJ,EAAiC;AAC/B,YAAIH,cAAc,UAAlB,EAA8B;AAC5BE,yBAAeA,eAAeD,IAA9B;AACD,SAFD,MAEO;AACLC,yBAAeA,eAAeD,IAA9B;AACD;AACF;;AAED;AACA,UAAI,KAAKP,KAAL,CAAWU,QAAf,EAAyB;AACvB,aAAKV,KAAL,CAAWU,QAAX,CAAoBF,YAApB;AACD,OAFD,MAEO;AACL,aAAKR,KAAL,CAAWW,QAAX,CAAoBH,YAApB;AACD;AACF;;;mCAEc;AACb,UAAI,CAAC,KAAKR,KAAL,CAAWY,UAAhB,EAA4B;AAC1B;AACD;;AAED,aACE;AAAA;AAAA,UAAK,WAAU,0BAAf;AACE;AAAA;AAAA;AACE,uBAAU,0CADZ;AAEE,qBAAS,KAAKT,cAAL,CAAoBD,IAApB,CAAyB,IAAzB,EAA+B,UAA/B;AAFX;AAIE,+CAAG,WAAU,0CAAb;AAJF,SADF;AAOE;AAAA;AAAA;AACE,uBAAU,0CADZ;AAEE,qBAAS,KAAKC,cAAL,CAAoBD,IAApB,CAAyB,IAAzB,EAA+B,UAA/B;AAFX;AAIE,+CAAG,WAAU,+CAAb;AAJF;AAPF,OADF;AAgBD;;;6BAEQ;AACP,UAAMW,mBAAmB,0BAAW,wBAAX,CAAzB;;AAEA,UAAMC,gBAAgB,0BACpB,uBADoB,EAEpB,KAAKd,KAAL,CAAWe,iBAFS,EAGpBjB,mBAHoB,CAAtB;;AAMA,aACE;AAAA;AAAA,UAAK,WAAWe,gBAAhB;AACE;AACE,qBAAWC,aADb;AAEE,gBAAME,OAAO,KAAKhB,KAAL,CAAWS,KAAlB,CAFR;AAGE,gBAAK,MAHP;AAIE,oBAAU,KAAKT,KAAL,CAAWW,QAJvB;AAKE,oBAAU,KAAKX,KAAL,CAAWU,QALvB;AAME,qBAAW,KAAKT;AANlB,UADF;AASG,aAAKgB,YAAL;AATH,OADF;AAaD;;;;;;AAGH;;;;;;;;;;;;;kBAvFqBlB,Y;AAoGrBA,aAAamB,YAAb,GAA4B;AAC1BC,aAAW,KADe;AAE1BP,cAAY;AAFc,CAA5B","file":"NumericInput.js","sourcesContent":["import EditableText from \"./EditableText\";\nimport React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport isNumeric from \"fast-isnumeric\";\nimport classnames from \"classnames\";\n\nexport const UP_ARROW = 38;\nexport const DOWN_ARROW = 40;\nexport const TEST_SELECTOR_CLASS = \"js-NumericInput\";\n\nexport default class NumericInput extends Component {\n  constructor(props) {\n    super(props);\n\n    this.onKeyDown = this.onKeyDown.bind(this);\n    this.incrementValue = this.incrementValue.bind(this);\n  }\n\n  onKeyDown(e) {\n    switch (e.keyCode) {\n      case UP_ARROW:\n        return this.incrementValue(\"increase\");\n      case DOWN_ARROW:\n        return this.incrementValue(\"decrease\");\n      default:\n        break;\n    }\n  }\n\n  incrementValue(direction) {\n    const step = this.props.step || 1;\n    let currentValue = this.props.value;\n\n    if (isNumeric(this.props.value)) {\n      if (direction === \"increase\") {\n        currentValue = currentValue + step;\n      } else {\n        currentValue = currentValue - step;\n      }\n    }\n\n    // incrementers blur the line between blur and onChange.\n    if (this.props.onUpdate) {\n      this.props.onUpdate(currentValue);\n    } else {\n      this.props.onChange(currentValue);\n    }\n  }\n\n  renderArrows() {\n    if (!this.props.showArrows) {\n      return;\n    }\n\n    return (\n      <div className=\"numeric-input__caret-box\">\n        <div\n          className=\"numeric-input__caret js-numeric-increase\"\n          onClick={this.incrementValue.bind(this, \"increase\")}\n        >\n          <i className=\"icon-caret-up numeric-top-caret-modifier\" />\n        </div>\n        <div\n          className=\"numeric-input__caret js-numeric-decrease\"\n          onClick={this.incrementValue.bind(this, \"decrease\")}\n        >\n          <i className=\"icon-caret-down numeric-bottom-caret-modifier\" />\n        </div>\n      </div>\n    );\n  }\n\n  render() {\n    const wrapperClassName = classnames(\"numeric-input__wrapper\");\n\n    const editableClass = classnames(\n      \"numeric-input__number\",\n      this.props.editableClassName,\n      TEST_SELECTOR_CLASS\n    );\n\n    return (\n      <div className={wrapperClassName}>\n        <EditableText\n          className={editableClass}\n          text={String(this.props.value)}\n          type=\"text\"\n          onChange={this.props.onChange}\n          onUpdate={this.props.onUpdate}\n          onKeyDown={this.onKeyDown}\n        />\n        {this.renderArrows()}\n      </div>\n    );\n  }\n}\n\n/*NumericInput.propTypes = {\n  value: customPropTypes.customOneOfType([\n    PropTypes.string,\n    customPropTypes.isNumeric,\n    customPropTypes.isNull,\n  ]).isDefined,\n  onChange: PropTypes.func.isRequired,\n  onUpdate: PropTypes.func,\n  step: PropTypes.number,\n  showArrows: PropTypes.bool,\n  editableClassName: PropTypes.string,\n};*/\n\nNumericInput.defaultProps = {\n  showError: false,\n  showArrows: true,\n};\n"]}