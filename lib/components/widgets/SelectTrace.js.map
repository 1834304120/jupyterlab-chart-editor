{"version":3,"sources":["../../../src/components/widgets/SelectTrace.js"],"names":["SelectTrace","nextProps","props","chartType","iconClass","Boolean","fancyTraceOptions","traceOptions","map","label","traceOption","value","type","disabled","getIconClassName","selectedTraceValue","traceSelectHandler","propTypes","func","isRequired","string"],"mappings":";;;;;;;;AASA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;+eAhBA;;;;;;;;;;;IAkBqBA,W;;;;;;;;;;;0CACGC,S,EAAW;AAC/B,aAAO,qDAAyB,KAAKC,KAA9B,EAAqCD,SAArC,CAAP;AACD;;;qCAEgBE,S,EAAW;AAAA;;AAC1B,UAAMC,YAAY,2BAAgBD,SAAhB,CAAlB;AACA,aAAO,0EACJC,SADI,EACQC,QAAQD,SAAR,CADR,gCAEL,kBAFK,EAEeC,QAAQD,SAAR,CAFf,gBAAP;AAID;;;6BAEQ;AAAA;;AACP,UAAME,oBAAoB,KAAKJ,KAAL,CAAWK,YAAX,CAAwBC,GAAxB,CAA4B,uBAAe;AAAA,YAC3DC,KAD2D,GAClBC,WADkB,CAC3DD,KAD2D;AAAA,YACpDE,KADoD,GAClBD,WADkB,CACpDC,KADoD;AAAA,YAC7CC,IAD6C,GAClBF,WADkB,CAC7CE,IAD6C;AAAA,oCAClBF,WADkB,CACvCG,QADuC;AAAA,YACvCA,QADuC,yCAC5B,KAD4B;;AAEnE,YAAMT,YAAY,OAAKU,gBAAL,CAAsBF,IAAtB,CAAlB;;AAEA,eAAO;AACLD,sBADK;AAELE,4BAFK;AAGLJ,iBACE;AAAA;AAAA;AACE,iDAAG,WAAWL,SAAd,GADF;AAEGK;AAFH;AAJG,SAAP;AAUD,OAdyB,CAA1B;;AAgBA,aACE;AACE,qBAAa,aAAE,YAAF,CADf;AAEE,eAAO,KAAKP,KAAL,CAAWa,kBAFpB;AAGE,iBAAST,iBAHX;AAIE,oBAAY,IAJd;AAKE,kBAAU,KAAKJ,KAAL,CAAWc,kBALvB;AAME,mBAAW;AANb,QADF;AAUD;;;;;;kBAxCkBhB,W;;;AA2CrBA,YAAYiB,SAAZ,GAAwB;AACtBD,sBAAoB,oBAAUE,IAAV,CAAeC,UADb;AAEtBJ,sBAAoB,oBAAUK,MAAV,CAAiBD,UAFf;AAGtBZ,gBAAc,yCAAwBY;AAHhB,CAAxB","file":"SelectTrace.js","sourcesContent":["/*\n * This component provides a dropdown for selecting traces. Traces will\n * automatically be paired with a fancy icon label. This component is used\n * for selecting among all possible traces types where the value is also the\n * chart type but also used for selecting among data traces where the label\n * will be an UID or index. Therefore traceOptions are a superset of what\n * is passed to the Dropdown as they contain trace \"type\" key so the fancy\n * label can be constructed.\n */\nimport Dropdown from \"./Dropdown\";\nimport React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport classnames from \"classnames\";\nimport { CHART_TYPE_ICON } from \"@workspace/constants/workspace\";\nimport { _ } from \"@common/utils/i18n\";\nimport { traceSelectOptionsShape } from \"@workspace/utils/customPropTypes\";\nimport { propsNotEqualNoFuncCheck } from \"@workspace/utils/shouldComponentUpdate\";\n\nexport default class SelectTrace extends Component {\n  shouldComponentUpdate(nextProps) {\n    return propsNotEqualNoFuncCheck(this.props, nextProps);\n  }\n\n  getIconClassName(chartType) {\n    const iconClass = CHART_TYPE_ICON[chartType];\n    return classnames({\n      [iconClass]: Boolean(iconClass),\n      \"+soft-half-right\": Boolean(iconClass),\n    });\n  }\n\n  render() {\n    const fancyTraceOptions = this.props.traceOptions.map(traceOption => {\n      const { label, value, type, disabled = false } = traceOption;\n      const iconClass = this.getIconClassName(type);\n\n      return {\n        value,\n        disabled,\n        label: (\n          <span>\n            <i className={iconClass} />\n            {label}\n          </span>\n        ),\n      };\n    });\n\n    return (\n      <Dropdown\n        placeholder={_(\"chart type\")}\n        value={this.props.selectedTraceValue}\n        options={fancyTraceOptions}\n        searchable={true}\n        onChange={this.props.traceSelectHandler}\n        clearable={false}\n      />\n    );\n  }\n}\n\nSelectTrace.propTypes = {\n  traceSelectHandler: PropTypes.func.isRequired,\n  selectedTraceValue: PropTypes.string.isRequired,\n  traceOptions: traceSelectOptionsShape.isRequired,\n};\n"]}