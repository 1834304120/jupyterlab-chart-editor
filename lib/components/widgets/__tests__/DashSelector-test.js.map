{"version":3,"sources":["../../../../src/components/widgets/__tests__/DashSelector-test.js"],"names":["jest","dontMock","describe","DashSelector","React","ReactDOM","TestUtils","beforeEach","require","render","props","activeOption","lineColor","onChange","genMockFn","renderIntoDocument","it","component","dropdown","refs","firstOption","options","value","expect","toBeDefined","not","toBeCalled","toBeCalledWith","state","toEqual","componentWillReceiveProps"],"mappings":";;AAEA;;;;;;AAFAA,KAAKC,QAAL,CAAc,iBAAd;;AAIAC,SAAS,cAAT,EAAyB,YAAM;AAC7B,MAAIC,qBAAJ;AACA,MAAIC,cAAJ;AACA,MAAIC,iBAAJ;AACA,MAAIC,kBAAJ;;AAEAC,aAAW,YAAM;AACfJ,mBAAeK,QAAQ,iBAAR,CAAf;AACAJ,YAAQI,QAAQ,OAAR,CAAR;AACAH,eAAWG,QAAQ,WAAR,CAAX;AACAF,gBAAYE,QAAQ,sBAAR,CAAZ;AACD,GALD;;AAOA,WAASC,MAAT,GAME;AAAA,QALAC,KAKA,uEALQ;AACNC,oBAAc,MADR;AAENC,iBAAW,mBAFL;AAGNC,gBAAUb,KAAKc,SAAL;AAHJ,KAKR;;AACA,WAAOR,UAAUS,kBAAV,CAA6B,oBAAC,YAAD,EAAkBL,KAAlB,CAA7B,CAAP;AACD;;AAEDM,KAAG,mCAAH,EAAwC,YAAM;AAC5C,QAAMH,WAAWb,KAAKc,SAAL,EAAjB;AACA,QAAMG,YAAYR,QAAlB;AACA,QAAMS,WAAWD,UAAUE,IAAV,CAAeD,QAAhC;AACA,QAAME,cAAcH,UAAUE,IAAV,CAAeD,QAAf,CAAwBR,KAAxB,CAA8BW,OAA9B,CAAsC,CAAtC,EAAyCC,KAA7D;;AAEAC,WAAON,SAAP,EAAkBO,WAAlB;AACAD,WAAON,UAAUP,KAAV,CAAgBG,QAAvB,EAAiCY,GAAjC,CAAqCC,UAArC;AACAR,aAASR,KAAT,CAAeG,QAAf,CAAwBO,WAAxB;AACAG,WAAON,UAAUP,KAAV,CAAgBG,QAAvB,EAAiCc,cAAjC,CAAgD,OAAhD;AACD,GAVD;;AAYAX,KAAG,oDAAH,EAAyD,YAAM;AAC7D,QAAMH,WAAWb,KAAKc,SAAL,EAAjB;AACA,QAAMG,YAAYR,QAAlB;;AAEAc,WAAON,UAAUW,KAAV,CAAgBjB,YAAvB,EAAqCkB,OAArC,CAA6C,MAA7C;AACAN,WAAON,UAAUW,KAAV,CAAgBhB,SAAvB,EAAkCiB,OAAlC,CAA0C,mBAA1C;AACAZ,cAAUa,yBAAV,CAAoC;AAClCnB,oBAAc,UADoB;AAElCC,iBAAW;AAFuB,KAApC;AAIAW,WAAON,UAAUW,KAAV,CAAgBjB,YAAvB,EAAqCkB,OAArC,CAA6C,UAA7C;AACAN,WAAON,UAAUW,KAAV,CAAgBhB,SAAvB,EAAkCiB,OAAlC,CAA0C,oBAA1C;AACD,GAZD;AAaD,CAhDD","file":"DashSelector-test.js","sourcesContent":["jest.dontMock(\"../DashSelector\");\n\nimport deepAssign from \"assign-deep\";\n\ndescribe(\"DashSelector\", () => {\n  let DashSelector;\n  let React;\n  let ReactDOM;\n  let TestUtils;\n\n  beforeEach(() => {\n    DashSelector = require(\"../DashSelector\");\n    React = require(\"react\");\n    ReactDOM = require(\"react-dom\");\n    TestUtils = require(\"react-dom/test-utils\");\n  });\n\n  function render(\n    props = {\n      activeOption: \"dash\",\n      lineColor: \"rgb(31, 119, 180)\",\n      onChange: jest.genMockFn(),\n    }\n  ) {\n    return TestUtils.renderIntoDocument(<DashSelector {...props} />);\n  }\n\n  it(\"passes on the new value on change\", () => {\n    const onChange = jest.genMockFn();\n    const component = render();\n    const dropdown = component.refs.dropdown;\n    const firstOption = component.refs.dropdown.props.options[0].value;\n\n    expect(component).toBeDefined();\n    expect(component.props.onChange).not.toBeCalled();\n    dropdown.props.onChange(firstOption);\n    expect(component.props.onChange).toBeCalledWith(\"solid\");\n  });\n\n  it(\"should update local state on new props from parent\", () => {\n    const onChange = jest.genMockFn();\n    const component = render();\n\n    expect(component.state.activeOption).toEqual(\"dash\");\n    expect(component.state.lineColor).toEqual(\"rgb(31, 119, 180)\");\n    component.componentWillReceiveProps({\n      activeOption: \"longdash\",\n      lineColor: \"rgb(255, 119, 180)\",\n    });\n    expect(component.state.activeOption).toEqual(\"longdash\");\n    expect(component.state.lineColor).toEqual(\"rgb(255, 119, 180)\");\n  });\n});\n"]}