{"version":3,"sources":["../../../../src/components/widgets/__tests__/CheckboxGroup-test.js"],"names":["jest","dontMock","describe","React","ReactDOM","TestUtils","CheckboxGroup","beforeEach","require","render","props","renderIntoDocument","it","options","label","value","checked","onChange","genMockFn","component","expect","toBeDefined","applesCheckbox","refs","apples","not","toBeCalled","Simulate","click","toBeCalledWith","state","toEqual","newOptionsFromParent","componentWillReceiveProps"],"mappings":";;AAAAA,KAAKC,QAAL,CAAc,kBAAd;;AAEAC,SAAS,eAAT,EAA0B,YAAM;AAC9B,MAAIC,cAAJ;AACA,MAAIC,iBAAJ;AACA,MAAIC,kBAAJ;AACA,MAAIC,sBAAJ;;AAEAC,aAAW,YAAM;AACfJ,YAAQK,QAAQ,OAAR,CAAR;AACAJ,eAAWI,QAAQ,WAAR,CAAX;AACAH,gBAAYG,QAAQ,sBAAR,CAAZ;AACAF,oBAAgBE,QAAQ,kBAAR,CAAhB;AACD,GALD;;AAOA,WAASC,MAAT,GAA4B;AAAA,QAAZC,KAAY,uEAAJ,EAAI;;AAC1B,WAAOL,UAAUM,kBAAV,CAA6B,oBAAC,aAAD,EAAmBD,KAAnB,CAA7B,CAAP;AACD;;AAEDE,KAAG,wDAAH,EAA6D,YAAM;AACjE;AACA,QAAMC,UAAU,CACd;AACEC,aAAO,QADT;AAEEC,aAAO,QAFT;AAGEC,eAAS;AAHX,KADc,EAMd;AACEF,aAAO,SADT;AAEEC,aAAO,SAFT;AAGEC,eAAS;AAHX,KANc,EAWd;AACEF,aAAO,WADT;AAEEC,aAAO,WAFT;AAGEC,eAAS;AAHX,KAXc,CAAhB;;AAkBA,QAAMC,WAAWjB,KAAKkB,SAAL,EAAjB;AACA,QAAMC,YAAYV,OAAO;AACvBI,sBADuB;AAEvBI;AAFuB,KAAP,CAAlB;;AAKAG,WAAOD,SAAP,EAAkBE,WAAlB;;AAEA;AACA,QAAMC,iBAAiBH,UAAUI,IAAV,CAAeC,MAAtC;;AAEAJ,WAAOH,QAAP,EAAiBQ,GAAjB,CAAqBC,UAArB;;AAEArB,cAAUsB,QAAV,CAAmBC,KAAnB,CAAyBN,cAAzB;;AAEA;AACAF,WAAOH,QAAP,EAAiBY,cAAjB,CAAgC,CAC9B;AACEf,aAAO,QADT;AAEEC,aAAO,QAFT;AAGEC,eAAS;AAHX,KAD8B,EAM9B;AACEF,aAAO,SADT;AAEEC,aAAO,SAFT;AAGEC,eAAS;AAHX,KAN8B,EAW9B;AACEF,aAAO,WADT;AAEEC,aAAO,WAFT;AAGEC,eAAS;AAHX,KAX8B,CAAhC;AAiBD,GArDD;;AAuDAJ,KAAG,oDAAH,EAAyD,YAAM;AAC7D;AACA,QAAMC,UAAU,CACd;AACEC,aAAO,QADT;AAEEC,aAAO,QAFT;AAGEC,eAAS;AAHX,KADc,EAMd;AACEF,aAAO,SADT;AAEEC,aAAO,SAFT;AAGEC,eAAS;AAHX,KANc,EAWd;AACEF,aAAO,WADT;AAEEC,aAAO,WAFT;AAGEC,eAAS;AAHX,KAXc,CAAhB;;AAkBA,QAAMC,WAAWjB,KAAKkB,SAAL,EAAjB;AACA,QAAMC,YAAYV,OAAO;AACvBI,sBADuB;AAEvBI;AAFuB,KAAP,CAAlB;;AAKA;AACAG,WAAOD,UAAUW,KAAV,CAAgBjB,OAAvB,EAAgCkB,OAAhC,CAAwClB,OAAxC;;AAEA,QAAMmB,uBAAuB,CAC3B;AACElB,aAAO,QADT;AAEEC,aAAO,QAFT;AAGEC,eAAS;AAHX,KAD2B,EAM3B;AACEF,aAAO,SADT;AAEEC,aAAO,SAFT;AAGEC,eAAS;AAHX,KAN2B,EAW3B;AACEF,aAAO,WADT;AAEEC,aAAO,WAFT;AAGEC,eAAS;AAHX,KAX2B,CAA7B;;AAkBA;AACAG,cAAUc,yBAAV,CAAoC;AAClCpB,eAASmB;AADyB,KAApC;;AAIA;AACAZ,WAAOD,UAAUW,KAAV,CAAgBjB,OAAvB,EAAgCkB,OAAhC,CAAwCC,oBAAxC;AACD,GAtDD;AAuDD,CA/HD","file":"CheckboxGroup-test.js","sourcesContent":["jest.dontMock(\"../CheckboxGroup\");\n\ndescribe(\"CheckboxGroup\", () => {\n  let React;\n  let ReactDOM;\n  let TestUtils;\n  let CheckboxGroup;\n\n  beforeEach(() => {\n    React = require(\"react\");\n    ReactDOM = require(\"react-dom\");\n    TestUtils = require(\"react-dom/test-utils\");\n    CheckboxGroup = require(\"../CheckboxGroup\");\n  });\n\n  function render(props = {}) {\n    return TestUtils.renderIntoDocument(<CheckboxGroup {...props} />);\n  }\n\n  it(\"should fire onChange with correct new options on click\", () => {\n    // Set up initial options passed down as props\n    const options = [\n      {\n        label: \"Apples\",\n        value: \"apples\",\n        checked: false,\n      },\n      {\n        label: \"Oranges\",\n        value: \"oranges\",\n        checked: false,\n      },\n      {\n        label: \"Banaynays\",\n        value: \"banaynays\",\n        checked: false,\n      },\n    ];\n\n    const onChange = jest.genMockFn();\n    const component = render({\n      options,\n      onChange,\n    });\n\n    expect(component).toBeDefined();\n\n    // Click on the apples checkbox\n    const applesCheckbox = component.refs.apples;\n\n    expect(onChange).not.toBeCalled();\n\n    TestUtils.Simulate.click(applesCheckbox);\n\n    // onChange handler should be called with new options\n    expect(onChange).toBeCalledWith([\n      {\n        label: \"Apples\",\n        value: \"apples\",\n        checked: true,\n      },\n      {\n        label: \"Oranges\",\n        value: \"oranges\",\n        checked: false,\n      },\n      {\n        label: \"Banaynays\",\n        value: \"banaynays\",\n        checked: false,\n      },\n    ]);\n  });\n\n  it(\"should update local state on new props from parent\", () => {\n    // Set up initial options passed down as props\n    const options = [\n      {\n        label: \"Apples\",\n        value: \"apples\",\n        checked: false,\n      },\n      {\n        label: \"Oranges\",\n        value: \"oranges\",\n        checked: false,\n      },\n      {\n        label: \"Banaynays\",\n        value: \"banaynays\",\n        checked: false,\n      },\n    ];\n\n    const onChange = jest.genMockFn();\n    const component = render({\n      options,\n      onChange,\n    });\n\n    // Local component state and props should be the same\n    expect(component.state.options).toEqual(options);\n\n    const newOptionsFromParent = [\n      {\n        label: \"Apples\",\n        value: \"apples\",\n        checked: true,\n      },\n      {\n        label: \"Oranges\",\n        value: \"oranges\",\n        checked: true,\n      },\n      {\n        label: \"Banaynays\",\n        value: \"banaynays\",\n        checked: true,\n      },\n    ];\n\n    // Simulate parent passing down some new props\n    component.componentWillReceiveProps({\n      options: newOptionsFromParent,\n    });\n\n    // Local component state shoudl be synced\n    expect(component.state.options).toEqual(newOptionsFromParent);\n  });\n});\n"]}