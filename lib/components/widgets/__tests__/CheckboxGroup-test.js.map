{"version":3,"sources":["../../../../src/components/widgets/__tests__/CheckboxGroup-test.js"],"names":["jest","dontMock","describe","React","ReactDOM","TestUtils","CheckboxGroup","beforeEach","require","render","props","renderIntoDocument","it","options","label","value","checked","onChange","genMockFn","component","expect","toBeDefined","applesCheckbox","refs","apples","not","toBeCalled","Simulate","click","toBeCalledWith","state","toEqual","newOptionsFromParent","componentWillReceiveProps"],"mappings":";;AAAAA,KAAKC,QAAL,CAAc,kBAAd;;AAEAC,SAAS,eAAT,EAA0B,YAAM;;AAE5B,QAAIC,cAAJ;AACA,QAAIC,iBAAJ;AACA,QAAIC,kBAAJ;AACA,QAAIC,sBAAJ;;AAEAC,eAAW,YAAM;AACbJ,gBAAQK,QAAQ,OAAR,CAAR;AACAJ,mBAAWI,QAAQ,WAAR,CAAX;AACAH,oBAAYG,QAAQ,sBAAR,CAAZ;AACAF,wBAAgBE,QAAQ,kBAAR,CAAhB;AACH,KALD;;AAOA,aAASC,MAAT,GAA4B;AAAA,YAAZC,KAAY,uEAAJ,EAAI;;AACxB,eAAOL,UAAUM,kBAAV,CAA6B,oBAAC,aAAD,EAAmBD,KAAnB,CAA7B,CAAP;AACH;;AAEDE,OAAG,wDAAH,EAA6D,YAAM;;AAE/D;AACA,YAAMC,UAAU,CACZ;AACIC,mBAAO,QADX;AAEIC,mBAAO,QAFX;AAGIC,qBAAS;AAHb,SADY,EAMZ;AACIF,mBAAO,SADX;AAEIC,mBAAO,SAFX;AAGIC,qBAAS;AAHb,SANY,EAWZ;AACIF,mBAAO,WADX;AAEIC,mBAAO,WAFX;AAGIC,qBAAS;AAHb,SAXY,CAAhB;;AAkBA,YAAMC,WAAWjB,KAAKkB,SAAL,EAAjB;AACA,YAAMC,YAAYV,OAAO;AACrBI,4BADqB;AAErBI;AAFqB,SAAP,CAAlB;;AAKAG,eAAOD,SAAP,EAAkBE,WAAlB;;AAEA;AACA,YAAMC,iBAAiBH,UAAUI,IAAV,CAAeC,MAAtC;;AAEAJ,eAAOH,QAAP,EAAiBQ,GAAjB,CAAqBC,UAArB;;AAEArB,kBAAUsB,QAAV,CAAmBC,KAAnB,CAAyBN,cAAzB;;AAEA;AACAF,eAAOH,QAAP,EAAiBY,cAAjB,CAAgC,CAC5B;AACIf,mBAAO,QADX;AAEIC,mBAAO,QAFX;AAGIC,qBAAS;AAHb,SAD4B,EAM5B;AACIF,mBAAO,SADX;AAEIC,mBAAO,SAFX;AAGIC,qBAAS;AAHb,SAN4B,EAW5B;AACIF,mBAAO,WADX;AAEIC,mBAAO,WAFX;AAGIC,qBAAS;AAHb,SAX4B,CAAhC;AAiBH,KAtDD;;AAwDAJ,OAAG,oDAAH,EAAyD,YAAM;;AAE3D;AACA,YAAMC,UAAU,CACZ;AACIC,mBAAO,QADX;AAEIC,mBAAO,QAFX;AAGIC,qBAAS;AAHb,SADY,EAMZ;AACIF,mBAAO,SADX;AAEIC,mBAAO,SAFX;AAGIC,qBAAS;AAHb,SANY,EAWZ;AACIF,mBAAO,WADX;AAEIC,mBAAO,WAFX;AAGIC,qBAAS;AAHb,SAXY,CAAhB;;AAkBA,YAAMC,WAAWjB,KAAKkB,SAAL,EAAjB;AACA,YAAMC,YAAYV,OAAO;AACrBI,4BADqB;AAErBI;AAFqB,SAAP,CAAlB;;AAKA;AACAG,eAAOD,UAAUW,KAAV,CAAgBjB,OAAvB,EAAgCkB,OAAhC,CAAwClB,OAAxC;;AAEA,YAAMmB,uBAAuB,CACzB;AACIlB,mBAAO,QADX;AAEIC,mBAAO,QAFX;AAGIC,qBAAS;AAHb,SADyB,EAMzB;AACIF,mBAAO,SADX;AAEIC,mBAAO,SAFX;AAGIC,qBAAS;AAHb,SANyB,EAWzB;AACIF,mBAAO,WADX;AAEIC,mBAAO,WAFX;AAGIC,qBAAS;AAHb,SAXyB,CAA7B;;AAkBA;AACAG,kBAAUc,yBAAV,CAAoC;AAChCpB,qBAASmB;AADuB,SAApC;;AAIA;AACAZ,eAAOD,UAAUW,KAAV,CAAgBjB,OAAvB,EAAgCkB,OAAhC,CAAwCC,oBAAxC;AAEH,KAxDD;AAyDH,CAnID","file":"CheckboxGroup-test.js","sourcesContent":["jest.dontMock('../CheckboxGroup');\n\ndescribe('CheckboxGroup', () => {\n\n    let React;\n    let ReactDOM;\n    let TestUtils;\n    let CheckboxGroup;\n\n    beforeEach(() => {\n        React = require('react');\n        ReactDOM = require('react-dom');\n        TestUtils = require('react-dom/test-utils');\n        CheckboxGroup = require('../CheckboxGroup');\n    });\n\n    function render(props = {}) {\n        return TestUtils.renderIntoDocument(<CheckboxGroup {...props} />);\n    }\n\n    it('should fire onChange with correct new options on click', () => {\n\n        // Set up initial options passed down as props\n        const options = [\n            {\n                label: 'Apples',\n                value: 'apples',\n                checked: false\n            },\n            {\n                label: 'Oranges',\n                value: 'oranges',\n                checked: false\n            },\n            {\n                label: 'Banaynays',\n                value: 'banaynays',\n                checked: false\n            }\n        ];\n\n        const onChange = jest.genMockFn();\n        const component = render({\n            options,\n            onChange\n        });\n\n        expect(component).toBeDefined();\n\n        // Click on the apples checkbox\n        const applesCheckbox = component.refs.apples;\n\n        expect(onChange).not.toBeCalled();\n\n        TestUtils.Simulate.click(applesCheckbox);\n\n        // onChange handler should be called with new options\n        expect(onChange).toBeCalledWith([\n            {\n                label: 'Apples',\n                value: 'apples',\n                checked: true\n            },\n            {\n                label: 'Oranges',\n                value: 'oranges',\n                checked: false\n            },\n            {\n                label: 'Banaynays',\n                value: 'banaynays',\n                checked: false\n            }\n        ]);\n    });\n\n    it('should update local state on new props from parent', () => {\n\n        // Set up initial options passed down as props\n        const options = [\n            {\n                label: 'Apples',\n                value: 'apples',\n                checked: false\n            },\n            {\n                label: 'Oranges',\n                value: 'oranges',\n                checked: false\n            },\n            {\n                label: 'Banaynays',\n                value: 'banaynays',\n                checked: false\n            }\n        ];\n\n        const onChange = jest.genMockFn();\n        const component = render({\n            options,\n            onChange\n        });\n\n        // Local component state and props should be the same\n        expect(component.state.options).toEqual(options);\n\n        const newOptionsFromParent = [\n            {\n                label: 'Apples',\n                value: 'apples',\n                checked: true\n            },\n            {\n                label: 'Oranges',\n                value: 'oranges',\n                checked: true\n            },\n            {\n                label: 'Banaynays',\n                value: 'banaynays',\n                checked: true\n            }\n        ];\n\n        // Simulate parent passing down some new props\n        component.componentWillReceiveProps({\n            options: newOptionsFromParent\n        });\n\n        // Local component state shoudl be synced\n        expect(component.state.options).toEqual(newOptionsFromParent);\n\n    });\n});\n"]}