{"version":3,"sources":["../../../../src/components/widgets/__tests__/ColorPaletteSelector-test.js"],"names":["describe","it","userDataIndices","component","basicColorscaleLength","length","colorpalette","find","enhancedColorPaletteLength","nodes","props","children","expect","toBe","additionalScales","finalScale","concat","fn","jest","first","simulate","toBeCalledWith","map","colorPair","colorscales","state","aRealNewColorscale","initialColorscalesLength","renderedColorscales","newColorscale","slice"],"mappings":"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","file":"ColorPaletteSelector-test.js","sourcesContent":["import React from \"react\";\nimport { shallow } from \"enzyme\";\n\nimport ColorPaletteSelector from \"@workspace/components/widgets/ColorPaletteSelector\";\nimport COLOR_SCALES from \"@workspace/constants/color\";\n\ndescribe(\"ColorPaletteSelector\", () => {\n  it(\"completes colorscale if grouped traces length > # of colorscale's color blocks\", () => {\n    const userDataIndices = [0, 1, 2, 3, 4, 5, 6, 7];\n\n    const component = shallow(\n      <ColorPaletteSelector\n        userDataIndex={userDataIndices}\n        isGrouped={true}\n        colorscale={COLOR_SCALES[0]}\n        isPie={false}\n      />\n    );\n\n    const basicColorscaleLength = COLOR_SCALES[0].length;\n    const colorpalette = component.find(\".js-color-palette\");\n    const enhancedColorPaletteLength =\n      colorpalette.nodes[0].props.children.length;\n\n    expect(userDataIndices.length === enhancedColorPaletteLength).toBe(true);\n    expect(basicColorscaleLength < enhancedColorPaletteLength).toBe(true);\n  });\n\n  it(\"completes colorscale for pie traces\", () => {\n    const additionalScales = [\"rgb(1, 1, 1)\", \"rgb(3, 3, 3)\"];\n    const finalScale = COLOR_SCALES[0].concat(additionalScales);\n    const component = shallow(\n      <ColorPaletteSelector\n        userDataIndex={0}\n        colorscale={finalScale}\n        isPie={true}\n        interpolated={false}\n      />\n    );\n\n    const basicColorscaleLength = COLOR_SCALES[0].length;\n    const colorpalette = component.find(\".js-color-palette\");\n    const enhancedColorPaletteLength =\n      colorpalette.nodes[0].props.children.length;\n\n    expect(finalScale.length === enhancedColorPaletteLength).toBe(true);\n    expect(basicColorscaleLength < enhancedColorPaletteLength).toBe(true);\n  });\n\n  it(\"passes the colorscale on click\", () => {\n    const fn = jest.fn();\n    const component = shallow(\n      <ColorPaletteSelector\n        onClick={fn}\n        userDataIndex={0}\n        colorscale={COLOR_SCALES[0]}\n        isPie={false}\n      />\n    );\n\n    component\n      .find(\".js-color-palette\")\n      .first()\n      .simulate(\"click\");\n    expect(fn).toBeCalledWith(COLOR_SCALES[0]);\n  });\n\n  it(\"passes un-nested colorscales when interpolated is false\", () => {\n    const fn = jest.fn();\n    const component = shallow(\n      <ColorPaletteSelector\n        onClick={fn}\n        interpolated={false}\n        userDataIndex={0}\n        isPie={false}\n      />\n    );\n\n    component\n      .find(\".js-color-palette\")\n      .first()\n      .simulate(\"click\");\n    expect(fn).toBeCalledWith(COLOR_SCALES[0].map(colorPair => colorPair[1]));\n  });\n\n  it(\"works with named plotly.js colorscales\", () => {\n    const component = shallow(\n      <ColorPaletteSelector\n        colorscale=\"Viridis\"\n        userDataIndex={0}\n        isPie={false}\n      />\n    );\n\n    const colorscales = component.state(\"colorscales\");\n    // The new unknown colorscale is added\n    expect(colorscales.length).toBe(13);\n  });\n\n  it(\"adds a new colorscales correctly\", () => {\n    const aRealNewColorscale = [[0, \"rgb(1, 1, 1)\"], [1, \"rgb(2, 2, 2)\"]];\n    const initialColorscalesLength = COLOR_SCALES.length;\n\n    const component = shallow(\n      <ColorPaletteSelector\n        colorscale={aRealNewColorscale}\n        userDataIndex={0}\n        isPie={false}\n      />\n    );\n\n    const renderedColorscales = component.state(\"colorscales\");\n    expect(initialColorscalesLength + 1 === renderedColorscales.length).toBe(\n      true\n    );\n  });\n\n  it(\"does not add colorscale for trimmed down version of existing colorscale\", () => {\n    // Trimmed down version of existing colorscale\n    const newColorscale = COLOR_SCALES[0].slice(0, 3);\n    const initialColorscalesLength = COLOR_SCALES.length;\n\n    const component = shallow(\n      <ColorPaletteSelector\n        colorscale={newColorscale}\n        userDataIndex={0}\n        isPie={false}\n      />\n    );\n\n    const renderedColorscales = component.state(\"colorscales\");\n    expect(initialColorscalesLength === renderedColorscales.length).toBe(true);\n  });\n});\n"]}