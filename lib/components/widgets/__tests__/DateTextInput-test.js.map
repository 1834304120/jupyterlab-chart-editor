{"version":3,"sources":["../../../../src/components/widgets/__tests__/DateTextInput-test.js"],"names":["Plotly","require","globalUtils","getWindow","jest","fn","mockReturnValue","describe","addTextToInput","input","text","simulate","target","value","render","props","originalLib","beforeEach","Lib","isDateTime","v","indexOf","afterEach","it","onUpdate","wrapper","calendar","find","nonDate","newDate","expect","prop","toBe","not","toBeCalled","toBeCalledWith"],"mappings":";;AAAA;;;;AACA;;;;AACA;;;;AACA;;AACA;;;;AAEA,IAAMA,SAASC,QAAQ,6BAAR,CAAf;;AAEA,IAAMC,cAAcD,QAAQ,oBAAR,CAApB;AACAC,YAAYC,SAAZ,GAAwBC,KAAKC,EAAL,GAAUC,eAAV,CAA0B,EAAEN,cAAF,EAA1B,CAAxB;;AAEAO,SAAS,eAAT,EAA0B,YAAM;AAC9B,WAASC,cAAT,CAAwBC,KAAxB,EAA+BC,IAA/B,EAAqC;AACnCD,UAAME,QAAN,CAAe,QAAf,EAAyB,EAAEC,QAAQ,EAAEC,OAAOH,IAAT,EAAV,EAAzB;AACD;;AAED,WAASI,MAAT,CAAgBC,KAAhB,EAAuB;AACrB,WAAO,mBAAM,uDAAmBA,KAAnB,CAAN,CAAP;AACD;;AAED,MAAIC,oBAAJ;;AAEAC,aAAW,YAAM;AACfD,kBAAchB,OAAOkB,GAArB;AACA;AACAlB,WAAOkB,GAAP,GAAa;AACXC,kBAAY,uBAAK;AACf,eAAOC,EAAEC,OAAF,CAAU,KAAV,MAAqB,CAAC,CAA7B;AACD;AAHU,KAAb;AAKD,GARD;;AAUAC,YAAU,YAAM;AACdtB,WAAOkB,GAAP,GAAaF,WAAb;AACD,GAFD;;AAIAO,KAAG,8DAAH,EAAmE,YAAM;AACvE,QAAMC,WAAWpB,KAAKC,EAAL,EAAjB;AACA,QAAMoB,UAAUX,OAAO;AACrBD,oCADqB;AAErBW,wBAFqB;AAGrBE,gBAAU;AAHW,KAAP,CAAhB;AAKA,QAAMjB,QAAQgB,QAAQE,IAAR,6BAA+BA,IAA/B,CAAoC,OAApC,CAAd;AACA,QAAMC,UAAU,YAAhB;AACA,QAAMC,UAAU,UAAhB;;AAEAC,WAAOrB,MAAMsB,IAAN,CAAW,OAAX,CAAP,EAA4BC,IAA5B;;AAEAxB,mBAAeC,KAAf,EAAsBmB,OAAtB;;AAEA;AACAE,WAAOrB,MAAMsB,IAAN,CAAW,OAAX,CAAP,EAA4BC,IAA5B,CAAiCJ,OAAjC;;AAEA;AACAnB,UAAME,QAAN,CAAe,MAAf;AACAmB,WAAOrB,MAAMsB,IAAN,CAAW,OAAX,CAAP,EAA4BC,IAA5B;AACAF,WAAON,QAAP,EAAiBS,GAAjB,CAAqBC,UAArB;;AAEA;AACA1B,mBAAeC,KAAf,EAAsBoB,OAAtB;;AAEA;AACAC,WAAON,QAAP,EAAiBS,GAAjB,CAAqBC,UAArB;;AAEAzB,UAAME,QAAN,CAAe,MAAf;AACAmB,WAAON,QAAP,EAAiBW,cAAjB,CAAgCN,OAAhC;AACAC,WAAOrB,MAAMsB,IAAN,CAAW,OAAX,CAAP,EAA4BC,IAA5B,CAAiCH,OAAjC;AACD,GAhCD;AAiCD,CA1DD","file":"DateTextInput-test.js","sourcesContent":["import DelayedTextInput from \"@workspace/components/widgets/DelayedTextInput\";\nimport DateTextInput from \"../DateTextInput\";\nimport React from \"react\";\nimport { MIXED_VALUES, MIXED_MODE_VALUE } from \"@workspace/constants/workspace\";\nimport { mount } from \"enzyme\";\n\nconst Plotly = require(\"@workspace/__mocks__/plotly\");\n\nconst globalUtils = require(\"_utils/globalUtils\");\nglobalUtils.getWindow = jest.fn().mockReturnValue({ Plotly });\n\ndescribe(\"DateTextInput\", () => {\n  function addTextToInput(input, text) {\n    input.simulate(\"change\", { target: { value: text } });\n  }\n\n  function render(props) {\n    return mount(<DateTextInput {...props} />);\n  }\n\n  let originalLib;\n\n  beforeEach(() => {\n    originalLib = Plotly.Lib;\n    // any string with \"not\" is not a date; otherwise it is a date\n    Plotly.Lib = {\n      isDateTime: v => {\n        return v.indexOf(\"not\") === -1;\n      },\n    };\n  });\n\n  afterEach(() => {\n    Plotly.Lib = originalLib;\n  });\n\n  it(\"should show MIXED_MODE_VALUE and pass only dates to onUpdate\", () => {\n    const onUpdate = jest.fn();\n    const wrapper = render({\n      value: MIXED_VALUES,\n      onUpdate,\n      calendar: \"gregorian\",\n    });\n    const input = wrapper.find(DelayedTextInput).find(\"input\");\n    const nonDate = \"not a date\";\n    const newDate = \"tomorrow\";\n\n    expect(input.prop(\"value\")).toBe(MIXED_MODE_VALUE);\n\n    addTextToInput(input, nonDate);\n\n    // you're allowed to type a non-date\n    expect(input.prop(\"value\")).toBe(nonDate);\n\n    // but on blur it reverts without calling onUpdate\n    input.simulate(\"blur\");\n    expect(input.prop(\"value\")).toBe(MIXED_MODE_VALUE);\n    expect(onUpdate).not.toBeCalled();\n\n    // now type a \"real\" date\n    addTextToInput(input, newDate);\n\n    // still haven't called onUpdate\n    expect(onUpdate).not.toBeCalled();\n\n    input.simulate(\"blur\");\n    expect(onUpdate).toBeCalledWith(newDate);\n    expect(input.prop(\"value\")).toBe(newDate);\n  });\n});\n"]}