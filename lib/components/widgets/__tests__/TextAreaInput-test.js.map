{"version":3,"sources":["../../../../src/components/widgets/__tests__/TextAreaInput-test.js"],"names":["jest","dontMock","describe","TextAreaInput","React","ReactDOM","TestUtils","beforeEach","require","render","props","value","placeholder","onChange","genMockFn","renderIntoDocument","it","component","expect","toBeDefined","state","toEqual","not","toBeCalled","Simulate","change","refs","textinput","target","toBeCalledWith","componentWillReceiveProps"],"mappings":";;AAEA;;;;;;AAFAA,KAAKC,QAAL,CAAc,kBAAd;;AAIAC,SAAS,eAAT,EAA0B,YAAM;AAC9B,MAAIC,sBAAJ;AACA,MAAIC,cAAJ;AACA,MAAIC,iBAAJ;AACA,MAAIC,kBAAJ;;AAEAC,aAAW,YAAM;AACfJ,oBAAgBK,QAAQ,kBAAR,CAAhB;AACAJ,YAAQI,QAAQ,OAAR,CAAR;AACAH,eAAWG,QAAQ,WAAR,CAAX;AACAF,gBAAYE,QAAQ,sBAAR,CAAZ;AACD,GALD;;AAOA,WAASC,MAAT,GAME;AAAA,QALAC,KAKA,uEALQ;AACNC,aAAO,YADD;AAENC,mBAAa,0BAFP;AAGNC,gBAAUb,KAAKc,SAAL;AAHJ,KAKR;;AACA,WAAOR,UAAUS,kBAAV,CAA6B,oBAAC,aAAD,EAAmBL,KAAnB,CAA7B,CAAP;AACD;;AAEDM,KAAG,qDAAH,EAA0D,YAAM;AAC9D,QAAMH,WAAWb,KAAKc,SAAL,EAAjB;AACA,QAAMG,YAAYR,QAAlB;;AAEAS,WAAOD,SAAP,EAAkBE,WAAlB;AACAD,WAAOD,UAAUG,KAAV,CAAgBT,KAAvB,EAA8BU,OAA9B,CAAsC,YAAtC;AACAH,WAAOD,UAAUP,KAAV,CAAgBG,QAAvB,EAAiCS,GAAjC,CAAqCC,UAArC;AACAjB,cAAUkB,QAAV,CAAmBC,MAAnB,CAA0BR,UAAUS,IAAV,CAAeC,SAAzC,EAAoD;AAClDC,cAAQ,EAAEjB,OAAO,kBAAT;AAD0C,KAApD;AAGAO,WAAOD,UAAUP,KAAV,CAAgBG,QAAvB,EAAiCgB,cAAjC,CAAgD,kBAAhD;AACAX,WAAOD,UAAUG,KAAV,CAAgBT,KAAvB,EAA8BU,OAA9B,CAAsC,kBAAtC;AACAH,WAAOD,UAAUS,IAAV,CAAeC,SAAf,CAAyBhB,KAAhC,EAAuCU,OAAvC,CAA+C,kBAA/C;AACD,GAbD;;AAeAL,KAAG,8DAAH,EAAmE,YAAM;AACvE,QAAMH,WAAWb,KAAKc,SAAL,EAAjB;AACA,QAAMG,YAAYR,QAAlB;;AAEAS,WAAOD,UAAUG,KAAV,CAAgBT,KAAvB,EAA8BU,OAA9B,CAAsC,YAAtC;AACAJ,cAAUa,yBAAV,CAAoC;AAClCnB,aAAO;AAD2B,KAApC;AAGAO,WAAOD,UAAUG,KAAV,CAAgBT,KAAvB,EAA8BU,OAA9B,CAAsC,aAAtC;AACAH,WAAOD,UAAUS,IAAV,CAAeC,SAAf,CAAyBhB,KAAhC,EAAuCU,OAAvC,CAA+C,aAA/C;AACD,GAVD;AAWD,CAjDD","file":"TextAreaInput-test.js","sourcesContent":["jest.dontMock(\"../TextAreaInput\");\n\nimport deepAssign from \"assign-deep\";\n\ndescribe(\"TextAreaInput\", () => {\n  let TextAreaInput;\n  let React;\n  let ReactDOM;\n  let TestUtils;\n\n  beforeEach(() => {\n    TextAreaInput = require(\"../TextAreaInput\");\n    React = require(\"react\");\n    ReactDOM = require(\"react-dom\");\n    TestUtils = require(\"react-dom/test-utils\");\n  });\n\n  function render(\n    props = {\n      value: \"First Note\",\n      placeholder: \"Some placeholder text...\",\n      onChange: jest.genMockFn(),\n    }\n  ) {\n    return TestUtils.renderIntoDocument(<TextAreaInput {...props} />);\n  }\n\n  it(\"passes on the new value on change and updates state\", () => {\n    const onChange = jest.genMockFn();\n    const component = render();\n\n    expect(component).toBeDefined();\n    expect(component.state.value).toEqual(\"First Note\");\n    expect(component.props.onChange).not.toBeCalled();\n    TestUtils.Simulate.change(component.refs.textinput, {\n      target: { value: \"A change of text\" },\n    });\n    expect(component.props.onChange).toBeCalledWith(\"A change of text\");\n    expect(component.state.value).toEqual(\"A change of text\");\n    expect(component.refs.textinput.value).toEqual(\"A change of text\");\n  });\n\n  it(\"should update local state and value on new props from parent\", () => {\n    const onChange = jest.genMockFn();\n    const component = render();\n\n    expect(component.state.value).toEqual(\"First Note\");\n    component.componentWillReceiveProps({\n      value: \"Crazy Craig\",\n    });\n    expect(component.state.value).toEqual(\"Crazy Craig\");\n    expect(component.refs.textinput.value).toEqual(\"Crazy Craig\");\n  });\n});\n"]}