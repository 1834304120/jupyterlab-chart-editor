{"version":3,"sources":["../../../../src/components/widgets/__tests__/FlaglistCheckboxGroup-test.js"],"names":["jest","dontMock","describe","React","ReactDOM","TestUtils","FlaglistCheckboxGroup","renderCheckedOption","beforeEach","require","render","props","onChange","genMockFn","options","label","value","activeOption","renderIntoDocument","it","component","expect","toEqual","checked","state","handleChange"],"mappings":";;AAEA;;;;;;AAFAA,KAAKC,QAAL,CAAc,0BAAd;;AAIAC,SAAS,uBAAT,EAAkC,YAAM;AACtC,MAAIC,cAAJ;AACA,MAAIC,iBAAJ;AACA,MAAIC,kBAAJ;AACA,MAAIC,8BAAJ;AACA,MAAIC,4BAAJ;;AAEAC,aAAW,YAAM;AACfL,YAAQM,QAAQ,OAAR,CAAR;AACAL,eAAWK,QAAQ,WAAR,CAAX;AACAJ,gBAAYI,QAAQ,sBAAR,CAAZ;AACAH,4BAAwBG,QAAQ,0BAAR,CAAxB;AACAF,0BAAsBE,QAAQ,0BAAR,EACnBF,mBADH;AAED,GAPD;;AASA,WAASG,MAAT,CAAgBC,KAAhB,EAAuB;AACrB,QAAMC,WAAWZ,KAAKa,SAAL,EAAjB;;AAEAF,YAAQ,0BACN;AACEG,eAAS,CACP;AACEC,eAAO,GADT;AAEEC,eAAO;AAFT,OADO,EAKP;AACED,eAAO,GADT;AAEEC,eAAO;AAFT,OALO,EASP;AACED,eAAO,GADT;AAEEC,eAAO;AAFT,OATO,CADX;AAeEJ,wBAfF;AAgBEK,oBAAc;AAhBhB,KADM,EAmBNN,SAAS,EAnBH,CAAR;;AAsBA,WAAON,UAAUa,kBAAV,CAA6B,oBAAC,qBAAD,EAA2BP,KAA3B,CAA7B,CAAP;AACD;;AAEDQ,KAAG,kCAAH,EAAuC,YAAM;AAC3C,QAAMC,YAAYV,QAAlB;;AAEAW,WAAOD,UAAUb,mBAAV,EAAP,EAAwCe,OAAxC,CAAgD,CAC9C;AACEP,aAAO,GADT;AAEEC,aAAO,GAFT;AAGEO,eAAS;AAHX,KAD8C,EAM9C;AACER,aAAO,GADT;AAEEC,aAAO,GAFT;AAGEO,eAAS;AAHX,KAN8C,EAW9C;AACER,aAAO,GADT;AAEEC,aAAO,GAFT;AAGEO,eAAS;AAHX,KAX8C,CAAhD;AAiBD,GApBD;;AAsBAJ,KAAG,yCAAH,EAA8C,YAAM;AAClD,QAAMC,YAAYV,QAAlB;;AAEAW,WAAOD,UAAUI,KAAV,CAAgBP,YAAvB,EAAqCK,OAArC,CAA6C,KAA7C;;AAEAF,cAAUK,YAAV,CAAuB,CACrB;AACEV,aAAO,GADT;AAEEC,aAAO,GAFT;AAGEO,eAAS;AAHX,KADqB,EAMrB;AACER,aAAO,GADT;AAEEC,aAAO,GAFT;AAGEO,eAAS;AAHX,KANqB,EAWrB;AACER,aAAO,GADT;AAEEC,aAAO,GAFT;AAGEO,eAAS;AAHX,KAXqB,CAAvB;;AAkBAF,WAAOD,UAAUI,KAAV,CAAgBP,YAAvB,EAAqCK,OAArC,CAA6C,KAA7C;AACD,GAxBD;AAyBD,CA3FD","file":"FlaglistCheckboxGroup-test.js","sourcesContent":["jest.dontMock(\"../FlaglistCheckboxGroup\");\n\nimport deepAssign from \"assign-deep\";\n\ndescribe(\"FlaglistCheckboxGroup\", () => {\n  let React;\n  let ReactDOM;\n  let TestUtils;\n  let FlaglistCheckboxGroup;\n  let renderCheckedOption;\n\n  beforeEach(() => {\n    React = require(\"react\");\n    ReactDOM = require(\"react-dom\");\n    TestUtils = require(\"react-dom/test-utils\");\n    FlaglistCheckboxGroup = require(\"../FlaglistCheckboxGroup\");\n    renderCheckedOption = require(\"../FlaglistCheckboxGroup\")\n      .renderCheckedOption;\n  });\n\n  function render(props) {\n    const onChange = jest.genMockFn();\n\n    props = deepAssign(\n      {\n        options: [\n          {\n            label: \"X\",\n            value: \"x\",\n          },\n          {\n            label: \"Y\",\n            value: \"y\",\n          },\n          {\n            label: \"Z\",\n            value: \"z\",\n          },\n        ],\n        onChange,\n        activeOption: \"x+y\",\n      },\n      props || {}\n    );\n\n    return TestUtils.renderIntoDocument(<FlaglistCheckboxGroup {...props} />);\n  }\n\n  it(\"render checked options correctly\", () => {\n    const component = render();\n\n    expect(component.renderCheckedOption()).toEqual([\n      {\n        label: \"X\",\n        value: \"x\",\n        checked: true,\n      },\n      {\n        label: \"Y\",\n        value: \"y\",\n        checked: true,\n      },\n      {\n        label: \"Z\",\n        value: \"z\",\n        checked: false,\n      },\n    ]);\n  });\n\n  it(\"updates the state according to a change\", () => {\n    const component = render();\n\n    expect(component.state.activeOption).toEqual(\"x+y\");\n\n    component.handleChange([\n      {\n        label: \"X\",\n        value: \"x\",\n        checked: false,\n      },\n      {\n        label: \"Y\",\n        value: \"y\",\n        checked: true,\n      },\n      {\n        label: \"Z\",\n        value: \"z\",\n        checked: true,\n      },\n    ]);\n\n    expect(component.state.activeOption).toEqual(\"y+z\");\n  });\n});\n"]}