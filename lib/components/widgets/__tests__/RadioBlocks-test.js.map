{"version":3,"sources":["../../../../src/components/widgets/__tests__/RadioBlocks-test.js"],"names":["jest","dontMock","describe","RadioBlocks","React","ReactDOM","TestUtils","beforeEach","require","render","props","onOptionChange","genMockFn","options","value","label","activeOption","renderIntoDocument","it","component","expect","refs","Bing","checked","toEqual","Bang","Simulate","click","toBeCalledWith"],"mappings":"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","file":"RadioBlocks-test.js","sourcesContent":["jest.dontMock(\"../RadioBlocks\");\n\nimport deepAssign from \"assign-deep\";\n\ndescribe(\"RadioBlocks\", () => {\n  let RadioBlocks;\n  let React;\n  let ReactDOM;\n  let TestUtils;\n\n  beforeEach(() => {\n    RadioBlocks = require(\"../RadioBlocks\");\n    React = require(\"react\");\n    ReactDOM = require(\"react-dom\");\n    TestUtils = require(\"react-dom/test-utils\");\n  });\n\n  function render(props) {\n    const onOptionChange = jest.genMockFn();\n\n    var props = deepAssign(\n      {\n        options: [\n          { value: true, label: \"Bing\" },\n          { value: false, label: \"Bang\" },\n        ],\n        onOptionChange: onOptionChange,\n        activeOption: true,\n      },\n      props || {}\n    );\n\n    return TestUtils.renderIntoDocument(<RadioBlocks {...props} />);\n  }\n\n  it(\"Default active option is correctly checked\", () => {\n    const component = render();\n\n    // Make sure that default active option is correctly 'checked'\n\n    expect(component.refs.Bing.checked).toEqual(true);\n    expect(component.refs.Bang.checked).toEqual(false);\n  });\n\n  it(\"component onChange fires our onOptionChange prop\", () => {\n    const component = render();\n    // Make sure that component onChange fires our onOptionChange prop\n\n    TestUtils.Simulate.click(component.refs.Bang);\n    expect(component.props.onOptionChange).toBeCalledWith(false);\n\n    expect(component.refs.Bing.checked).toEqual(false);\n    expect(component.refs.Bang.checked).toEqual(true);\n\n    TestUtils.Simulate.click(component.refs.Bing);\n    expect(component.props.onOptionChange).toBeCalledWith(false);\n\n    expect(component.refs.Bing.checked).toEqual(true);\n    expect(component.refs.Bang.checked).toEqual(false);\n  });\n\n  it(\"component onChange fires our onOptionChange prop with correct values\", () => {\n    const component = render({\n      options: [\n        { value: \"on\", label: \"Bing\" },\n        { value: \"off\", label: \"Bang\" },\n      ],\n    });\n    // Make sure that component onChange fires our onOptionChange prop\n\n    TestUtils.Simulate.click(component.refs.Bang);\n    expect(component.props.onOptionChange).toBeCalledWith(\"off\");\n\n    expect(component.refs.Bing.checked).toEqual(false);\n    expect(component.refs.Bang.checked).toEqual(true);\n\n    TestUtils.Simulate.click(component.refs.Bing);\n    expect(component.props.onOptionChange).toBeCalledWith(\"on\");\n\n    expect(component.refs.Bing.checked).toEqual(true);\n    expect(component.refs.Bang.checked).toEqual(false);\n  });\n});\n"]}