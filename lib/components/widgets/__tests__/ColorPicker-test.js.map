{"version":3,"sources":["../../../../src/components/widgets/__tests__/ColorPicker-test.js"],"names":["jest","mock","describe","render","additionalProps","user","currentUser","feature_set_id","defaultProps","selectedColor","onColorChange","fn","dispatch","context","props","it","initialSelectedColor","wrapper","selectedColorText","swatchElement","swatchBackgroundColor","ref","text","prop","backgroundColor","expect","toEqual","toHexString","state","toRgbString","newColorFromProps","setProps","mockUserSelectedColor","instance","onSelectedColorChange","r","g","b","a","toBeCalledWith","colorFromStore","hexColor","RGBAWhite","setState","isVisible","picker","onChangeComplete","hex","not","toBeCalled","callArgs","calls","opts","showOnce","toBe"],"mappings":"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","file":"ColorPicker-test.js","sourcesContent":["jest.mock('../../../../common/actions/notification');\n\nimport ColorPicker from '../ColorPicker';\nimport React from 'react';\nimport tinycolor from 'tinycolor2';\nimport {merge} from 'ramda';\nimport {mockUser} from '_utils/testUtils';\nimport {mount} from 'enzyme';\nimport {showNotification} from '@common/actions/notification';\n\ndescribe('ColorPicker', () => {\n\n    function render(additionalProps = {}, user = 'community') {\n\n        const currentUser = mockUser({feature_set_id: user});\n\n        const defaultProps = {\n            selectedColor: '#fff',\n            onColorChange: jest.fn(),\n            dispatch: jest.fn()\n        };\n\n        const context = {currentUser};\n\n        const props = merge(defaultProps, additionalProps);\n\n        return mount(\n            <ColorPicker {...props} />,\n            {context}\n        );\n    }\n\n    it(`should overwrite local state with props when the parent\n        component passes in a new color`, () => {\n\n            /*\n             * Passing in default values should populate the local state\n             * and the component DOM elements correctly.\n             */\n            const initialSelectedColor = 'rgba(100, 10, 10, 0.8)';\n            const onColorChange = jest.fn();\n            const wrapper = render({\n                selectedColor: initialSelectedColor,\n                onColorChange: onColorChange\n            });\n\n            let selectedColorText,\n                swatchElement,\n                swatchBackgroundColor;\n\n            // initial user values should be rendered and assigned to local state.\n            selectedColorText = wrapper.ref('selectedColorText').text();\n            swatchElement = wrapper.ref('swatch');\n            swatchBackgroundColor = swatchElement.prop('style').backgroundColor;\n\n            expect(selectedColorText).toEqual(\n                tinycolor(initialSelectedColor).toHexString()\n            );\n            expect(swatchBackgroundColor).toEqual(initialSelectedColor);\n            expect(wrapper.state().selectedColor.toRgbString()).toEqual(\n                initialSelectedColor\n            );\n\n            /*\n             * Simulate a parent component sending new selected color prop.\n             * Internal state should change and component should update and\n             * props should match internal state.\n             */\n            const newColorFromProps = 'rgba(28, 88, 88, 0.6)';\n            wrapper.setProps({\n                selectedColor: newColorFromProps\n            });\n\n            selectedColorText = wrapper.ref('selectedColorText').text();\n            swatchElement = wrapper.ref('swatch');\n            swatchBackgroundColor = swatchElement.prop('style').backgroundColor;\n\n            expect(selectedColorText).toEqual(\n                tinycolor(newColorFromProps).toHexString()\n            );\n            expect(swatchBackgroundColor).toEqual(newColorFromProps);\n            expect(wrapper.state().selectedColor.toRgbString()).toEqual(\n                newColorFromProps\n            );\n\n            // Simulate a completed user interaction with the ColorPicker.\n            const mockUserSelectedColor = 'rgba(88, 20, 28, 0.2)';\n            wrapper.instance().onSelectedColorChange(\n                tinycolor({r: 88, g: 20, b: 28, a: 0.2})\n            );\n\n            // Local state should be set, and onColorChange fired\n            expect(wrapper.state().selectedColor.toRgbString()).toEqual(\n                mockUserSelectedColor\n            );\n\n            expect(onColorChange).toBeCalledWith(mockUserSelectedColor);\n\n            /*\n             * Pretend that user change was not accepted by the store.\n             * Next props will change local state back to store state values.\n             */\n            const colorFromStore = 'rgba(28, 88, 88, 0.6)';\n            wrapper.setProps({\n                selectedColor: colorFromStore\n            });\n\n            selectedColorText = wrapper.ref('selectedColorText').text();\n            swatchElement = wrapper.ref('swatch');\n            swatchBackgroundColor = swatchElement.prop('style').backgroundColor;\n\n            expect(selectedColorText).toEqual(\n                tinycolor(colorFromStore).toHexString()\n            );\n            expect(swatchBackgroundColor).toEqual(colorFromStore);\n\n            /*\n             * Test passing in a HEX color from the store.\n             * Our component only handles RGBA values internally for now, so\n             * it should be equivalent, but it will spit out RGBA.\n             */\n            const hexColor = '#FFFFFF'; // White!\n            wrapper.setProps({\n                selectedColor: hexColor\n            });\n\n            selectedColorText = wrapper.ref('selectedColorText').text();\n            swatchElement = wrapper.ref('swatch');\n            swatchBackgroundColor = swatchElement.prop('style').backgroundColor;\n\n            // Component will display HEX as text\n            expect(selectedColorText).toEqual(tinycolor(hexColor).toHexString());\n\n            // Here we expect the RGBA version of #FFFFFF as the style prop.\n            const RGBAWhite = 'rgb(255, 255, 255)';\n            expect(swatchBackgroundColor).toEqual(RGBAWhite);\n\n        });\n\n    describe('colour tiering', () => {\n        it('doesnt open upgrade dialogue if free colour is selected', () => {\n            const wrapper = render();\n            wrapper.setState({isVisible: true});\n\n            const picker = wrapper.ref('react-color');\n            picker.props().onChangeComplete({hex: '#ffffff'});\n\n            expect(wrapper.props().dispatch).not.toBeCalled();\n        });\n\n        it('opens notif and renders probadge if pro colour is selected', () => {\n            const wrapper = render();\n            wrapper.setState({isVisible: true});\n\n            const picker = wrapper.ref('react-color');\n            picker.props().onChangeComplete({hex: '#aaa112'});\n\n            const callArgs = showNotification.mock.calls[0];\n            const opts = callArgs[1];\n            expect(opts.showOnce).toBe(true);\n        });\n\n        it('should not open upgrade dialogue if logged in as pro', () => {\n            const wrapper = render({}, 'professional_2016_10');\n            wrapper.setState({isVisible: true});\n\n            const picker = wrapper.ref('react-color');\n            picker.props().onChangeComplete({hex: '#aaa112'});\n\n            expect(wrapper.props().dispatch).not.toBeCalled();\n        });\n    });\n});\n"]}