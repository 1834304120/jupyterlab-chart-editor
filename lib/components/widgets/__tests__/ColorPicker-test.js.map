{"version":3,"sources":["../../../../src/components/widgets/__tests__/ColorPicker-test.js"],"names":["jest","mock","describe","render","additionalProps","user","currentUser","feature_set_id","defaultProps","selectedColor","onColorChange","fn","dispatch","context","props","it","initialSelectedColor","wrapper","selectedColorText","swatchElement","swatchBackgroundColor","ref","text","prop","backgroundColor","expect","toEqual","toHexString","state","toRgbString","newColorFromProps","setProps","mockUserSelectedColor","instance","onSelectedColorChange","r","g","b","a","toBeCalledWith","colorFromStore","hexColor","RGBAWhite","setState","isVisible","picker","onChangeComplete","hex","not","toBeCalled","callArgs","calls","opts","showOnce","toBe"],"mappings":"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","file":"ColorPicker-test.js","sourcesContent":["jest.mock(\"../../../../common/actions/notification\");\n\nimport ColorPicker from \"../ColorPicker\";\nimport React from \"react\";\nimport tinycolor from \"tinycolor2\";\nimport { merge } from \"ramda\";\nimport { mockUser } from \"_utils/testUtils\";\nimport { mount } from \"enzyme\";\nimport { showNotification } from \"@common/actions/notification\";\n\ndescribe(\"ColorPicker\", () => {\n  function render(additionalProps = {}, user = \"community\") {\n    const currentUser = mockUser({ feature_set_id: user });\n\n    const defaultProps = {\n      selectedColor: \"#fff\",\n      onColorChange: jest.fn(),\n      dispatch: jest.fn(),\n    };\n\n    const context = { currentUser };\n\n    const props = merge(defaultProps, additionalProps);\n\n    return mount(<ColorPicker {...props} />, { context });\n  }\n\n  it(`should overwrite local state with props when the parent\n        component passes in a new color`, () => {\n    /*\n             * Passing in default values should populate the local state\n             * and the component DOM elements correctly.\n             */\n    const initialSelectedColor = \"rgba(100, 10, 10, 0.8)\";\n    const onColorChange = jest.fn();\n    const wrapper = render({\n      selectedColor: initialSelectedColor,\n      onColorChange: onColorChange,\n    });\n\n    let selectedColorText, swatchElement, swatchBackgroundColor;\n\n    // initial user values should be rendered and assigned to local state.\n    selectedColorText = wrapper.ref(\"selectedColorText\").text();\n    swatchElement = wrapper.ref(\"swatch\");\n    swatchBackgroundColor = swatchElement.prop(\"style\").backgroundColor;\n\n    expect(selectedColorText).toEqual(\n      tinycolor(initialSelectedColor).toHexString()\n    );\n    expect(swatchBackgroundColor).toEqual(initialSelectedColor);\n    expect(wrapper.state().selectedColor.toRgbString()).toEqual(\n      initialSelectedColor\n    );\n\n    /*\n             * Simulate a parent component sending new selected color prop.\n             * Internal state should change and component should update and\n             * props should match internal state.\n             */\n    const newColorFromProps = \"rgba(28, 88, 88, 0.6)\";\n    wrapper.setProps({\n      selectedColor: newColorFromProps,\n    });\n\n    selectedColorText = wrapper.ref(\"selectedColorText\").text();\n    swatchElement = wrapper.ref(\"swatch\");\n    swatchBackgroundColor = swatchElement.prop(\"style\").backgroundColor;\n\n    expect(selectedColorText).toEqual(\n      tinycolor(newColorFromProps).toHexString()\n    );\n    expect(swatchBackgroundColor).toEqual(newColorFromProps);\n    expect(wrapper.state().selectedColor.toRgbString()).toEqual(\n      newColorFromProps\n    );\n\n    // Simulate a completed user interaction with the ColorPicker.\n    const mockUserSelectedColor = \"rgba(88, 20, 28, 0.2)\";\n    wrapper\n      .instance()\n      .onSelectedColorChange(tinycolor({ r: 88, g: 20, b: 28, a: 0.2 }));\n\n    // Local state should be set, and onColorChange fired\n    expect(wrapper.state().selectedColor.toRgbString()).toEqual(\n      mockUserSelectedColor\n    );\n\n    expect(onColorChange).toBeCalledWith(mockUserSelectedColor);\n\n    /*\n             * Pretend that user change was not accepted by the store.\n             * Next props will change local state back to store state values.\n             */\n    const colorFromStore = \"rgba(28, 88, 88, 0.6)\";\n    wrapper.setProps({\n      selectedColor: colorFromStore,\n    });\n\n    selectedColorText = wrapper.ref(\"selectedColorText\").text();\n    swatchElement = wrapper.ref(\"swatch\");\n    swatchBackgroundColor = swatchElement.prop(\"style\").backgroundColor;\n\n    expect(selectedColorText).toEqual(tinycolor(colorFromStore).toHexString());\n    expect(swatchBackgroundColor).toEqual(colorFromStore);\n\n    /*\n             * Test passing in a HEX color from the store.\n             * Our component only handles RGBA values internally for now, so\n             * it should be equivalent, but it will spit out RGBA.\n             */\n    const hexColor = \"#FFFFFF\"; // White!\n    wrapper.setProps({\n      selectedColor: hexColor,\n    });\n\n    selectedColorText = wrapper.ref(\"selectedColorText\").text();\n    swatchElement = wrapper.ref(\"swatch\");\n    swatchBackgroundColor = swatchElement.prop(\"style\").backgroundColor;\n\n    // Component will display HEX as text\n    expect(selectedColorText).toEqual(tinycolor(hexColor).toHexString());\n\n    // Here we expect the RGBA version of #FFFFFF as the style prop.\n    const RGBAWhite = \"rgb(255, 255, 255)\";\n    expect(swatchBackgroundColor).toEqual(RGBAWhite);\n  });\n\n  describe(\"colour tiering\", () => {\n    it(\"doesnt open upgrade dialogue if free colour is selected\", () => {\n      const wrapper = render();\n      wrapper.setState({ isVisible: true });\n\n      const picker = wrapper.ref(\"react-color\");\n      picker.props().onChangeComplete({ hex: \"#ffffff\" });\n\n      expect(wrapper.props().dispatch).not.toBeCalled();\n    });\n\n    it(\"opens notif and renders probadge if pro colour is selected\", () => {\n      const wrapper = render();\n      wrapper.setState({ isVisible: true });\n\n      const picker = wrapper.ref(\"react-color\");\n      picker.props().onChangeComplete({ hex: \"#aaa112\" });\n\n      const callArgs = showNotification.mock.calls[0];\n      const opts = callArgs[1];\n      expect(opts.showOnce).toBe(true);\n    });\n\n    it(\"should not open upgrade dialogue if logged in as pro\", () => {\n      const wrapper = render({}, \"professional_2016_10\");\n      wrapper.setState({ isVisible: true });\n\n      const picker = wrapper.ref(\"react-color\");\n      picker.props().onChangeComplete({ hex: \"#aaa112\" });\n\n      expect(wrapper.props().dispatch).not.toBeCalled();\n    });\n  });\n});\n"]}