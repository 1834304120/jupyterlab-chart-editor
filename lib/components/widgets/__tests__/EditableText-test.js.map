{"version":3,"sources":["../../../../src/components/widgets/__tests__/EditableText-test.js"],"names":["jest","dontMock","describe","React","ReactDOM","TestUtils","EditableText","beforeEach","require","render","text","callbacks","type","onChange","genMockFunction","onUpdate","renderIntoDocument","it","expected","component","actual","refs","value","expect","toEqual","$input","node","findDOMNode","not","toBeCalled","Simulate","change","target","blur","keyPress","keyCode","mockSelect","click","select"],"mappings":"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","file":"EditableText-test.js","sourcesContent":["jest.dontMock(\"../EditableText\");\n\ndescribe(\"EditableText\", function() {\n  var React;\n  var ReactDOM;\n  var TestUtils;\n  var EditableText;\n\n  beforeEach(function() {\n    React = require(\"react\");\n    ReactDOM = require(\"react-dom\");\n    TestUtils = require(\"react-dom/test-utils\");\n    EditableText = require(\"../EditableText\");\n  });\n\n  function render(text, callbacks, type) {\n    var callbacks = callbacks || {};\n    var onChange = callbacks.onChange || jest.genMockFunction();\n    var onUpdate = callbacks.onUpdate || jest.genMockFunction();\n\n    return TestUtils.renderIntoDocument(\n      <EditableText\n        text={text}\n        type={type}\n        onChange={onChange}\n        onUpdate={onUpdate}\n      />\n    );\n  }\n\n  it(\"renders text\", function() {\n    var expected = \"cool placeholder text\";\n    var component = render(expected);\n    var actual = component.refs.text.value;\n    expect(actual).toEqual(expected);\n  });\n\n  describe(\"input type\", () => {\n    it(\"defaults to a text input\", () => {\n      var component = render();\n      var $input = component.refs.text;\n      expect($input.type).toEqual(\"text\");\n    });\n\n    it(\"renders a password input\", () => {\n      var component = render(\"\", {}, \"password\");\n      var $input = component.refs.text;\n      expect($input.type).toEqual(\"password\");\n    });\n  });\n\n  describe(\"on user input\", () => {\n    it(\"calls the onChange handler\", function() {\n      var onChange = jest.genMockFunction();\n      var component = render(\"test\", { onChange: onChange });\n      var node = ReactDOM.findDOMNode(component);\n      expect(onChange).not.toBeCalled();\n      TestUtils.Simulate.change(node, { target: { value: \"a\" } });\n      expect(onChange).toBeCalled();\n    });\n  });\n\n  describe(\"on save\", () => {\n    it(\"calls the onUpdate handler\", function() {\n      var onUpdate = jest.genMockFunction();\n      var component = render(\"test\", { onUpdate: onUpdate });\n      const node = ReactDOM.findDOMNode(component);\n      expect(onUpdate).not.toBeCalled();\n      TestUtils.Simulate.blur(node);\n      expect(onUpdate).toBeCalled();\n    });\n\n    it(\"allows saving by pressing the enter key\", () => {\n      var onUpdate = jest.genMockFunction();\n      var component = render(\"test\", { onUpdate: onUpdate });\n      var node = ReactDOM.findDOMNode(component);\n\n      component.refs.text.blur = () =>\n        TestUtils.Simulate.blur(component.refs.text);\n\n      expect(onUpdate).not.toBeCalled();\n      TestUtils.Simulate.change(node, { target: { value: \"hodor\" } });\n      TestUtils.Simulate.keyPress(node, { keyCode: 13 });\n      expect(onUpdate).toBeCalled();\n    });\n  });\n\n  it(\"highlights text on click\", function() {\n    var mockSelect = jest.genMockFunction();\n    var node = ReactDOM.findDOMNode(render(\"test\"));\n    TestUtils.Simulate.click(node, { target: { select: mockSelect } });\n    expect(mockSelect).toBeCalled();\n  });\n});\n"]}