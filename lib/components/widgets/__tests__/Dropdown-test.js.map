{"version":3,"sources":["../../../../src/components/widgets/__tests__/Dropdown-test.js"],"names":["jest","dontMock","describe","React","ReactDOM","TestUtils","Dropdown","beforeEach","require","render","props","renderIntoDocument","it","options","label","value","onChange","genMockFn","component","dropdown","refs","expect","toBeCalledWith","multi"],"mappings":";;AAAAA,KAAKC,QAAL,CAAc,aAAd;;AAEAC,SAAS,UAAT,EAAqB,YAAM;AACzB,MAAIC,cAAJ;AACA,MAAIC,iBAAJ;AACA,MAAIC,kBAAJ;AACA,MAAIC,iBAAJ;;AAEAC,aAAW,YAAM;AACfJ,YAAQK,QAAQ,OAAR,CAAR;AACAH,gBAAYG,QAAQ,sBAAR,CAAZ;AACAF,eAAWE,QAAQ,aAAR,CAAX;AACD,GAJD;;AAMA,WAASC,MAAT,GAA4B;AAAA,QAAZC,KAAY,uEAAJ,EAAI;;AAC1B,WAAOL,UAAUM,kBAAV,CAA6B,oBAAC,QAAD,EAAcD,KAAd,CAA7B,CAAP;AACD;;AAEDE,KAAG,4CAAH,EAAiD,YAAM;AACrD,QAAMC,UAAU,CACd;AACEC,aAAO,SADT;AAEEC,aAAO;AAFT,KADc,EAKd;AACED,aAAO,WADT;AAEEC,aAAO;AAFT,KALc,CAAhB;;AAWA,QAAMC,WAAWhB,KAAKiB,SAAL,EAAjB;;AAEA,QAAMC,YAAYT,OAAO;AACvBI,eAASA,OADc;AAEvBG,gBAAUA;AAFa,KAAP,CAAlB;;AAKA,QAAMG,WAAWD,UAAUE,IAAV,CAAeD,QAAhC;;AAEAA,aAAST,KAAT,CAAeM,QAAf,CAAwBH,QAAQ,CAAR,CAAxB;;AAEA;AACAQ,WAAOL,QAAP,EAAiBM,cAAjB,CAAgCT,QAAQ,CAAR,EAAWE,KAA3C;AACD,GAzBD;;AA2BAH,KAAG,+CAAH,EAAoD,YAAM;AACxD,QAAMC,UAAU,CACd;AACEC,aAAO,SADT;AAEEC,aAAO;AAFT,KADc,EAKd;AACED,aAAO,WADT;AAEEC,aAAO;AAFT,KALc,CAAhB;;AAWA,QAAMC,WAAWhB,KAAKiB,SAAL,EAAjB;;AAEA,QAAMC,YAAYT,OAAO;AACvBI,eAASA,OADc;AAEvBG,gBAAUA;AAFa,KAAP,CAAlB;;AAKA,QAAMG,WAAWD,UAAUE,IAAV,CAAeD,QAAhC;;AAEA;AACAA,aAAST,KAAT,CAAeM,QAAf,CAAwB,EAAxB;;AAEA;AACAK,WAAOL,QAAP,EAAiBM,cAAjB,CAAgC,IAAhC;AACD,GA1BD;;AA4BAV,KAAG,kDAAH,EAAuD,YAAM;AAC3D,QAAMC,UAAU,CACd;AACEC,aAAO,SADT;AAEEC,aAAO;AAFT,KADc,EAKd;AACED,aAAO,WADT;AAEEC,aAAO;AAFT,KALc,EASd;AACED,aAAO,WADT;AAEEC,aAAO;AAFT,KATc,CAAhB;;AAeA,QAAMC,WAAWhB,KAAKiB,SAAL,EAAjB;;AAEA,QAAMC,YAAYT,OAAO;AACvBI,eAASA,OADc;AAEvBG,gBAAUA,QAFa;AAGvBD,aAAOF,OAHgB;AAIvBU,aAAO;AAJgB,KAAP,CAAlB;;AAOA,QAAMJ,WAAWD,UAAUE,IAAV,CAAeD,QAAhC;;AAEA;AACAA,aAAST,KAAT,CAAeM,QAAf,CAAwB,CAACH,QAAQ,CAAR,CAAD,EAAaA,QAAQ,CAAR,CAAb,CAAxB;;AAEA;AACAQ,WAAOL,QAAP,EAAiBM,cAAjB,CAAgC,CAACT,QAAQ,CAAR,EAAWE,KAAZ,EAAmBF,QAAQ,CAAR,EAAWE,KAA9B,CAAhC;AACD,GAhCD;AAiCD,CAxGD","file":"Dropdown-test.js","sourcesContent":["jest.dontMock(\"../Dropdown\");\n\ndescribe(\"Dropdown\", () => {\n  let React;\n  let ReactDOM;\n  let TestUtils;\n  let Dropdown;\n\n  beforeEach(() => {\n    React = require(\"react\");\n    TestUtils = require(\"react-dom/test-utils\");\n    Dropdown = require(\"../Dropdown\");\n  });\n\n  function render(props = {}) {\n    return TestUtils.renderIntoDocument(<Dropdown {...props} />);\n  }\n\n  it(\"should pass out new option value on change\", () => {\n    const options = [\n      {\n        label: \"Cookies\",\n        value: \"cookies\",\n      },\n      {\n        label: \"Bubblegum\",\n        value: \"bubblegum\",\n      },\n    ];\n\n    const onChange = jest.genMockFn();\n\n    const component = render({\n      options: options,\n      onChange: onChange,\n    });\n\n    const dropdown = component.refs.dropdown;\n\n    dropdown.props.onChange(options[1]);\n\n    // Should get value, not full option.\n    expect(onChange).toBeCalledWith(options[1].value);\n  });\n\n  it(\"should pass null as onChange arg when cleared\", () => {\n    const options = [\n      {\n        label: \"Cookies\",\n        value: \"cookies\",\n      },\n      {\n        label: \"Bubblegum\",\n        value: \"bubblegum\",\n      },\n    ];\n\n    const onChange = jest.genMockFn();\n\n    const component = render({\n      options: options,\n      onChange: onChange,\n    });\n\n    const dropdown = component.refs.dropdown;\n\n    // Simulate clearing the select\n    dropdown.props.onChange(\"\");\n\n    // Should get null, then the action passed can handle.\n    expect(onChange).toBeCalledWith(null);\n  });\n\n  it(\"should pass out new option array on multi change\", () => {\n    const options = [\n      {\n        label: \"Cookies\",\n        value: \"cookies\",\n      },\n      {\n        label: \"Bubblegum\",\n        value: \"bubblegum\",\n      },\n      {\n        label: \"Twizzlers\",\n        value: \"twizzlers\",\n      },\n    ];\n\n    const onChange = jest.genMockFn();\n\n    const component = render({\n      options: options,\n      onChange: onChange,\n      value: options,\n      multi: true,\n    });\n\n    const dropdown = component.refs.dropdown;\n\n    // Simluate removing the first option, options[0]\n    dropdown.props.onChange([options[1], options[2]]);\n\n    // Should get array of full options, not just values.\n    expect(onChange).toBeCalledWith([options[1].value, options[2].value]);\n  });\n});\n"]}