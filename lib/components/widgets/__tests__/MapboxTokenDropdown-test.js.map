{"version":3,"sources":["../../../../src/components/widgets/__tests__/MapboxTokenDropdown-test.js"],"names":["defaultToken","value","get","label","customToken","describe","render","props","tokens","mergeDefault","onChange","jest","fn","selectedToken","currentUser","feature_set_id","mapbox_access_tokens","finalProps","context","it","wrapper","dropdown","find","expect","prop","toEqual"],"mappings":";;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;AACA;;AACA;;;;AAEA,IAAMA,eAAe;AACnBC,SAAO,sBAAYC,GAAZ,CAAgB,6BAAhB,CADY;AAEnBC,SAAO;AAFY,CAArB;;AAKA,IAAMC,cAAc;AAClBH,SAAO,QADW;AAElBE;AAFkB,CAApB;;AAKAE,SAAS,yBAAT,EAAoC,YAAM;AACxC,WAASC,MAAT,CAAgBC,KAAhB,EAAoC;AAAA,QAAbC,MAAa,uEAAJ,EAAI;;AAClC,QAAMC,eAAe,kBAAM;AACzBC,gBAAUC,KAAKC,EAAL,EADe;AAEzBC,qBAAe;AAFU,KAAN,CAArB;AAIA,QAAMC,cAAc,yBAAS;AAC3BC,sBAAgB,WADW;AAE3BC,4BAAsBR;AAFK,KAAT,CAApB;;AAKA,QAAMS,aAAaR,aAAaF,KAAb,CAAnB;AACA,QAAMW,UAAU,EAAEJ,wBAAF,EAAhB;;AAEA,WAAO,qBAAQ,6DAAyBG,UAAzB,CAAR,EAAiD,EAAEC,gBAAF,EAAjD,CAAP;AACD;;AAEDC,KAAG,4CAAH,EAAiD,YAAM;AACrD,QAAMC,UAAUd,QAAhB;AACA,QAAMe,WAAWD,QAAQE,IAAR,iCAAjB;;AAEAC,WAAOF,SAASG,IAAT,CAAc,SAAd,CAAP,EAAiCC,OAAjC,CAAyC,CAACzB,YAAD,EAAeI,WAAf,CAAzC;AACD,GALD;;AAOAe,KAAG,mDAAH,EAAwD,YAAM;AAC5D,QAAMX,SAAS,CAAC,eAAD,EAAkB,YAAlB,CAAf;;AAEA,QAAMY,UAAUd,OAAO,EAAP,EAAWE,MAAX,CAAhB;AACA,QAAMa,WAAWD,QAAQE,IAAR,iCAAjB;AACAC,WAAOF,SAASG,IAAT,CAAc,SAAd,CAAP,EAAiCC,OAAjC,CAAyC,CACvCzB,YADuC,EAEvC;AACEC,aAAOO,OAAO,CAAP,CADT;AAEEL,aAAOK,OAAO,CAAP;AAFT,KAFuC,EAMvC;AACEP,aAAOO,OAAO,CAAP,CADT;AAEEL,aAAOK,OAAO,CAAP;AAFT,KANuC,EAUvCJ,WAVuC,CAAzC;AAYD,GAjBD;;AAmBAe,KAAG,4BAAH,EAAiC,YAAM;AACrC,QAAMX,SAAS,CAAC,eAAD,EAAkB,YAAlB,CAAf;;AAEA,QAAMY,UAAUd,OAAO,EAAP,EAAWE,MAAX,CAAhB;AACA,QAAMa,WAAWD,QAAQE,IAAR,iCAAjB;AACAC,WAAOF,SAASG,IAAT,CAAc,SAAd,CAAP,EAAiCC,OAAjC,CAAyC,CAACzB,YAAD,EAAeI,WAAf,CAAzC;AACD,GAND;;AAQAe,KAAG,iDAAH,EAAsD,YAAM;AAC1D,QAAMD,UAAU,EAAEJ,aAAa,EAAf,EAAhB;AACA,QAAMM,UAAU,qBAAQ,+DAAqB,UAAUT,KAAKC,EAAL,EAA/B,GAAR,EAAsD;AACpEM;AADoE,KAAtD,CAAhB;AAGA,QAAMG,WAAWD,QAAQE,IAAR,iCAAjB;;AAEAC,WAAOF,SAASG,IAAT,CAAc,SAAd,EAAyB,CAAzB,CAAP,EAAoCC,OAApC,CAA4CzB,YAA5C;AACD,GARD;AASD,CA5DD","file":"MapboxTokenDropdown-test.js","sourcesContent":["import DropdownWithTextInput from \"../DropdownWithTextInput\";\nimport Environment from \"@common/utils/environment\";\nimport MapboxTokenDropdown, { customTokenLabel } from \"../MapboxTokenDropdown\";\nimport React from \"react\";\nimport { merge } from \"ramda\";\nimport { mockUser } from \"_utils/testUtils\";\nimport { shallow } from \"enzyme\";\n\nconst defaultToken = {\n  value: Environment.get(\"MAPBOX_DEFAULT_ACCESS_TOKEN\"),\n  label: \"Plotly token\",\n};\n\nconst customToken = {\n  value: \"custom\",\n  label: customTokenLabel,\n};\n\ndescribe(\"<MapboxTokenDropdown />\", () => {\n  function render(props, tokens = []) {\n    const mergeDefault = merge({\n      onChange: jest.fn(),\n      selectedToken: \"\",\n    });\n    const currentUser = mockUser({\n      feature_set_id: \"community\",\n      mapbox_access_tokens: tokens,\n    });\n\n    const finalProps = mergeDefault(props);\n    const context = { currentUser };\n\n    return shallow(<MapboxTokenDropdown {...finalProps} />, { context });\n  }\n\n  it(\"passes plotly token as default to dropdown\", () => {\n    const wrapper = render();\n    const dropdown = wrapper.find(DropdownWithTextInput);\n\n    expect(dropdown.prop(\"options\")).toEqual([defaultToken, customToken]);\n  });\n\n  it(\"correctly extracts mapbox tokens from currentUser\", () => {\n    const tokens = [\"pk.dank.memes\", \"pk.ay.lmao\"];\n\n    const wrapper = render({}, tokens);\n    const dropdown = wrapper.find(DropdownWithTextInput);\n    expect(dropdown.prop(\"options\")).toEqual([\n      defaultToken,\n      {\n        value: tokens[0],\n        label: tokens[0],\n      },\n      {\n        value: tokens[1],\n        label: tokens[1],\n      },\n      customToken,\n    ]);\n  });\n\n  it(\"filters out private tokens\", () => {\n    const tokens = [\"sk.dank.memes\", \"sk.ay.lmao\"];\n\n    const wrapper = render({}, tokens);\n    const dropdown = wrapper.find(DropdownWithTextInput);\n    expect(dropdown.prop(\"options\")).toEqual([defaultToken, customToken]);\n  });\n\n  it(\"only shows plotly icon if user is not logged in\", () => {\n    const context = { currentUser: {} };\n    const wrapper = shallow(<MapboxTokenDropdown onChange={jest.fn()} />, {\n      context,\n    });\n    const dropdown = wrapper.find(DropdownWithTextInput);\n\n    expect(dropdown.prop(\"options\")[0]).toEqual(defaultToken);\n  });\n});\n"]}