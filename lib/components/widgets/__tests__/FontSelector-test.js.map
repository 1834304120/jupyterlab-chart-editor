{"version":3,"sources":["../../../../src/components/widgets/__tests__/FontSelector-test.js"],"names":["jest","mock","describe","render","additionalProps","user","currentUser","feature_set_id","defaultProps","activeOption","onChange","fn","dispatch","context","props","it","wrapper","dropdown","ref","expect","toBeDefined","state","toEqual","not","toBeCalled","toBeCalledWith","setProps","newFont","expectedOption","label","value","key","fontList","forEach","font","toBe","freeFont","proFont","callArgs","calls","opts","showOnce"],"mappings":"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","file":"FontSelector-test.js","sourcesContent":["jest.mock(\"../../../../common/actions/notification\");\n\nimport FontSelector from \"../FontSelector\";\nimport React from \"react\";\nimport { MIXED_VALUES } from \"@workspace/constants/workspace\";\nimport { merge } from \"ramda\";\nimport { mockUser } from \"_utils/testUtils\";\nimport { mount } from \"enzyme\";\nimport { showNotification } from \"@common/actions/notification\";\n\ndescribe(\"FontSelector\", () => {\n  function render(additionalProps = {}, user = \"community\") {\n    const currentUser = mockUser({ feature_set_id: user });\n\n    const defaultProps = {\n      activeOption: \"Open Sans\",\n      onChange: jest.fn(),\n      dispatch: jest.fn(),\n    };\n\n    const context = { currentUser };\n\n    const props = merge(defaultProps, additionalProps);\n\n    return mount(<FontSelector {...props} />, { context });\n  }\n\n  it(\"passes on the new value on change and updates state\", () => {\n    const wrapper = render();\n    const dropdown = wrapper.ref(\"dropdown\");\n\n    expect(wrapper).toBeDefined();\n    expect(wrapper.state().activeOption).toEqual(\"Open Sans\");\n    expect(wrapper.props().onChange).not.toBeCalled();\n\n    dropdown.props().onChange(\"Droid Serif\");\n\n    expect(wrapper.props().onChange).toBeCalledWith(\"Droid Serif\");\n    expect(wrapper.state().activeOption).toEqual(\"Droid Serif\");\n  });\n\n  it(\"should update local state on new props from parent\", () => {\n    const wrapper = render();\n\n    expect(wrapper.state().activeOption).toEqual(\"Open Sans\");\n    wrapper.setProps({\n      activeOption: \"Raleway\",\n    });\n    expect(wrapper.state().activeOption).toEqual(\"Raleway\");\n  });\n\n  it(`When received null props from parents still updates\n        local state`, () => {\n    const wrapper = render();\n\n    expect(wrapper.state().activeOption).toEqual(\"Open Sans\");\n    wrapper.setProps({\n      activeOption: null,\n    });\n    expect(wrapper.state().activeOption).toEqual(null);\n  });\n\n  it(\"adds new fonts if they don't already exist\", () => {\n    const newFont = '\"Cindi Mayweather\", Arial';\n    const wrapper = render({ activeOption: newFont });\n    const expectedOption = {\n      label: \"Cindi Mayweather\",\n      value: newFont,\n      key: newFont,\n    };\n    expect(wrapper.state().activeOption).toEqual(expectedOption.value);\n    expect(wrapper.state().fontList[0]).toEqual(expectedOption);\n  });\n\n  it(\"adds new fonts if they don't already exist on re-render\", () => {\n    const newFont = '\"Cindi Mayweather\", Arial';\n    const expectedOption = {\n      label: \"Cindi Mayweather\",\n      value: newFont,\n      key: newFont,\n    };\n\n    const wrapper = render();\n    wrapper.setProps({ activeOption: newFont });\n\n    expect(wrapper.state().activeOption).toEqual(expectedOption.value);\n    expect(wrapper.state().fontList[0]).toEqual(expectedOption);\n  });\n\n  it(\"does not add MIXED_VALUES to the font list\", () => {\n    const value = MIXED_VALUES;\n\n    const wrapper = render();\n    wrapper.setProps({ activeOption: value });\n\n    wrapper.state().fontList.forEach(font => {\n      expect(font).not.toBe(value);\n    });\n  });\n\n  it(\"sets active option empty if MIXED_VALUES is passed\", () => {\n    const value = MIXED_VALUES;\n\n    const wrapper = render();\n    wrapper.setProps({ activeOption: value });\n\n    expect(wrapper.state().activeOption).toBe(\"\");\n  });\n\n  it(\"should not open upgrade dialogue if free font is selected\", () => {\n    const freeFont = \"Open Sans, To be Prettied\";\n\n    const wrapper = render();\n\n    const dropdown = wrapper.ref(\"dropdown\");\n    dropdown.props().onChange(freeFont);\n\n    expect(wrapper.props().dispatch).not.toBeCalled();\n  });\n\n  it(\"should open upgrade dialogue if pro font is selected\", () => {\n    const proFont = \"Overpass\";\n    const wrapper = render();\n\n    const dropdown = wrapper.ref(\"dropdown\");\n    dropdown.props().onChange(proFont);\n\n    const callArgs = showNotification.mock.calls[0];\n    const opts = callArgs[1];\n    expect(opts.showOnce).toBe(true);\n  });\n\n  it(\"should not open upgrade dialogue if logged in as pro\", () => {\n    const proFont = \"Overpass\";\n    const wrapper = render({}, \"professional_2016_10\");\n\n    const dropdown = wrapper.ref(\"dropdown\");\n    dropdown.props().onChange(proFont);\n\n    expect(wrapper.props().dispatch).not.toBeCalled();\n  });\n});\n"]}