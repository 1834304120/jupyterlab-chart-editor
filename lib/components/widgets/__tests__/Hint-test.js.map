{"version":3,"sources":["../../../../src/components/widgets/__tests__/Hint-test.js"],"names":["jest","useFakeTimers","HINT_DELAY","HintWrapper","state","hint","setState","describe","it","wrapper","expect","find","length","toBe","instance","setHint","runAllTimers"],"mappings":";;;;AAEA;;;;AACA;;;;AACA;;;;;;;;;;AAJAA,KAAKC,aAAL;;AAMA,IAAMC,aAAa,GAAnB;;IAEMC,W;;;AACJ,yBAAc;AAAA;;AAAA;;AAGZ,UAAKC,KAAL,GAAa,EAAEC,MAAM,EAAR,EAAb;AAHY;AAIb;;;;4BAEOA,I,EAAM;AACZ,WAAKC,QAAL,CAAc,EAAED,UAAF,EAAd;AACD;;;6BACQ;AACP,aAAO,gDAAM,MAAM,KAAKD,KAAL,CAAWC,IAAvB,EAA6B,mBAAmBH,UAAhD,GAAP;AACD;;;;;;AAGHK,SAAS,UAAT,EAAqB,YAAM;AACzBC,KAAG,aAAH,EAAkB,YAAM;AACtB,QAAMC,UAAU,mBAAM,8BAAC,WAAD,OAAN,CAAhB;;AAEA;AACAC,WAAOD,QAAQE,IAAR,iBAAmBC,MAA1B,EAAkCC,IAAlC,CAAuC,CAAvC;AACAH,WAAOD,QAAQE,IAAR,CAAa,eAAb,EAA8BC,MAArC,EAA6CC,IAA7C,CAAkD,CAAlD;;AAEAJ,YAAQK,QAAR,GAAmBC,OAAnB,CAA2B,OAA3B;;AAEA;AACAL,WAAOD,QAAQE,IAAR,CAAa,eAAb,EAA8BC,MAArC,EAA6CC,IAA7C,CAAkD,CAAlD;;AAEAb,SAAKgB,YAAL;;AAEA;AACAN,WAAOD,QAAQE,IAAR,CAAa,eAAb,EAA8BC,MAArC,EAA6CC,IAA7C,CAAkD,CAAlD;;AAEA;AACAJ,YAAQK,QAAR,GAAmBC,OAAnB,CAA2B,OAA3B;;AAEAL,WAAOD,QAAQE,IAAR,CAAa,eAAb,EAA8BC,MAArC,EAA6CC,IAA7C,CAAkD,CAAlD;AACAb,SAAKgB,YAAL;;AAEAN,WAAOD,QAAQE,IAAR,CAAa,eAAb,EAA8BC,MAArC,EAA6CC,IAA7C,CAAkD,CAAlD;AACD,GAxBD;AAyBD,CA1BD","file":"Hint-test.js","sourcesContent":["jest.useFakeTimers();\n\nimport Hint from \"../Hint\";\nimport React, { Component } from \"react\";\nimport { mount } from \"enzyme\";\n\nconst HINT_DELAY = 500;\n\nclass HintWrapper extends Component {\n  constructor() {\n    super();\n\n    this.state = { hint: \"\" };\n  }\n\n  setHint(hint) {\n    this.setState({ hint });\n  }\n  render() {\n    return <Hint hint={this.state.hint} delayMilliseconds={HINT_DELAY} />;\n  }\n}\n\ndescribe(\"<Hint />\", () => {\n  it(\"delays hint\", () => {\n    const wrapper = mount(<HintWrapper />);\n\n    // the hint is blank so we expect no hint to be shown\n    expect(wrapper.find(Hint).length).toBe(1);\n    expect(wrapper.find(\".hint--always\").length).toBe(0);\n\n    wrapper.instance().setHint(\"hodor\");\n\n    // the hint has a delay so we expect the hint to still not be shown\n    expect(wrapper.find(\".hint--always\").length).toBe(0);\n\n    jest.runAllTimers();\n\n    // now it will have run the hint and will show the hint\n    expect(wrapper.find(\".hint--always\").length).toBe(1);\n\n    // rerendering the hint will result in no hint until the timer once again fires\n    wrapper.instance().setHint(\"modor\");\n\n    expect(wrapper.find(\".hint--always\").length).toBe(0);\n    jest.runAllTimers();\n\n    expect(wrapper.find(\".hint--always\").length).toBe(1);\n  });\n});\n"]}