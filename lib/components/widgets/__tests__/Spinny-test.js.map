{"version":3,"sources":["../../../../src/components/widgets/__tests__/Spinny-test.js"],"names":["describe","React","ReactDOM","Spinny","TestUtils","render","props","renderIntoDocument","beforeEach","require","it","component","expect","refs","loadingIndicator","toBeDefined","spinnyElement","findRenderedDOMComponentWithClass","className","toEqual","size","text","textIndicator","not"],"mappings":";;AAAAA,SAAS,QAAT,EAAmB,YAAM;AACvB,MAAIC,cAAJ;AACA,MAAIC,iBAAJ;AACA,MAAIC,eAAJ;AACA,MAAIC,kBAAJ;;AAEA,WAASC,MAAT,CAAgBC,KAAhB,EAAuB;AACrB,WAAOF,UAAUG,kBAAV,CAA6B,oBAAC,MAAD,EAAYD,KAAZ,CAA7B,CAAP;AACD;;AAEDE,aAAW,YAAM;AACfP,YAAQQ,QAAQ,OAAR,CAAR;AACAP,eAAWO,QAAQ,WAAR,CAAX;AACAN,aAASM,QAAQ,WAAR,CAAT;AACAL,gBAAYK,QAAQ,sBAAR,CAAZ;AACD,GALD;;AAOAT,WAAS,WAAT,EAAsB,YAAM;AAC1BU,OAAG,0CAAH,EAA+C,YAAM;AACnD,UAAMC,YAAYN,QAAlB;AACAO,aAAOD,UAAUE,IAAV,CAAeC,gBAAtB,EAAwCC,WAAxC;AACA,UAAMC,gBAAgBZ,UAAUa,iCAAV,CACpBN,SADoB,EAEpB,QAFoB,CAAtB;AAIAC,aAAOI,cAAcE,SAArB,EAAgCC,OAAhC,CAAwC,QAAxC;AACD,KARD;;AAUAT,OAAG,yCAAH,EAA8C,YAAM;AAClD,UAAMC,YAAYN,OAAO,EAAEe,MAAM,MAAR,EAAP,CAAlB;AACAR,aAAOD,UAAUE,IAAV,CAAeC,gBAAtB,EAAwCC,WAAxC;AACA,UAAMC,gBAAgBZ,UAAUa,iCAAV,CACpBN,SADoB,EAEpB,aAFoB,CAAtB;AAIAC,aAAOI,cAAcE,SAArB,EAAgCC,OAAhC,CAAwC,aAAxC;AACD,KARD;;AAUAT,OAAG,yCAAH,EAA8C,YAAM;AAClD,UAAMC,YAAYN,OAAO,EAAEe,MAAM,OAAR,EAAP,CAAlB;AACAR,aAAOD,UAAUE,IAAV,CAAeC,gBAAtB,EAAwCC,WAAxC;AACA,UAAMC,gBAAgBZ,UAAUa,iCAAV,CACpBN,SADoB,EAEpB,cAFoB,CAAtB;AAIAC,aAAOI,cAAcE,SAArB,EAAgCC,OAAhC,CAAwC,cAAxC;AACD,KARD;;AAUAT,OAAG,iCAAH,EAAsC,YAAM;AAC1C,UAAMC,YAAYN,OAAO,EAAEgB,MAAM,0BAAR,EAAP,CAAlB;AACAT,aAAOD,UAAUE,IAAV,CAAeS,aAAtB,EAAqCP,WAArC;AACD,KAHD;;AAKAL,OAAG,6CAAH,EAAkD,YAAM;AACtD,UAAMC,YAAYN,OAAO,EAAEgB,MAAM,IAAR,EAAP,CAAlB;AACAT,aAAOD,UAAUE,IAAV,CAAeS,aAAtB,EAAqCC,GAArC,CAAyCR,WAAzC;AACD,KAHD;AAID,GAxCD;AAyCD,CA1DD","file":"Spinny-test.js","sourcesContent":["describe(\"Spinny\", () => {\n  let React;\n  let ReactDOM;\n  let Spinny;\n  let TestUtils;\n\n  function render(props) {\n    return TestUtils.renderIntoDocument(<Spinny {...props} />);\n  }\n\n  beforeEach(() => {\n    React = require(\"react\");\n    ReactDOM = require(\"react-dom\");\n    Spinny = require(\"../Spinny\");\n    TestUtils = require(\"react-dom/test-utils\");\n  });\n\n  describe(\"rendering\", () => {\n    it(\"Renders the spinny with the default size\", () => {\n      const component = render();\n      expect(component.refs.loadingIndicator).toBeDefined();\n      const spinnyElement = TestUtils.findRenderedDOMComponentWithClass(\n        component,\n        \"spinny\"\n      );\n      expect(spinnyElement.className).toEqual(\"spinny\");\n    });\n\n    it(\"Renders the spinny with the right class\", () => {\n      const component = render({ size: \"tiny\" });\n      expect(component.refs.loadingIndicator).toBeDefined();\n      const spinnyElement = TestUtils.findRenderedDOMComponentWithClass(\n        component,\n        \"spinny tiny\"\n      );\n      expect(spinnyElement.className).toEqual(\"spinny tiny\");\n    });\n\n    it(\"Renders the spinny with the right class\", () => {\n      const component = render({ size: \"large\" });\n      expect(component.refs.loadingIndicator).toBeDefined();\n      const spinnyElement = TestUtils.findRenderedDOMComponentWithClass(\n        component,\n        \"spinny large\"\n      );\n      expect(spinnyElement.className).toEqual(\"spinny large\");\n    });\n\n    it(\"Renders text if it is passed in\", () => {\n      const component = render({ text: \"This is a string of text\" });\n      expect(component.refs.textIndicator).toBeDefined();\n    });\n\n    it(\"Does not render text if it is not passed in\", () => {\n      const component = render({ text: null });\n      expect(component.refs.textIndicator).not.toBeDefined();\n    });\n  });\n});\n"]}