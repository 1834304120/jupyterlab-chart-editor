{"version":3,"sources":["../../../../src/components/widgets/__tests__/RadioItems-test.js"],"names":["jest","dontMock","describe","RadioItems","React","ReactDOM","TestUtils","beforeEach","require","render","props","onOptionChange","genMockFn","options","value","label","activeOption","renderIntoDocument","it","component","expect","refs","Bing","checked","toEqual","Bang","Simulate","change","target","toBeCalledWith","icon","iconOption","toBeDefined","textOption","not"],"mappings":";;AAEA;;;;;;AAFAA,KAAKC,QAAL,CAAc,eAAd;;AAIAC,SAAS,YAAT,EAAuB,YAAM;AAC3B,MAAIC,mBAAJ;AACA,MAAIC,cAAJ;AACA,MAAIC,iBAAJ;AACA,MAAIC,kBAAJ;;AAEAC,aAAW,YAAM;AACfJ,iBAAaK,QAAQ,eAAR,CAAb;AACAJ,YAAQI,QAAQ,OAAR,CAAR;AACAH,eAAWG,QAAQ,WAAR,CAAX;AACAF,gBAAYE,QAAQ,sBAAR,CAAZ;AACD,GALD;;AAOA,WAASC,MAAT,CAAgBC,KAAhB,EAAuB;AACrB,QAAMC,iBAAiBX,KAAKY,SAAL,EAAvB;;AAEA,QAAIF,QAAQ,0BACV;AACEG,eAAS,CACP,EAAEC,OAAO,IAAT,EAAeC,OAAO,MAAtB,EADO,EAEP,EAAED,OAAO,KAAT,EAAgBC,OAAO,MAAvB,EAFO,CADX;AAKEJ,sBAAgBA,cALlB;AAMEK,oBAAc;AANhB,KADU,EASVN,SAAS,EATC,CAAZ;;AAYA,WAAOJ,UAAUW,kBAAV,CAA6B,oBAAC,UAAD,EAAgBP,KAAhB,CAA7B,CAAP;AACD;;AAEDQ,KAAG,4CAAH,EAAiD,YAAM;AACrD,QAAMC,YAAYV,QAAlB;;AAEA;AACAW,WAAOD,UAAUE,IAAV,CAAeC,IAAf,CAAoBC,OAA3B,EAAoCC,OAApC,CAA4C,IAA5C;AACAJ,WAAOD,UAAUE,IAAV,CAAeI,IAAf,CAAoBF,OAA3B,EAAoCC,OAApC,CAA4C,KAA5C;AACD,GAND;;AAQAN,KAAG,kDAAH,EAAuD,YAAM;AAC3D,QAAMC,YAAYV,QAAlB;;AAEA;AACAH,cAAUoB,QAAV,CAAmBC,MAAnB,CAA0BR,UAAUE,IAAV,CAAeC,IAAzC,EAA+C;AAC7CM,cAAQT,UAAUE,IAAV,CAAeC;AADsB,KAA/C;AAGAF,WAAOD,UAAUT,KAAV,CAAgBC,cAAvB,EAAuCkB,cAAvC,CAAsD,IAAtD;;AAEAvB,cAAUoB,QAAV,CAAmBC,MAAnB,CAA0BR,UAAUE,IAAV,CAAeI,IAAzC,EAA+C;AAC7CG,cAAQT,UAAUE,IAAV,CAAeI;AADsB,KAA/C;AAGAL,WAAOD,UAAUT,KAAV,CAAgBC,cAAvB,EAAuCkB,cAAvC,CAAsD,KAAtD;AACD,GAbD;;AAeAX,KAAG,gDAAH,EAAqD,YAAM;AACzD,QAAMC,YAAYV,OAAO;AACvBI,eAAS,CACP,EAAEC,OAAO,IAAT,EAAeC,OAAO,MAAtB,EAA8Be,MAAM,iBAApC,EADO,EAEP,EAAEhB,OAAO,KAAT,EAAgBC,OAAO,MAAvB,EAA+Be,MAAM,kBAArC,EAFO;AADc,KAAP,CAAlB;;AAOA;AACAV,WAAOD,UAAUE,IAAV,CAAeU,UAAtB,EAAkCC,WAAlC;AACAZ,WAAOD,UAAUE,IAAV,CAAeY,UAAtB,EAAkCC,GAAlC,CAAsCF,WAAtC;AACD,GAXD;;AAaAd,KAAG,kDAAH,EAAuD,YAAM;AAC3D,QAAMC,YAAYV,OAAO;AACvBI,eAAS,CACP,EAAEC,OAAO,IAAT,EAAeC,OAAO,MAAtB,EADO,EAEP,EAAED,OAAO,KAAT,EAAgBC,OAAO,MAAvB,EAFO;AADc,KAAP,CAAlB;;AAOA;AACAK,WAAOD,UAAUE,IAAV,CAAeU,UAAtB,EAAkCG,GAAlC,CAAsCF,WAAtC;AACAZ,WAAOD,UAAUE,IAAV,CAAeY,UAAtB,EAAkCD,WAAlC;AACD,GAXD;AAYD,CA/ED","file":"RadioItems-test.js","sourcesContent":["jest.dontMock(\"../RadioItems\");\n\nimport deepAssign from \"assign-deep\";\n\ndescribe(\"RadioItems\", () => {\n  let RadioItems;\n  let React;\n  let ReactDOM;\n  let TestUtils;\n\n  beforeEach(() => {\n    RadioItems = require(\"../RadioItems\");\n    React = require(\"react\");\n    ReactDOM = require(\"react-dom\");\n    TestUtils = require(\"react-dom/test-utils\");\n  });\n\n  function render(props) {\n    const onOptionChange = jest.genMockFn();\n\n    var props = deepAssign(\n      {\n        options: [\n          { value: true, label: \"Bing\" },\n          { value: false, label: \"Bang\" },\n        ],\n        onOptionChange: onOptionChange,\n        activeOption: true,\n      },\n      props || {}\n    );\n\n    return TestUtils.renderIntoDocument(<RadioItems {...props} />);\n  }\n\n  it(\"Default active option is correctly checked\", () => {\n    const component = render();\n\n    // Make sure that default active option is correctly 'checked'\n    expect(component.refs.Bing.checked).toEqual(true);\n    expect(component.refs.Bang.checked).toEqual(false);\n  });\n\n  it(\"component onChange fires our onOptionChange prop\", () => {\n    const component = render();\n\n    // Make sure that component onChange fires our onOptionChange prop\n    TestUtils.Simulate.change(component.refs.Bing, {\n      target: component.refs.Bing,\n    });\n    expect(component.props.onOptionChange).toBeCalledWith(true);\n\n    TestUtils.Simulate.change(component.refs.Bang, {\n      target: component.refs.Bang,\n    });\n    expect(component.props.onOptionChange).toBeCalledWith(false);\n  });\n\n  it(\"returns the icon layout if icons are passed in\", () => {\n    const component = render({\n      options: [\n        { value: true, label: \"Bing\", icon: \"icon-align-left\" },\n        { value: false, label: \"Bang\", icon: \"icon-align-right\" },\n      ],\n    });\n\n    // Make sure that default active option is correctly 'checked'\n    expect(component.refs.iconOption).toBeDefined();\n    expect(component.refs.textOption).not.toBeDefined();\n  });\n\n  it(\"return the text layout if no icons are passed in\", () => {\n    const component = render({\n      options: [\n        { value: true, label: \"Bing\" },\n        { value: false, label: \"Bang\" },\n      ],\n    });\n\n    // Make sure that default active option is correctly 'checked'\n    expect(component.refs.iconOption).not.toBeDefined();\n    expect(component.refs.textOption).toBeDefined();\n  });\n});\n"]}