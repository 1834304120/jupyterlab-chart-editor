{"version":3,"sources":["../../../../src/components/widgets/__tests__/CategorizedSelectTrace-test.js"],"names":["describe","chartTypes","Object","keys","chartOptions","map","chartType","meta","label","type","value","disabled","labelToChartType","optionDOM","text","matchingChartTypes","filter","length","Error","render","overrideProps","traceOptions","fromJS","defaultProps","traceSelectHandler","jest","fn","selectedTraceValue","isOpen","onMenuToggle","props","merge","wrapper","setProps","prop","findOverlay","find","toggleOverlay","ref","simulate","overlayCountIs","count","expect","toBe","triggerWindowClick","evt","document","createEvent","initEvent","window","dispatchEvent","triggerEscKeyPress","keyCode","it","spiedHandler","firstOptionButton","first","toBeCalledWith","disabledOptions","assoc","not","toBeCalled","optionButtons","renderedCharts","sort","sortedChartTypes","clone","toEqual","forEach","column","category"],"mappings":"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","file":"CategorizedSelectTrace-test.js","sourcesContent":["\nimport CategorizedSelectTrace, {ESC_KEYCODE} from '../CategorizedSelectTrace';\nimport Immutable from 'immutable';\nimport R from 'ramda';\nimport React from 'react';\nimport {CATEGORY_LAYOUT} from '@workspace/constants/workspace';\nimport {GET_ENCODING_SCHEMA} from '@workspace/constants/graphTable';\nimport {mount} from 'enzyme';\n\ndescribe('CategorizedSelectTrace', () => {\n    const chartTypes = Object.keys(GET_ENCODING_SCHEMA());\n\n    const chartOptions = chartTypes.map(chartType => {\n        const {label, type} = GET_ENCODING_SCHEMA()[chartType].meta;\n\n        return {\n            type,\n            label,\n            value: type,\n            disabled: false\n        };\n    });\n\n    // Given a chart button DOM element, find the chart Type.\n    function labelToChartType(optionDOM) {\n        const label = optionDOM.text();\n        const matchingChartTypes = chartTypes.filter(type => {\n            return GET_ENCODING_SCHEMA()[type].meta.label === label;\n        });\n\n        if (matchingChartTypes.length > 0) {\n            return matchingChartTypes[0];\n        }\n\n        throw new Error(`Cannot find chart type for ${label}.`);\n    }\n\n    function render(overrideProps = {}) {\n        const traceOptions = Immutable.fromJS(chartOptions);\n        const defaultProps = {\n            traceSelectHandler: jest.fn(),\n            selectedTraceValue: 'scatter',\n            traceOptions,\n            isOpen: false,\n            onMenuToggle: jest.fn()\n        };\n\n        const props = R.merge(defaultProps, overrideProps);\n\n        const wrapper = mount(\n            <CategorizedSelectTrace {...props}/>\n        );\n\n        const onMenuToggle = jest.fn(() => {\n            wrapper.setProps({isOpen: !wrapper.prop('isOpen')});\n        });\n\n        wrapper.setProps({onMenuToggle});\n        return wrapper;\n    }\n\n    function findOverlay(wrapper) {\n        return wrapper.find('.categorized-select-trace__overlay');\n    }\n\n    function toggleOverlay(wrapper) {\n        wrapper.ref('input').simulate('click');\n    }\n\n    function overlayCountIs(wrapper, count) {\n        expect(findOverlay(wrapper).length).toBe(count);\n    }\n\n    function triggerWindowClick() {\n        const evt = document.createEvent('HTMLEvents');\n        evt.initEvent('click', false, true);\n        window.dispatchEvent(evt);\n    }\n\n    function triggerEscKeyPress() {\n        const evt = document.createEvent('HTMLEvents');\n        evt.initEvent('keydown', false, true);\n        evt.keyCode = ESC_KEYCODE;\n        window.dispatchEvent(evt);\n    }\n\n    it('toggles the menu if you click the chart input', () => {\n        const wrapper = render();\n        toggleOverlay(wrapper);\n        overlayCountIs(wrapper, 1);\n        toggleOverlay(wrapper);\n        overlayCountIs(wrapper, 0);\n    });\n\n    it('closes the chart menu if you click outside the menu', () => {\n        const wrapper = render();\n        toggleOverlay(wrapper);\n        overlayCountIs(wrapper, 1);\n        triggerWindowClick();\n        overlayCountIs(wrapper, 0);\n    });\n\n    it('closes the chart menu if you press escape', () => {\n        const wrapper = render();\n        toggleOverlay(wrapper);\n        overlayCountIs(wrapper, 1);\n        triggerEscKeyPress();\n        overlayCountIs(wrapper, 0);\n    });\n\n    it('fires selection handler when a non-disabled button is clicked.', () => {\n        const spiedHandler = jest.fn();\n        const wrapper = render({traceSelectHandler: spiedHandler});\n\n        wrapper.ref('input').simulate('click');\n\n        const firstOptionButton = wrapper\n            .find('.categorized-select-trace__overlay__option').first();\n\n        firstOptionButton.simulate('click');\n\n        // expect(spiedHandler).toBeCalled();\n        // Make sure handler is passed the correspending button's chart type.\n        expect(spiedHandler)\n            .toBeCalledWith(labelToChartType(firstOptionButton));\n    });\n\n    it(`won't fire selection handler when a\n        disabled button is clicked.`, () => {\n        const spiedHandler = jest.fn();\n        const disabledOptions = R.map(R.assoc('disabled', true), chartOptions);\n\n        const wrapper = render({\n            traceSelectHandler: spiedHandler,\n            traceOptions: Immutable.fromJS(disabledOptions)\n        });\n\n        wrapper.ref('input').simulate('click');\n\n        const firstOptionButton = wrapper\n            .find('.categorized-select-trace__overlay__option').first();\n\n        firstOptionButton.simulate('click');\n\n        expect(spiedHandler).not.toBeCalled();\n    });\n\n    it('renders all charts in the dropdown menu', () => {\n        const wrapper = render();\n\n        wrapper.ref('input').simulate('click');\n\n        const optionButtons = wrapper\n                .find('.categorized-select-trace__overlay__option');\n        const renderedCharts = optionButtons.map(labelToChartType).sort();\n        const sortedChartTypes = R.clone(chartTypes).sort();\n        expect(renderedCharts).toEqual(sortedChartTypes);\n    });\n\n    it('renders buttons in the right categories', () => {\n        const wrapper = render();\n\n        wrapper.ref('input').simulate('click');\n\n        // Check if all rendered charts are under the right columns.\n        CATEGORY_LAYOUT.forEach(column => {\n            wrapper.ref(column.category)\n                .find('.categorized-select-trace__overlay__option')\n                .map(labelToChartType)\n                .forEach(chartType => {\n                    const category = GET_ENCODING_SCHEMA()[chartType].meta.category;\n                    expect(category).toEqual(column.category);\n                });\n        });\n    });\n});\n"]}