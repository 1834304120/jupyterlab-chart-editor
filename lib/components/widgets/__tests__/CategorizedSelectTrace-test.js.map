{"version":3,"sources":["../../../../src/components/widgets/__tests__/CategorizedSelectTrace-test.js"],"names":["describe","chartTypes","Object","keys","chartOptions","map","chartType","meta","label","type","value","disabled","labelToChartType","optionDOM","text","matchingChartTypes","filter","length","Error","render","overrideProps","traceOptions","fromJS","defaultProps","traceSelectHandler","jest","fn","selectedTraceValue","isOpen","onMenuToggle","props","merge","wrapper","setProps","prop","findOverlay","find","toggleOverlay","ref","simulate","overlayCountIs","count","expect","toBe","triggerWindowClick","evt","document","createEvent","initEvent","window","dispatchEvent","triggerEscKeyPress","keyCode","it","spiedHandler","firstOptionButton","first","toBeCalledWith","disabledOptions","assoc","not","toBeCalled","optionButtons","renderedCharts","sort","sortedChartTypes","clone","toEqual","forEach","column","category"],"mappings":"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","file":"CategorizedSelectTrace-test.js","sourcesContent":["import CategorizedSelectTrace, { ESC_KEYCODE } from \"../CategorizedSelectTrace\";\nimport Immutable from \"immutable\";\nimport R from \"ramda\";\nimport React from \"react\";\nimport { CATEGORY_LAYOUT } from \"@workspace/constants/workspace\";\nimport { GET_ENCODING_SCHEMA } from \"@workspace/constants/graphTable\";\nimport { mount } from \"enzyme\";\n\ndescribe(\"CategorizedSelectTrace\", () => {\n  const chartTypes = Object.keys(GET_ENCODING_SCHEMA());\n\n  const chartOptions = chartTypes.map(chartType => {\n    const { label, type } = GET_ENCODING_SCHEMA()[chartType].meta;\n\n    return {\n      type,\n      label,\n      value: type,\n      disabled: false,\n    };\n  });\n\n  // Given a chart button DOM element, find the chart Type.\n  function labelToChartType(optionDOM) {\n    const label = optionDOM.text();\n    const matchingChartTypes = chartTypes.filter(type => {\n      return GET_ENCODING_SCHEMA()[type].meta.label === label;\n    });\n\n    if (matchingChartTypes.length > 0) {\n      return matchingChartTypes[0];\n    }\n\n    throw new Error(`Cannot find chart type for ${label}.`);\n  }\n\n  function render(overrideProps = {}) {\n    const traceOptions = Immutable.fromJS(chartOptions);\n    const defaultProps = {\n      traceSelectHandler: jest.fn(),\n      selectedTraceValue: \"scatter\",\n      traceOptions,\n      isOpen: false,\n      onMenuToggle: jest.fn(),\n    };\n\n    const props = R.merge(defaultProps, overrideProps);\n\n    const wrapper = mount(<CategorizedSelectTrace {...props} />);\n\n    const onMenuToggle = jest.fn(() => {\n      wrapper.setProps({ isOpen: !wrapper.prop(\"isOpen\") });\n    });\n\n    wrapper.setProps({ onMenuToggle });\n    return wrapper;\n  }\n\n  function findOverlay(wrapper) {\n    return wrapper.find(\".categorized-select-trace__overlay\");\n  }\n\n  function toggleOverlay(wrapper) {\n    wrapper.ref(\"input\").simulate(\"click\");\n  }\n\n  function overlayCountIs(wrapper, count) {\n    expect(findOverlay(wrapper).length).toBe(count);\n  }\n\n  function triggerWindowClick() {\n    const evt = document.createEvent(\"HTMLEvents\");\n    evt.initEvent(\"click\", false, true);\n    window.dispatchEvent(evt);\n  }\n\n  function triggerEscKeyPress() {\n    const evt = document.createEvent(\"HTMLEvents\");\n    evt.initEvent(\"keydown\", false, true);\n    evt.keyCode = ESC_KEYCODE;\n    window.dispatchEvent(evt);\n  }\n\n  it(\"toggles the menu if you click the chart input\", () => {\n    const wrapper = render();\n    toggleOverlay(wrapper);\n    overlayCountIs(wrapper, 1);\n    toggleOverlay(wrapper);\n    overlayCountIs(wrapper, 0);\n  });\n\n  it(\"closes the chart menu if you click outside the menu\", () => {\n    const wrapper = render();\n    toggleOverlay(wrapper);\n    overlayCountIs(wrapper, 1);\n    triggerWindowClick();\n    overlayCountIs(wrapper, 0);\n  });\n\n  it(\"closes the chart menu if you press escape\", () => {\n    const wrapper = render();\n    toggleOverlay(wrapper);\n    overlayCountIs(wrapper, 1);\n    triggerEscKeyPress();\n    overlayCountIs(wrapper, 0);\n  });\n\n  it(\"fires selection handler when a non-disabled button is clicked.\", () => {\n    const spiedHandler = jest.fn();\n    const wrapper = render({ traceSelectHandler: spiedHandler });\n\n    wrapper.ref(\"input\").simulate(\"click\");\n\n    const firstOptionButton = wrapper\n      .find(\".categorized-select-trace__overlay__option\")\n      .first();\n\n    firstOptionButton.simulate(\"click\");\n\n    // expect(spiedHandler).toBeCalled();\n    // Make sure handler is passed the correspending button's chart type.\n    expect(spiedHandler).toBeCalledWith(labelToChartType(firstOptionButton));\n  });\n\n  it(`won't fire selection handler when a\n        disabled button is clicked.`, () => {\n    const spiedHandler = jest.fn();\n    const disabledOptions = R.map(R.assoc(\"disabled\", true), chartOptions);\n\n    const wrapper = render({\n      traceSelectHandler: spiedHandler,\n      traceOptions: Immutable.fromJS(disabledOptions),\n    });\n\n    wrapper.ref(\"input\").simulate(\"click\");\n\n    const firstOptionButton = wrapper\n      .find(\".categorized-select-trace__overlay__option\")\n      .first();\n\n    firstOptionButton.simulate(\"click\");\n\n    expect(spiedHandler).not.toBeCalled();\n  });\n\n  it(\"renders all charts in the dropdown menu\", () => {\n    const wrapper = render();\n\n    wrapper.ref(\"input\").simulate(\"click\");\n\n    const optionButtons = wrapper.find(\n      \".categorized-select-trace__overlay__option\"\n    );\n    const renderedCharts = optionButtons.map(labelToChartType).sort();\n    const sortedChartTypes = R.clone(chartTypes).sort();\n    expect(renderedCharts).toEqual(sortedChartTypes);\n  });\n\n  it(\"renders buttons in the right categories\", () => {\n    const wrapper = render();\n\n    wrapper.ref(\"input\").simulate(\"click\");\n\n    // Check if all rendered charts are under the right columns.\n    CATEGORY_LAYOUT.forEach(column => {\n      wrapper\n        .ref(column.category)\n        .find(\".categorized-select-trace__overlay__option\")\n        .map(labelToChartType)\n        .forEach(chartType => {\n          const category = GET_ENCODING_SCHEMA()[chartType].meta.category;\n          expect(category).toEqual(column.category);\n        });\n    });\n  });\n});\n"]}