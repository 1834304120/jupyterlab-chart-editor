{"version":3,"sources":["../../../src/components/widgets/ArrowSelector.js"],"names":["ArrowSelector","props","state","activeOption","onSelect","bind","arrowGenerator","renderOption","renderValue","nextProps","setState","Plotly","arrowArray","Annotations","ARROWPATHS","allArrows","map","position","top","fill","each","path","opacity","strokeWidth","index","label","value","key","chosenArrow","onChange","option","propTypes","number","func","object","isRequired","module","exports"],"mappings":"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","file":"ArrowSelector.js","sourcesContent":["import Dropdown from \"./Dropdown\";\nimport React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { MIXED_VALUES } from \"@workspace/constants/workspace\";\n\nclass ArrowSelector extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      activeOption: this.props.activeOption || 0,\n    };\n    this.onSelect = this.onSelect.bind(this);\n    this.arrowGenerator = this.arrowGenerator.bind(this);\n    this.renderOption = this.renderOption.bind(this);\n    this.renderValue = this.renderValue.bind(this);\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.activeOption === MIXED_VALUES) {\n      // set the active option empty if it is MIXED_VALUES\n      this.setState({\n        activeOption: \"\",\n      });\n      return;\n    }\n\n    // Reset the value to the graph's actual value\n    if (nextProps.activeOption !== this.state.activeOption) {\n      this.setState({\n        activeOption: nextProps.activeOption,\n      });\n    }\n  }\n\n  arrowGenerator() {\n    const { Plotly } = this.props;\n    const arrowArray = Plotly.Annotations.ARROWPATHS;\n    const allArrows = arrowArray.map(each => {\n      return (\n        <svg\n          width=\"40\"\n          height=\"20\"\n          data-arrowhead=\"1\"\n          style={{ position: \"relative\", top: \"5px\" }}\n        >\n          <line\n            stroke=\"rgb(68, 68, 68)\"\n            style={{ fill: \"none\" }}\n            x1=\"5\"\n            y1=\"10\"\n            x2=\"23.8\"\n            y2=\"10\"\n            strokeWidth=\"2\"\n          />\n          <path\n            d={each.path}\n            transform=\"translate(23.8,10)rotate(360)scale(2)\"\n            style={{ fill: \"rgb(68, 68, 68)\", opacity: 1, strokeWidth: 0 }}\n          />\n        </svg>\n      );\n    });\n\n    return allArrows.map((each, index) => {\n      return {\n        label: each,\n        value: index,\n        key: \"arrow\" + index,\n      };\n    });\n  }\n\n  onSelect(chosenArrow) {\n    this.setState({\n      activeOption: chosenArrow,\n    });\n\n    this.props.onChange(chosenArrow);\n  }\n\n  renderOption(option) {\n    return (\n      <li className=\"+ls-none\">\n        <div className=\"+push-quarter-left\">{option.label}</div>\n      </li>\n    );\n  }\n\n  renderValue(option) {\n    return <div>{option.label}</div>;\n  }\n\n  render() {\n    return (\n      <span className=\"widget-dropdown\">\n        <Dropdown\n          ref=\"dropdown\"\n          value={this.state.activeOption}\n          options={this.arrowGenerator()}\n          onChange={this.onSelect}\n          clearable={false}\n          optionRenderer={this.renderOption}\n          valueRenderer={this.renderValue}\n          valueKey={\"value\"}\n          minWidth={\"100%\"}\n        />\n      </span>\n    );\n  }\n}\n\nArrowSelector.propTypes = {\n  activeOption: PropTypes.number,\n  onChange: PropTypes.func,\n  Plotly: PropTypes.object.isRequired,\n};\n\nmodule.exports = ArrowSelector;\n"]}