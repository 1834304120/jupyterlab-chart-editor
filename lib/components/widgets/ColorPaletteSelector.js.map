{"version":3,"sources":["../../../src/components/widgets/ColorPaletteSelector.js"],"names":["HEIGHT","WIDTH","STANDARD_COLORSCALE_LENGTH","length","ColorPaletteSelector","props","colorscales","interpolated","map","colorscale","colorpair","state","newColorScale","Array","isArray","Plotly","plotly","Colorscale","scales","i","j","firstColorsMatch","unshift","setState","addColorScale","nextProps","newColorscale","key","colorscaleLength","isGrouped","userDataIndex","isPie","currentColorscale","scaleWithBreakpoints","color","index","scaleFunc","makeColorScaleFunc","extractScale","_","colorblocks","colorBlockStyle","height","backgroundColor","width","onClick","colorpanels","_renderColorScale","marginLeft","marginRight","propTypes","oneOfType","arrayOf","string","number","func","bool","PropTypes","array","isRequired","defaultProps"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;;;;;AAEA,IAAMA,SAAS,EAAf;AACA,IAAMC,QAAQ,EAAd;AACA,IAAMC,6BAA6B,gBAAa,CAAb,EAAgBC,MAAnD;;IAEqBC,oB;;;AACnB,gCAAYC,KAAZ,EAAmB;AAAA;;AAAA,4IACXA,KADW;;AAGjB,QAAIC,oBAAJ;AACA,QAAI,MAAKD,KAAL,CAAWE,YAAf,EAA6B;AAC3BD;AACD,KAFD,MAEO;AACL;AACAA,oBAAc,gBAAaE,GAAb,CAAiB;AAAA,eAC7BC,WAAWD,GAAX,CAAe;AAAA,iBAAaE,UAAU,CAAV,CAAb;AAAA,SAAf,CAD6B;AAAA,OAAjB,CAAd;AAGD;;AAED,UAAKC,KAAL,GAAa,EAAEL,wBAAF,EAAb;AAbiB;AAclB;;AAED;;;;;;;kCAGcM,a,EAAe;AAC3B,UAAI,CAACA,aAAD,IAAkBA,cAAcT,MAAd,KAAyB,CAA/C,EAAkD;AAChD;AACD,OAFD,MAEO,IAAI,CAACU,MAAMC,OAAN,CAAcF,aAAd,CAAL,EAAmC;AACxC,YAAMG,SAAS,sBAAYC,MAA3B;AACAJ,wBAAgBG,OAAOE,UAAP,CAAkBC,MAAlB,CAAyBN,aAAzB,CAAhB;AACD;;AAED,UAAMN,cAAc,KAAKK,KAAL,CAAWL,WAA/B;;AAEA,WAAK,IAAIa,IAAI,CAAb,EAAgBA,IAAIb,YAAYH,MAAhC,EAAwCgB,GAAxC,EAA6C;AAC3C,YAAMV,aAAaH,YAAYa,CAAZ,CAAnB;AACA,YAAIV,WAAWN,MAAX,KAAsBS,cAAcT,MAAxC,EAAgD;AAC9C,eAAK,IAAIiB,IAAI,CAAb,EAAgBA,IAAIX,WAAWN,MAA/B,EAAuCiB,GAAvC,EAA4C;AAC1C,gBACE,KAAKf,KAAL,CAAWE,YAAX,IACAE,WAAWW,CAAX,EAAc,CAAd,MAAqBR,cAAcQ,CAAd,EAAiB,CAAjB,CADrB,IAEAX,WAAWW,CAAX,EAAc,CAAd,MAAqBR,cAAcQ,CAAd,EAAiB,CAAjB,CAHvB,EAIE;AACA;AACA;AACD,aAPD,MAOO,IACL,CAAC,KAAKf,KAAL,CAAWE,YAAZ,IACAE,WAAWW,CAAX,MAAkBR,cAAcQ,CAAd,CAFb,EAGL;AACA;AACD;AACF;AACF,SAhBD,MAgBO;AACL;;;;;;AAMA,cAAIC,mBAAmBZ,WAAW,CAAX,EAAc,CAAd,MAAqBG,cAAc,CAAd,EAAiB,CAAjB,CAA5C;;AAEA,cAAI,CAAC,KAAKP,KAAL,CAAWE,YAAhB,EAA8B;AAC5Bc,+BAAmBZ,WAAW,CAAX,MAAkBG,cAAc,CAAd,CAArC;AACD;;AAED,cAAIS,gBAAJ,EAAsB;AACpB;AACD;AACF;AACF;;AAED;AACAf,kBAAYgB,OAAZ,CAAoBV,aAApB;AACA,WAAKW,QAAL,CAAc,EAAEjB,wBAAF,EAAd;AACD;;;yCAEoB;AACnB,WAAKkB,aAAL,CAAmB,KAAKnB,KAAL,CAAWI,UAA9B;AACD;;;8CAEyBgB,S,EAAW;AACnC,WAAKD,aAAL,CAAmBC,UAAUhB,UAA7B;AACD;;;sCAEiBiB,a,EAAeC,G,EAAK;AAAA;;AACpC;;;;;AAKA,UAAMZ,SAAS,sBAAYC,MAA3B;AACA,UAAIY,mBAAmBF,cAAcvB,MAArC;;AAPoC,mBAehC,KAAKE,KAf2B;AAAA,UAUlCwB,SAVkC,UAUlCA,SAVkC;AAAA,UAWlCC,aAXkC,UAWlCA,aAXkC;AAAA,UAYlCC,KAZkC,UAYlCA,KAZkC;AAAA,UAatBC,iBAbsB,UAalCvB,UAbkC;AAAA,UAclCF,YAdkC,UAclCA,YAdkC;;;AAiBpC,UAAIsB,aAAaC,cAAc3B,MAAd,GAAuBD,0BAAxC,EAAoE;AAClE,YAAM+B,uBAAuBP,cAAclB,GAAd,CAAkB,UAAC0B,KAAD,EAAQC,KAAR;AAAA,iBAAkB,CAC/DA,QAAQT,cAAcvB,MADyC,EAE/D+B,KAF+D,CAAlB;AAAA,SAAlB,CAA7B;;AAKA,YAAME,YAAYrB,OAAOE,UAAP,CAAkBoB,kBAAlB;AAChB;AACAtB,eAAOE,UAAP,CAAkBqB,YAAlB,CAA+BL,oBAA/B,EAAqD,CAArD,EAAwD,CAAxD,CAFgB,CAAlB;;AAKAL,2BAAmBE,cAAc3B,MAAjC;;AAEAuB,wBAAgBI,cAActB,GAAd,CAAkB,UAAC+B,CAAD,EAAIJ,KAAJ;AAAA,iBAChCC,UAAUD,QAAQP,gBAAlB,CADgC;AAAA,SAAlB,CAAhB;AAGD;;AAED;AACA,UAAIG,SAASC,kBAAkB7B,MAAlB,GAA2BD,0BAAxC,EAAoE;AAClE,YAAM+B,wBAAuBP,cAAclB,GAAd,CAAkB,UAAC0B,KAAD,EAAQC,KAAR;AAAA,iBAAkB,CAC/DA,QAAQT,cAAcvB,MADyC,EAE/D+B,KAF+D,CAAlB;AAAA,SAAlB,CAA7B;AAIA,YAAME,aAAYrB,OAAOE,UAAP,CAAkBoB,kBAAlB;AAChB;AACAtB,eAAOE,UAAP,CAAkBqB,YAAlB,CAA+BL,qBAA/B,EAAqD,CAArD,EAAwD,CAAxD,CAFgB,CAAlB;;AAKAL,2BAAmBI,kBAAkB7B,MAArC;;AAEAuB,wBAAgBM,kBAAkBxB,GAAlB,CAAsB,UAAC+B,CAAD,EAAIJ,KAAJ;AAAA,iBACpCC,WAAUD,QAAQP,gBAAlB,CADoC;AAAA,SAAtB,CAAhB;AAGD;;AAED,UAAMY,cAAc,EAApB;;AAEA,WAAK,IAAIrB,IAAI,CAAb,EAAgBA,IAAIS,gBAApB,EAAsCT,GAAtC,EAA2C;AACzC,YAAMe,QAAQ3B,eAAemB,cAAcP,CAAd,EAAiB,CAAjB,CAAf,GAAqCO,cAAcP,CAAd,CAAnD;;AAEA,YAAMsB,kBAAkB;AACtBC,kBAAQ1C,SAAS4B,gBADK;AAEtBe,2BAAiBT;AAFK,SAAxB;;AAKAM,oBAAYrB,CAAZ,IACE,uCAAK,KAAKA,CAAV,EAAa,OAAOsB,eAApB,EAAqC,WAAU,gBAA/C,GADF;AAGD;;AAED,aACE;AAAA;AAAA;AACE,eAAKd,GADP;AAEE,qBAAW,gCAFb;AAGE,iBAAO,EAAEiB,OAAO3C,KAAT,EAHT;AAIE,mBAAS;AAAA,mBAAM,OAAKI,KAAL,CAAWwC,OAAX,CAAmBnB,aAAnB,CAAN;AAAA;AAJX;AAMGc;AANH,OADF;AAUD;;;6BAEQ;AACP,UAAMlC,cAAc,KAAKK,KAAL,CAAWL,WAA/B;;AAEA,UAAMwC,cAAc,EAApB;AACA,WAAK,IAAI3B,IAAI,CAAb,EAAgBA,IAAIb,YAAYH,MAAhC,EAAwCgB,GAAxC,EAA6C;AAC3C2B,oBAAY3B,CAAZ,IAAiB,KAAK4B,iBAAL,CAAuBzC,YAAYa,CAAZ,CAAvB,EAAuCA,CAAvC,CAAjB;AACD;;AAED,aACE;AAAA;AAAA;AACE,qBAAW,wBADb;AAEE,iBAAO;AACLyB,mBAAO3C,QAAQK,YAAYH,MADtB;AAEL6C,wBAAY,MAFP;AAGLC,yBAAa;AAHR;AAFT;AAQGH;AARH,OADF;AAYD;;;;;;kBApLkB1C,oB;;;AAuLrBA,qBAAqB8C,SAArB,GAAiC;AAC/BzC,cAAY,oBAAU0C,SAAV,CAAoB,CAC9B,oBAAUC,OAAV,CACE,oBAAUD,SAAV,CAAoB,CAClB,oBAAUE,MADQ,EAGlB,oBAAUD,OAAV,CACE,oBAAUD,SAAV,CAAoB,CAAC,oBAAUG,MAAX,EAAmB,oBAAUD,MAA7B,CAApB,CADF,CAHkB,CAApB,CADF,CAD8B,EAU9B,oBAAUA,MAVoB,CAApB,CADmB;AAa/BR,WAAS,oBAAUU,IAbY;;AAe/B;;;;;;;;;;AAUAhD,gBAAc,oBAAUiD,IAzBO;;AA2B/B;;;;;;AAMA1B,iBAAe,gBAAM2B,SAAN,CAAgBN,SAAhB,CAA0B,CACvC,gBAAMM,SAAN,CAAgBH,MADuB,EAEvC,gBAAMG,SAAN,CAAgBC,KAFuB,CAA1B,EAGZC,UApC4B;AAqC/B9B,aAAW,gBAAM4B,SAAN,CAAgBD,IArCI;AAsC/BzB,SAAO,gBAAM0B,SAAN,CAAgBD,IAAhB,CAAqBG;AAtCG,CAAjC;;AAyCAvD,qBAAqBwD,YAArB,GAAoC;AAClCrD,gBAAc;AADoB,CAApC","file":"ColorPaletteSelector.js","sourcesContent":["import COLOR_SCALES from \"@workspace/constants/color\";\nimport Environment from \"@common/utils/environment\";\nimport PropTypes from \"prop-types\";\nimport React, { Component } from \"react\";\n\nconst HEIGHT = 90;\nconst WIDTH = 18;\nconst STANDARD_COLORSCALE_LENGTH = COLOR_SCALES[0].length;\n\nexport default class ColorPaletteSelector extends Component {\n  constructor(props) {\n    super(props);\n\n    let colorscales;\n    if (this.props.interpolated) {\n      colorscales = COLOR_SCALES;\n    } else {\n      // pull the color out of the colorscales\n      colorscales = COLOR_SCALES.map(colorscale =>\n        colorscale.map(colorpair => colorpair[1])\n      );\n    }\n\n    this.state = { colorscales };\n  }\n\n  /*\n     * if the supplied colorscale isn't in our state, add it to the front\n     */\n  addColorScale(newColorScale) {\n    if (!newColorScale || newColorScale.length === 0) {\n      return;\n    } else if (!Array.isArray(newColorScale)) {\n      const Plotly = Environment.plotly;\n      newColorScale = Plotly.Colorscale.scales[newColorScale];\n    }\n\n    const colorscales = this.state.colorscales;\n\n    for (let i = 0; i < colorscales.length; i++) {\n      const colorscale = colorscales[i];\n      if (colorscale.length === newColorScale.length) {\n        for (let j = 0; j < colorscale.length; j++) {\n          if (\n            this.props.interpolated &&\n            colorscale[j][0] === newColorScale[j][0] &&\n            colorscale[j][1] === newColorScale[j][1]\n          ) {\n            // newColorScale is in our list of colorscales\n            return;\n          } else if (\n            !this.props.interpolated &&\n            colorscale[j] === newColorScale[j]\n          ) {\n            return;\n          }\n        }\n      } else {\n        /*\n                 * It could happen that our new colorscale is actually a trimmed down or\n                 * expanded version of a current color scale. This is especially true\n                 * now that we have grouped styled traces. We don't want to add a new\n                 * colorscale in those cases.\n                 */\n        let firstColorsMatch = colorscale[0][1] === newColorScale[0][1];\n\n        if (!this.props.interpolated) {\n          firstColorsMatch = colorscale[0] === newColorScale[0];\n        }\n\n        if (firstColorsMatch) {\n          return;\n        }\n      }\n    }\n\n    // newColorScale is not in our list of colorscales, so add it\n    colorscales.unshift(newColorScale);\n    this.setState({ colorscales });\n  }\n\n  componentWillMount() {\n    this.addColorScale(this.props.colorscale);\n  }\n\n  componentWillReceiveProps(nextProps) {\n    this.addColorScale(nextProps.colorscale);\n  }\n\n  _renderColorScale(newColorscale, key) {\n    /*\n         * The colorpalette control can also be used to color multiple traces\n         * based on one colorscale. Our colorscale has to have at least as many\n         * colors as there are user traces.\n         */\n    const Plotly = Environment.plotly;\n    let colorscaleLength = newColorscale.length;\n\n    const {\n      isGrouped,\n      userDataIndex,\n      isPie,\n      colorscale: currentColorscale,\n      interpolated,\n    } = this.props;\n\n    if (isGrouped && userDataIndex.length > STANDARD_COLORSCALE_LENGTH) {\n      const scaleWithBreakpoints = newColorscale.map((color, index) => [\n        index / newColorscale.length,\n        color,\n      ]);\n\n      const scaleFunc = Plotly.Colorscale.makeColorScaleFunc(\n        // scale boundaries: from 0 to 1\n        Plotly.Colorscale.extractScale(scaleWithBreakpoints, 0, 1)\n      );\n\n      colorscaleLength = userDataIndex.length;\n\n      newColorscale = userDataIndex.map((_, index) =>\n        scaleFunc(index / colorscaleLength)\n      );\n    }\n\n    // Fix pie chart coloring\n    if (isPie && currentColorscale.length > STANDARD_COLORSCALE_LENGTH) {\n      const scaleWithBreakpoints = newColorscale.map((color, index) => [\n        index / newColorscale.length,\n        color,\n      ]);\n      const scaleFunc = Plotly.Colorscale.makeColorScaleFunc(\n        // scale boundaries: from 0 to 1\n        Plotly.Colorscale.extractScale(scaleWithBreakpoints, 0, 1)\n      );\n\n      colorscaleLength = currentColorscale.length;\n\n      newColorscale = currentColorscale.map((_, index) =>\n        scaleFunc(index / colorscaleLength)\n      );\n    }\n\n    const colorblocks = [];\n\n    for (let i = 0; i < colorscaleLength; i++) {\n      const color = interpolated ? newColorscale[i][1] : newColorscale[i];\n\n      const colorBlockStyle = {\n        height: HEIGHT / colorscaleLength,\n        backgroundColor: color,\n      };\n\n      colorblocks[i] = (\n        <div key={i} style={colorBlockStyle} className=\"js-color-block\" />\n      );\n    }\n\n    return (\n      <div\n        key={key}\n        className={\"color-palette js-color-palette\"}\n        style={{ width: WIDTH }}\n        onClick={() => this.props.onClick(newColorscale)}\n      >\n        {colorblocks}\n      </div>\n    );\n  }\n\n  render() {\n    const colorscales = this.state.colorscales;\n\n    const colorpanels = [];\n    for (let i = 0; i < colorscales.length; i++) {\n      colorpanels[i] = this._renderColorScale(colorscales[i], i);\n    }\n\n    return (\n      <div\n        className={\"color-palette-selector\"}\n        style={{\n          width: WIDTH * colorscales.length,\n          marginLeft: \"auto\",\n          marginRight: \"auto\",\n        }}\n      >\n        {colorpanels}\n      </div>\n    );\n  }\n}\n\nColorPaletteSelector.propTypes = {\n  colorscale: PropTypes.oneOfType([\n    PropTypes.arrayOf(\n      PropTypes.oneOfType([\n        PropTypes.string,\n\n        PropTypes.arrayOf(\n          PropTypes.oneOfType([PropTypes.number, PropTypes.string])\n        ),\n      ])\n    ),\n    PropTypes.string,\n  ]),\n  onClick: PropTypes.func,\n\n  /*\n     * if true, colorscales are in the form [[x1, color1], [x2, color2], ...]\n     * if false, colorscales are in the form [color1, color2, ...]\n     *\n     * true is used for charts with colorscales like heatmaps or\n     * scatter's  marker.color\n     *\n     * false is used for mapping colors across traces and\n     * pie chart's marker.colors\n     */\n  interpolated: PropTypes.bool,\n\n  /*\n     * specify which trace this control applies to if we're\n     * rendering a trace control\n     * Can be an array if we're trying to group style traces:\n     * https://github.com/plotly/streambed/issues/7973\n     */\n  userDataIndex: React.PropTypes.oneOfType([\n    React.PropTypes.number,\n    React.PropTypes.array,\n  ]).isRequired,\n  isGrouped: React.PropTypes.bool,\n  isPie: React.PropTypes.bool.isRequired,\n};\n\nColorPaletteSelector.defaultProps = {\n  interpolated: true,\n};\n"]}