{"version":3,"sources":["../../../../../src/components/widgets/annotation_editor/editors/RichTextEditor.js"],"names":["RichTextEditor","createClass","propTypes","onChange","func","isRequired","placeholder","string","value","getDefaultProps","getInitialState","props","trim","length","editorState","createEditorStateFromHTML","createEmpty","getDecorator","componentWillMount","componentWillUnmount","componentWillReceiveProps","nextProps","state","linkEditorFocus","editorFocus","setState","shouldComponentUpdate","nextState","getEditorStateAsHTML","strategy","component","style","html","contentState","elementStyles","sup","sub","decorator","createWithContent","getCurrentContent","blockTags","inlineTags","focus","refs","editor","getParentContainerVerticalOffset","document","querySelector","scrollTop","selectedLinkID","selection","getSelection","entityKey","newState","Object","assign","htmlContent","onBlur","onFocus","onLinkEditorBlur","onLinkEditorFocus","onLinkEditorChange","linkID","urlValue","selectionState","replaceData","url","updatedEditorState","toggleLink","onLinkEditorClose","onKeyCommand","command","newEditorState","onReturnPressed","onStyleButtonToggle","inlineStyle","renderLinkEditor","linkEntity","linkURL","getData","parentOffset","window","selectionCoordinates","coordinates","x","y","render","linkIsSelected","Boolean","getCurrentInlineStyle"],"mappings":";;;;;;AAAA;;;;AAQA;;AAOA;;AACA;;AAGA;;AAYA;;;;AACA;;;;AACA;;;;AAGA;;;;AACA;;AAQA;;AACA;;;;AACA;;;;AAjBA;;;AA5BA;;;;;;AAkDA,IAAMA,iBAAiB,gBAAMC,WAAN,CAAkB;AAAA;;AACvCC,aAAW;AACTC,cAAU,iBAAUC,IAAV,CAAeC,UADhB;AAETC,iBAAa,iBAAUC,MAFd;AAGTC,WAAO,iBAAUD;AAHR,GAD4B;;AAOvCE,iBAPuC,6BAOrB;AAChB,WAAO;AACLH,mBAAa,EADR;AAELE,aAAO;AAFF,KAAP;AAID,GAZsC;AAcvCE,iBAduC,6BAcrB;AAChB;;;;;;;AAOA,QAAI,KAAKC,KAAL,CAAWH,KAAX,CAAiBI,IAAjB,GAAwBC,MAA5B,EAAoC;AAClC,aAAO;AACLC,qBAAa,KAAKC,yBAAL,CAA+B,KAAKJ,KAAL,CAAWH,KAA1C;AADR,OAAP;AAGD;;AAED,WAAO;AACLM,mBAAa,qBAAYE,WAAZ,CAAwB,KAAKC,YAAL,EAAxB;AADR,KAAP;AAGD,GA/BsC;AAiCvCC,oBAjCuC,gCAiClB;AACnB;AACA;AACD,GApCsC;AAsCvCC,sBAtCuC,kCAsChB;AACrB;AACA;AACD,GAzCsC;AA2CvCC,2BA3CuC,qCA2CbC,SA3Ca,EA2CF;AAAA,iBACM,KAAKC,KADX;AAAA,QAC3BC,eAD2B,UAC3BA,eAD2B;AAAA,QACVC,WADU,UACVA,WADU;;AAGnC;;;;;;;;;AAQA,QAAID,mBAAmBC,WAAvB,EAAoC;AAClC;AACD;;AAED;AACA,QAAMV,cAAc,KAAKC,yBAAL,CAA+BM,UAAUb,KAAzC,CAApB;;AAEA,SAAKiB,QAAL,CAAc,EAAEX,wBAAF,EAAd;AACD,GA9DsC;AAgEvCY,uBAhEuC,iCAgEjBL,SAhEiB,EAgENM,SAhEM,EAgEK;AAAA,iBACX,KAAKhB,KADM;AAAA,QAClCL,WADkC,UAClCA,WADkC;AAAA,QACrBE,KADqB,UACrBA,KADqB;AAAA,kBAED,KAAKc,KAFJ;AAAA,QAElCR,WAFkC,WAElCA,WAFkC;AAAA,QAErBS,eAFqB,WAErBA,eAFqB;;AAI1C;;AACA;AACE;AACAA,uBACAjB,gBAAgBe,UAAUf,WAD1B,IAEAE,UAAUa,UAAUb,KAFpB,IAGAM,gBAAgBa,UAAUb,WAL5B,EAME;AACA,aAAO,IAAP;AACD;;AAED;AACA,WAAOO,UAAUb,KAAV,KAAoB,KAAKoB,oBAAL,CAA0Bd,WAA1B,CAA3B;AACD,GAjFsC;AAmFvCG,cAnFuC,0BAmFxB;AACb,WAAO,gCAAuB,CAC5B;AACEY,qDADF;AAEEC,wCAFF;AAGE;AACAnB,aAAO;AACLoB,eAAO;AADF;AAJT,KAD4B,CAAvB,CAAP;AAUD,GA9FsC;AAgGvChB,2BAhGuC,qCAgGbiB,IAhGa,EAgGP;AAC9B,QAAMC,eAAe,sCAAcD,IAAd,EAAoB;AACvCE,qBAAe;AACbC,qDADa;AAEbC;AAFa;AADwB,KAApB,CAArB;;AAOA,QAAMC,YAAY,KAAKpB,YAAL,EAAlB;;AAEA;;;;;;AAMA;AACA,yBAAYqB,iBAAZ,CAA8BL,YAA9B;AACA;AACA,WAAO,qBAAYK,iBAAZ,CAA8BL,YAA9B,EAA4CI,SAA5C,CAAP;AACD,GApHsC;AAsHvCT,sBAtHuC,gCAsHlBd,WAtHkB,EAsHL;AAChC,QAAMmB,eAAenB,YAAYyB,iBAAZ,EAArB;;AAEA,WAAO,oCAAYN,YAAZ,EAA0B;AAC/BO,iBAAW,KADoB;AAE/BC;AAF+B,KAA1B,CAAP;AAID,GA7HsC;AA+HvCC,OA/HuC,mBA+H/B;AACN,SAAKC,IAAL,CAAUC,MAAV,CAAiBF,KAAjB;AACD,GAjIsC;;;AAmIvC;AACAG,kCApIuC,8CAoIJ;AACjC,WAAOC,SAASC,aAAT,CAAuB,qBAAvB,EAA8CC,SAArD;AACD,GAtIsC;AAwIvC7C,UAxIuC,oBAwI9BW,WAxI8B,EAwIjB;AAAA,QACZmC,cADY,GACO,KAAK3B,KADZ,CACZ2B,cADY;;AAEpB,QAAMC,YAAYpC,YAAYqC,YAAZ,EAAlB;AACA,QAAMC,YAAY,mCAAetC,WAAf,EAA4BoC,SAA5B,CAAlB;;AAEA,QAAMG,WAAW,EAAEvC,wBAAF,EAAjB;;AAEA;AACA,QAAI,CAAC,kCAAcA,WAAd,EAA2BoC,SAA3B,CAAL,EAA4C;AAC1C;AACAI,aAAOC,MAAP,CAAcF,QAAd,EAAwB;AACtBJ,wBAAgB;AADM,OAAxB;AAGD,KALD,MAKO,IAAIA,mBAAmBG,SAAvB,EAAkC;AACvC;AACAE,aAAOC,MAAP,CAAcF,QAAd,EAAwB;AACtBJ,wBAAgBG;AADM,OAAxB;AAGD;;AAED;AACA,SAAK3B,QAAL,CAAc4B,QAAd;;AAEA;AACA;AACA,QAAMG,cAAc,KAAK5B,oBAAL,CAA0Bd,WAA1B,CAApB;AACA,QAAI,KAAKH,KAAL,CAAWH,KAAX,KAAqBgD,WAAzB,EAAsC;AACpC,8BAAS,KAAK7C,KAAL,CAAWR,QAApB,EAA8B,CAACqD,WAAD,CAA9B;AACD;AACF,GArKsC;AAuKvCC,QAvKuC,oBAuK9B;AACP,SAAKhC,QAAL,CAAc;AACZD,mBAAa;AADD,KAAd;AAGD,GA3KsC;AA6KvCkC,SA7KuC,qBA6K7B;AACR,SAAKjC,QAAL,CAAc;AACZD,mBAAa;AADD,KAAd;AAGD,GAjLsC;AAmLvCmC,kBAnLuC,8BAmLpB;AACjB,SAAKlC,QAAL,CAAc;AACZF,uBAAiB;AADL,KAAd;AAGD,GAvLsC;AAyLvCqC,mBAzLuC,+BAyLnB;AAClB,SAAKnC,QAAL,CAAc;AACZF,uBAAiB;AADL,KAAd;AAGD,GA7LsC;AA+LvCsC,oBA/LuC,8BA+LpBC,MA/LoB,EA+LZC,QA/LY,EA+LF;AAAA,QAC3BjD,WAD2B,GACX,KAAKQ,KADM,CAC3BR,WAD2B;;AAEnC,QAAMkD,iBAAiBlD,YAAYqC,YAAZ,EAAvB;;AAEA;AACA,oBAAOc,WAAP,CAAmBH,MAAnB,EAA2B,EAAEI,KAAKH,QAAP,EAA3B;;AAEA;AACA,QAAMI,qBAAqB,mBAAUC,UAAV,CACzBtD,WADyB,EAEzBkD,cAFyB,EAGzBF,MAHyB,CAA3B;;AAMA,SAAK3D,QAAL,CAAcgE,kBAAd;AACD,GA9MsC;;;AAgNvC;;;;;;;;AAQAE,mBAxNuC,+BAwNnB;AAClB;;;;;;AAMA,SAAK3B,KAAL;;AAEA;AACA,SAAKjB,QAAL,CAAc;AACZF,uBAAiB,KADL;AAEZ0B,sBAAgB;AAFJ,KAAd;AAID,GAtOsC;AAwOvCqB,cAxOuC,wBAwO1BC,OAxO0B,EAwOjB;AACpB,QAAMC,iBAAiB,qCAAiB,KAAKlD,KAAL,CAAWR,WAA5B,EAAyCyD,OAAzC,CAAvB;;AAEA,QAAIC,cAAJ,EAAoB;AAClB,WAAKrE,QAAL,CAAcqE,cAAd;;AAEA;AACA,aAAO,IAAP;AACD;;AAED;AACA,WAAO,KAAP;AACD,GApPsC;AAsPvCC,iBAtPuC,6BAsPrB;AAChB,QAAMD,iBAAiB,sCAAkB,KAAKlD,KAAL,CAAWR,WAA7B,CAAvB;;AAEA;AACA,SAAKX,QAAL,CAAcqE,cAAd;;AAEA;AACA,WAAO,IAAP;AACD,GA9PsC;AAgQvCE,qBAhQuC,+BAgQnBC,WAhQmB,EAgQN;AAC/B,QAAMH,iBAAiB,sCACrB,KAAKlD,KAAL,CAAWR,WADU,EAErB6D,WAFqB,CAAvB;;AAKA,QAAIH,cAAJ,EAAoB;AAClB,WAAKrE,QAAL,CAAcqE,cAAd;AACD;AACF,GAzQsC;AA2QvCI,kBA3QuC,4BA2QtB3B,cA3QsB,EA2QN;AAC/B,QAAI,CAACA,cAAL,EAAqB;AACnB,aAAO,IAAP;AACD;;AAED;AACA,QAAM4B,aAAa,mCAAe5B,cAAf,CAAnB;AACA,QAAM6B,UAAUD,WAAWE,OAAX,GAAqBb,GAArC;;AAEA;AACA,QAAMc,eAAe,KAAKnC,gCAAL,EAArB;AACA,QAAMK,YAAY+B,OAAO9B,YAAP,EAAlB;AACA,QAAM+B,uBAAuB,uCAC3BhC,SAD2B,EAE3B8B,YAF2B,CAA7B;AAIA,QAAMG,cAAc;AAClBC,mEADkB;AAElBC,SAAGH,qBAAqBG,CAArB;AAFe,KAApB;;AAKA,WACE;AACE,eAAS,KAAKzB,iBADhB;AAEE,mBAAa,KAAKC,kBAFpB;AAGE,cAAQ,KAAKF,gBAHf;AAIE,eAAS,KAAKU,iBAJhB;AAKE,mBAAac,WALf;AAME,cAAQlC,cANV;AAOE,eAAS6B;AAPX,MADF;AAWD,GA3SsC;AA6SvCQ,QA7SuC,oBA6S9B;AAAA,kBACiC,KAAKhE,KADtC;AAAA,QACCR,WADD,WACCA,WADD;AAAA,QACcmC,cADd,WACcA,cADd;;AAEP,QAAMsC,iBAAiBC,QAAQvC,cAAR,CAAvB;;AAEA,WACE;AAAA;AAAA,QAAK,WAAU,wBAAf;AACE;AACE,0DADF;AAEE,sBAAcnC,YAAY2E,qBAAZ,EAFhB;AAGE,wBAAgBF,cAHlB;AAIE,kBAAU,KAAKb;AAJjB,QADF;AAOE;AAAA;AAAA,UAAK,WAAU,0BAAf,EAA0C,SAAS,KAAKhC,KAAxD;AACE;AACE,gEADF;AAEE,uBAAa5B,WAFf;AAGE,wBAAc,KAAK2D,eAHrB;AAIE,4BAAkB,KAAKH,YAJzB;AAKE,oBAAU,KAAKnE,QALjB;AAME,kBAAQ,KAAKsD,MANf;AAOE,mBAAS,KAAKC,OAPhB;AAQE,uBAAa,KAAK/C,KAAL,CAAWL,WAR1B;AASE,sBAAY,KATd;AAUE,eAAI;AAVN;AADF,OAPF;AAqBG,WAAKsE,gBAAL,CAAsB3B,cAAtB;AArBH,KADF;AAyBD;AA1UsC,CAAlB,CAAvB;;AAjBA;;;AAjBA;kBA+WejD,c","file":"RichTextEditor.js","sourcesContent":["import React, { PropTypes } from \"react\";\n\n/*\n * TODO Use rollupipfy with tree-shaking. Without it, the entire draft-js\n * library is imported, which adds 58kb to the minified bundle.\n * https://github.com/plotly/streambed/issues/6385\n *\n */\nimport {\n  CompositeDecorator,\n  Editor,\n  EditorState,\n  Entity,\n  RichUtils,\n} from \"draft-js\";\nimport { stateToHTML } from \"draft-js-export-html\";\nimport { stateFromHTML } from \"draft-js-import-html\";\n\n// Constants\nimport {\n  SUPERSCRIPT,\n  SUBSCRIPT,\n  LINK,\n  STYLES_TO_HTML_TAGS,\n  STYLE_MAP,\n  INLINE_STYLES,\n  LINK_EDITOR_VERTICAL_OFFSET,\n  LINK_EDITOR_HORIZONTAL_OFFSET,\n} from \"./RichTextEditorConfiguration\";\n\n// Components\nimport LinkDecorator from \"./LinkDecorator\";\nimport LinkEditor from \"./LinkEditor\";\nimport StyleButtonGroup from \"./StyleButtonGroup\";\n\n// Libraries\nimport debounce from \"./debounce\";\nimport {\n  getEntityKeyAt,\n  getEntityByKey,\n  toggleInlineStyle,\n  handleKeyCommand,\n  insertSoftNewline,\n  cursorHasLink,\n} from \"./DraftCommands\";\nimport { findLinkEntities } from \"./decoratorStrategies\";\nimport getSelectionCoordinates from \"./getSelectionCoordinates\";\nimport {\n  suppressContentEditableWarning,\n  restoreContentEditableWarning,\n} from \"@workspace/components/widgets/annotation_editor/suppressContentEditableWarning\";\n\nconst RichTextEditor = React.createClass({\n  propTypes: {\n    onChange: PropTypes.func.isRequired,\n    placeholder: PropTypes.string,\n    value: PropTypes.string,\n  },\n\n  getDefaultProps() {\n    return {\n      placeholder: \"\",\n      value: \"\",\n    };\n  },\n\n  getInitialState() {\n    /*\n         * Initially set state based on the plotly.js annotation content.\n         * After this, as long as this component is mounted, it owns the source\n         * of truth for the annotation value via `this.state.editorState`.\n         * This state may be updated externally via a prop update.\n         * See `componentWillReceiveProps`.\n         */\n    if (this.props.value.trim().length) {\n      return {\n        editorState: this.createEditorStateFromHTML(this.props.value),\n      };\n    }\n\n    return {\n      editorState: EditorState.createEmpty(this.getDecorator()),\n    };\n  },\n\n  componentWillMount() {\n    // TODO: Remove https://github.com/plotly/streambed/issues/6121\n    suppressContentEditableWarning();\n  },\n\n  componentWillUnmount() {\n    // TODO: Remove https://github.com/plotly/streambed/issues/6121\n    restoreContentEditableWarning();\n  },\n\n  componentWillReceiveProps(nextProps) {\n    const { linkEditorFocus, editorFocus } = this.state;\n\n    /*\n         * Don't worry about what plotly.js thinks the annotation value\n         * should be while we're using our editor, for these reasons:\n         *\n         * 1. The editor should be considered the source of truth, unless the\n         *    user is actually editing the annotation inline, in the chart.\n         * 2. Sometimes we get updates with stale values.\n         */\n    if (linkEditorFocus || editorFocus) {\n      return;\n    }\n\n    // Sync editor state with plotly annotation value.\n    const editorState = this.createEditorStateFromHTML(nextProps.value);\n\n    this.setState({ editorState });\n  },\n\n  shouldComponentUpdate(nextProps, nextState) {\n    const { placeholder, value } = this.props;\n    const { editorState, linkEditorFocus } = this.state;\n\n    // If relevant props or state changed, return true.\n    if (\n      // Always update when user is editing link\n      linkEditorFocus ||\n      placeholder !== nextProps.placeholder ||\n      value !== nextProps.value ||\n      editorState !== nextState.editorState\n    ) {\n      return true;\n    }\n\n    // Compare incoming value with HTML representation of state.\n    return nextProps.value !== this.getEditorStateAsHTML(editorState);\n  },\n\n  getDecorator() {\n    return new CompositeDecorator([\n      {\n        strategy: findLinkEntities,\n        component: LinkDecorator,\n        // Props for the LinkDecorator component\n        props: {\n          style: STYLE_MAP[LINK],\n        },\n      },\n    ]);\n  },\n\n  createEditorStateFromHTML(html) {\n    const contentState = stateFromHTML(html, {\n      elementStyles: {\n        sup: SUPERSCRIPT,\n        sub: SUBSCRIPT,\n      },\n    });\n\n    const decorator = this.getDecorator();\n\n    /*\n         * Work around issue described here:\n         * https://github.com/facebook/draft-js/issues/185\n         * #issuecomment-217207612\n         */\n\n    // Parse once to generate entity instances\n    EditorState.createWithContent(contentState);\n    // Now we can add our decorator\n    return EditorState.createWithContent(contentState, decorator);\n  },\n\n  getEditorStateAsHTML(editorState) {\n    const contentState = editorState.getCurrentContent();\n\n    return stateToHTML(contentState, {\n      blockTags: false,\n      inlineTags: STYLES_TO_HTML_TAGS,\n    });\n  },\n\n  focus() {\n    this.refs.editor.focus();\n  },\n\n  // Used to properly calculate user selection coordinates.\n  getParentContainerVerticalOffset() {\n    return document.querySelector(\".js-edit-mode-panel\").scrollTop;\n  },\n\n  onChange(editorState) {\n    const { selectedLinkID } = this.state;\n    const selection = editorState.getSelection();\n    const entityKey = getEntityKeyAt(editorState, selection);\n\n    const newState = { editorState };\n\n    // Update selected link ID\n    if (!cursorHasLink(editorState, selection)) {\n      // If a link is no longer selected, clear selected link ID state\n      Object.assign(newState, {\n        selectedLinkID: null,\n      });\n    } else if (selectedLinkID !== entityKey) {\n      // If link selection is new / different link selected, update it\n      Object.assign(newState, {\n        selectedLinkID: entityKey,\n      });\n    }\n\n    // Update internal state\n    this.setState(newState);\n\n    // Dispatch changes to plotly.js\n    // TODO consider moving to render (plotly.js is a render target)\n    const htmlContent = this.getEditorStateAsHTML(editorState);\n    if (this.props.value !== htmlContent) {\n      debounce(this.props.onChange, [htmlContent]);\n    }\n  },\n\n  onBlur() {\n    this.setState({\n      editorFocus: false,\n    });\n  },\n\n  onFocus() {\n    this.setState({\n      editorFocus: true,\n    });\n  },\n\n  onLinkEditorBlur() {\n    this.setState({\n      linkEditorFocus: false,\n    });\n  },\n\n  onLinkEditorFocus() {\n    this.setState({\n      linkEditorFocus: true,\n    });\n  },\n\n  onLinkEditorChange(linkID, urlValue) {\n    const { editorState } = this.state;\n    const selectionState = editorState.getSelection();\n\n    // Update link URL\n    Entity.replaceData(linkID, { url: urlValue });\n\n    // Trigger an editor state update\n    const updatedEditorState = RichUtils.toggleLink(\n      editorState,\n      selectionState,\n      linkID\n    );\n\n    this.onChange(updatedEditorState);\n  },\n\n  /**\n     * Will be called by LinkEditor when the user confirms or cancels new URL.\n     * Will not be called if LinkEditor is closed by moving the cursor off of\n     * the selected LINK entity.\n     *\n     * @param   {String} linkID The link entity key related to this LinkEditor\n     * @returns {undefined}\n     */\n  onLinkEditorClose() {\n    /*\n         * Focus on editor immediately to avoid error that occurs when\n         * `selection.extend` is called and another element has focus.\n         * https://bugzilla.mozilla.org/show_bug.cgi?id=921444\n         * https://github.com/facebook/draft-js/blob/342576bf7186d07c82a41d9ca8169130669747d6/src/component/selection/setDraftEditorSelection.js#L128-L134\n         */\n    this.focus();\n\n    // Hide the editor.\n    this.setState({\n      linkEditorFocus: false,\n      selectedLinkID: null,\n    });\n  },\n\n  onKeyCommand(command) {\n    const newEditorState = handleKeyCommand(this.state.editorState, command);\n\n    if (newEditorState) {\n      this.onChange(newEditorState);\n\n      // Let draft-js know that keyboard command is handled.\n      return true;\n    }\n\n    // Default draft-js implementation\n    return false;\n  },\n\n  onReturnPressed() {\n    const newEditorState = insertSoftNewline(this.state.editorState);\n\n    // Update internal and external state\n    this.onChange(newEditorState);\n\n    // Cancel draft-js implementation\n    return true;\n  },\n\n  onStyleButtonToggle(inlineStyle) {\n    const newEditorState = toggleInlineStyle(\n      this.state.editorState,\n      inlineStyle\n    );\n\n    if (newEditorState) {\n      this.onChange(newEditorState);\n    }\n  },\n\n  renderLinkEditor(selectedLinkID) {\n    if (!selectedLinkID) {\n      return null;\n    }\n\n    // All entities are link entities.\n    const linkEntity = getEntityByKey(selectedLinkID);\n    const linkURL = linkEntity.getData().url;\n\n    // Locate user selection in document\n    const parentOffset = this.getParentContainerVerticalOffset();\n    const selection = window.getSelection();\n    const selectionCoordinates = getSelectionCoordinates(\n      selection,\n      parentOffset\n    );\n    const coordinates = {\n      x: LINK_EDITOR_HORIZONTAL_OFFSET,\n      y: selectionCoordinates.y + LINK_EDITOR_VERTICAL_OFFSET,\n    };\n\n    return (\n      <LinkEditor\n        onFocus={this.onLinkEditorFocus}\n        onURLChange={this.onLinkEditorChange}\n        onBlur={this.onLinkEditorBlur}\n        onClose={this.onLinkEditorClose}\n        coordinates={coordinates}\n        linkID={selectedLinkID}\n        linkURL={linkURL}\n      />\n    );\n  },\n\n  render() {\n    const { editorState, selectedLinkID } = this.state;\n    const linkIsSelected = Boolean(selectedLinkID);\n\n    return (\n      <div className=\"rich-text-editor__root\">\n        <StyleButtonGroup\n          styles={INLINE_STYLES}\n          currentStyle={editorState.getCurrentInlineStyle()}\n          linkIsSelected={linkIsSelected}\n          onToggle={this.onStyleButtonToggle}\n        />\n        <div className=\"rich-text-editor__editor\" onClick={this.focus}>\n          <Editor\n            customStyleMap={STYLE_MAP}\n            editorState={editorState}\n            handleReturn={this.onReturnPressed}\n            handleKeyCommand={this.onKeyCommand}\n            onChange={this.onChange}\n            onBlur={this.onBlur}\n            onFocus={this.onFocus}\n            placeholder={this.props.placeholder}\n            spellCheck={false}\n            ref=\"editor\"\n          />\n        </div>\n        {this.renderLinkEditor(selectedLinkID)}\n      </div>\n    );\n  },\n});\n\nexport default RichTextEditor;\n"]}