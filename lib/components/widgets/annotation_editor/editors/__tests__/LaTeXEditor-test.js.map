{"version":3,"sources":["../../../../../../src/components/widgets/annotation_editor/editors/__tests__/LaTeXEditor-test.js"],"names":["describe","simpleExpr","complexExpr","wrappedSimpleExpr","wrappedComplexExpr","it","component","expect","toBeDefined","find","prop","toBe","mockOnChange","jest","genMockFn","simulate","target","value","toBeCalledWith","instance","beforeEach","wrap","bind","unwrap"],"mappings":"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","file":"LaTeXEditor-test.js","sourcesContent":["import LaTeXEditor from \"../LaTeXEditor\";\nimport React from \"react\";\nimport { shallow } from \"enzyme\";\n\ndescribe(\"LaTeXEditor\", () => {\n  const simpleExpr = \"_int\";\n  const complexExpr = \"x^2 \\frac{d^2 y}{dx^2} + alpha^2 = 0\";\n  const wrappedSimpleExpr = `$${simpleExpr}$`;\n  const wrappedComplexExpr = `$${complexExpr}$`;\n\n  it(\"renders\", () => {\n    const component = shallow(<LaTeXEditor onChange={() => {}} />);\n\n    expect(component).toBeDefined();\n  });\n\n  it(\"renders the wrapped LaTeX expression without wrapping\", () => {\n    const component = shallow(\n      <LaTeXEditor onChange={() => {}} value={wrappedSimpleExpr} />\n    );\n\n    expect(component.find(\"textarea\").prop(\"value\")).toBe(simpleExpr);\n  });\n\n  it(\"handles a non-wrapped LaTeX expression just fine\", () => {\n    const component = shallow(\n      <LaTeXEditor onChange={() => {}} value={simpleExpr} />\n    );\n\n    expect(component.find(\"textarea\").prop(\"value\")).toBe(simpleExpr);\n  });\n\n  it(\"calls `onChange` with a wrapped LaTeX expression\", () => {\n    const mockOnChange = jest.genMockFn();\n    const component = shallow(\n      <LaTeXEditor onChange={mockOnChange} value={wrappedSimpleExpr} />\n    );\n\n    component\n      .find(\"textarea\")\n      .simulate(\"blur\", { target: { value: simpleExpr } });\n\n    expect(mockOnChange).toBeCalledWith(wrappedSimpleExpr);\n  });\n\n  describe(\"unit tests\", () => {\n    let instance;\n\n    beforeEach(() => {\n      instance = shallow(<LaTeXEditor onChange={() => {}} />).instance();\n    });\n\n    describe(\"#wrap\", () => {\n      let wrap;\n\n      beforeEach(() => {\n        wrap = instance.wrap.bind(instance);\n      });\n\n      it(\"wraps a non-wrapped value\", () => {\n        expect(wrap(\"\")).toBe(\"$$\");\n        expect(wrap(simpleExpr)).toBe(wrappedSimpleExpr);\n        expect(wrap(complexExpr)).toBe(wrappedComplexExpr);\n      });\n\n      it(\"doesn't wrap a wrapped value\", () => {\n        expect(wrap(\"$$\")).toBe(\"$$\");\n        expect(wrap(wrappedSimpleExpr)).toBe(wrappedSimpleExpr);\n        expect(wrap(wrappedComplexExpr)).toBe(wrappedComplexExpr);\n      });\n    });\n\n    describe(\"#unwrap\", () => {\n      let unwrap;\n\n      beforeEach(() => {\n        unwrap = instance.unwrap.bind(instance);\n      });\n\n      it(\"unwraps a wrapped value\", () => {\n        expect(unwrap(\"$$\")).toBe(\"\");\n        expect(unwrap(wrappedSimpleExpr)).toBe(simpleExpr);\n        expect(unwrap(wrappedComplexExpr)).toBe(complexExpr);\n      });\n\n      it(\"unwraps a wrapped value with linebreaks\", () => {\n        expect(unwrap(\"$int\\n$\")).toBe(\"int\\n\");\n      });\n\n      it(\"doesn't unwrap a non-wrapped value\", () => {\n        expect(unwrap(\"\")).toBe(\"\");\n        expect(unwrap(simpleExpr)).toBe(simpleExpr);\n        expect(unwrap(complexExpr)).toBe(complexExpr);\n      });\n    });\n  });\n});\n"]}