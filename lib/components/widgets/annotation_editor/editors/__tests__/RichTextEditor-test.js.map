{"version":3,"sources":["../../../../../../src/components/widgets/annotation_editor/editors/__tests__/RichTextEditor-test.js"],"names":["MockDraftCommands","jest","mock","describe","it","component","styleButtons","find","expect","filterWhere","b","node","props","value","length","toBe","mockSetState","genMockFn","context","state","editorFocus","linkEditorFocus","setState","prototype","componentWillReceiveProps","call","calls","editorState","getEditorStateAsHTML","createEditorStateFromHTML","expectedValue","nextProps","toBeCalledWith","testFn","beforeEach","shouldComponentUpdate","nextState","placeholder","oldEditorState","newEditorState","sameString","onChange","mockEntityKey","mockValue","getSelection","selectedLinkID","_editorState","mockPlotlyOnChange","oldValue","newValue","mockDebounce","require","default","oldLinkID","not","focus","onLinkEditorClose"],"mappings":"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","file":"RichTextEditor-test.js","sourcesContent":["// We do want to mock `DraftCommands` and `debounce` for our unit tests\njest.mock(\"../DraftCommands\");\njest.mock(\"../debounce\");\n\nimport React from \"react\";\nimport { mount } from \"enzyme\";\n\nimport RichTextEditor from \"../RichTextEditor\";\nimport * as MockDraftCommands from \"../__mocks__/DraftCommands\";\nimport StyleButton from \"@workspace/components/widgets/annotation_editor/editors/StyleButton\";\n\ndescribe(\"RichTextEditor\", () => {\n  it(\"has bold, italic, sub, sup, and link buttons\", () => {\n    const component = mount(<RichTextEditor onChange={() => {}} />);\n\n    const styleButtons = component.find(StyleButton);\n\n    expect(\n      styleButtons.filterWhere(b => b.node.props.value === \"BOLD\").length\n    ).toBe(1);\n    expect(\n      styleButtons.filterWhere(b => b.node.props.value === \"ITALIC\").length\n    ).toBe(1);\n    expect(\n      styleButtons.filterWhere(b => b.node.props.value === \"SUBSCRIPT\").length\n    ).toBe(1);\n    expect(\n      styleButtons.filterWhere(b => b.node.props.value === \"SUPERSCRIPT\").length\n    ).toBe(1);\n    expect(\n      styleButtons.filterWhere(b => b.node.props.value === \"LINK\").length\n    ).toBe(1);\n  });\n\n  describe(\"#componentWillReceiveProps\", () => {\n    it(\"does not call setState when editor is in focus\", () => {\n      const mockSetState = jest.genMockFn();\n      const context = {\n        state: {\n          editorFocus: true,\n          linkEditorFocus: false,\n        },\n        setState: mockSetState,\n      };\n\n      RichTextEditor.prototype.componentWillReceiveProps.call(context);\n      expect(mockSetState.mock.calls.length).toBe(0);\n    });\n\n    it(\"does not call setState when link editor is in focus\", () => {\n      const mockSetState = jest.genMockFn();\n      const context = {\n        state: {\n          editorFocus: false,\n          linkEditorFocus: true,\n        },\n        setState: mockSetState,\n      };\n\n      RichTextEditor.prototype.componentWillReceiveProps.call(context);\n      expect(mockSetState.mock.calls.length).toBe(0);\n    });\n\n    it(\"calls setState based on incoming `value` prop\", () => {\n      const mockSetState = jest.genMockFn();\n      const context = {\n        state: {\n          editorFocus: false,\n          linkEditorFocus: false,\n          editorState: \"old value\",\n        },\n        // Identity (pass-through) functions\n        getEditorStateAsHTML: value => value,\n        createEditorStateFromHTML: value => value,\n        setState: mockSetState,\n      };\n      const expectedValue = \"new value\";\n      const nextProps = {\n        value: expectedValue,\n      };\n\n      RichTextEditor.prototype.componentWillReceiveProps.call(\n        context,\n        nextProps\n      );\n\n      expect(mockSetState).toBeCalledWith({ editorState: expectedValue });\n    });\n  });\n\n  describe(\"#shouldComponentUpdate\", () => {\n    let testFn;\n\n    beforeEach(() => {\n      testFn = RichTextEditor.prototype.shouldComponentUpdate;\n    });\n\n    it(\"returns true when link editor is in focus\", () => {\n      const context = {\n        props: {},\n        state: {\n          linkEditorFocus: true,\n          editorFocus: true,\n        },\n      };\n      const nextProps = {};\n      const nextState = {};\n\n      expect(testFn.call(context, nextProps, nextState)).toBe(true);\n    });\n\n    it(\"returns true when placeholder prop is different\", () => {\n      const context = {\n        props: {\n          placeholder: \"hold thy place\",\n        },\n        state: {\n          linkEditorFocus: false,\n          editorFocus: true,\n        },\n      };\n      const nextProps = {\n        // This is the incoming value\n        placeholder: \"Enter text..\",\n      };\n      const nextState = {};\n\n      expect(testFn.call(context, nextProps, nextState)).toBe(true);\n    });\n\n    it(\"returns true when value prop is different\", () => {\n      const context = {\n        props: {\n          value: \"\",\n        },\n        state: {\n          linkEditorFocus: false,\n          editorFocus: true,\n        },\n      };\n      const nextProps = {\n        // This is the incoming value\n        value: \"My note\",\n      };\n      const nextState = {};\n\n      expect(testFn.call(context, nextProps, nextState)).toBe(true);\n    });\n\n    it(\"returns true when editorState is different\", () => {\n      const oldEditorState = {};\n      const newEditorState = {};\n      const context = {\n        props: {},\n        state: {\n          linkEditorFocus: false,\n          editorFocus: true,\n          editorState: oldEditorState,\n        },\n      };\n      const nextProps = {};\n      const nextState = {\n        // This is the incoming value\n        editorState: newEditorState,\n      };\n\n      expect(testFn.call(context, nextProps, nextState)).toBe(true);\n    });\n\n    it(\"returns true when incoming value is different\", () => {\n      const sameString = \"samesame\";\n      const oldEditorState = {\n        value: \"old value\",\n      };\n      const context = {\n        props: {\n          placeholder: sameString,\n          value: sameString,\n        },\n        state: {\n          linkEditorFocus: false,\n          editorFocus: false,\n          editorState: oldEditorState,\n        },\n        // This will return different incoming value\n        getEditorStateAsHTML: () => \"something different\",\n      };\n      const nextProps = {\n        placeholder: sameString,\n        value: sameString,\n      };\n      const nextState = {\n        editorState: oldEditorState,\n      };\n\n      expect(testFn.call(context, nextProps, nextState)).toBe(true);\n    });\n\n    it(\"returns false when incoming value is same\", () => {\n      const sameString = \"samesame\";\n      const oldEditorState = {\n        value: \"old value\",\n      };\n      const context = {\n        props: {\n          placeholder: sameString,\n          value: sameString,\n        },\n        state: {\n          linkEditorFocus: false,\n          editorFocus: false,\n          editorState: oldEditorState,\n        },\n        // This will return incoming value equivalent to current value\n        getEditorStateAsHTML: () => sameString,\n      };\n      const nextProps = {\n        placeholder: sameString,\n        value: sameString,\n      };\n      const nextState = {\n        editorState: oldEditorState,\n      };\n\n      expect(testFn.call(context, nextProps, nextState)).toBe(false);\n    });\n  });\n\n  describe(\"#onChange\", () => {\n    const testFn = RichTextEditor.prototype.onChange;\n    const mockEntityKey = MockDraftCommands[\"_entityKey\"];\n\n    it(\"sets new state with passed editorState\", () => {\n      const mockValue = \"samesame\";\n      const mockSetState = jest.genMockFn();\n      const editorState = {\n        /*\n                 * Our `cursorHasLink` mock returns the selection object.\n                 * Prevent assigning `selectedLinkID` to null.\n                 */\n        getSelection: () => true,\n        // Prevent dispatching to plotly by using existing value\n        value: mockValue,\n      };\n      const context = {\n        state: {\n          // Prevent assinging selectedLinkID by using existing value.\n          selectedLinkID: mockEntityKey,\n        },\n        props: {\n          value: mockValue,\n          onChange: () => {},\n        },\n        setState: mockSetState,\n        // Return the value prop of passed editorState (fake behavior)\n        getEditorStateAsHTML: _editorState => _editorState.value,\n      };\n\n      testFn.call(context, editorState);\n\n      expect(mockSetState).toBeCalledWith({ editorState });\n    });\n\n    it(\"does not dispatch changes to plotly when value is same\", () => {\n      const mockValue = \"samesame\";\n      const mockSetState = jest.genMockFn();\n      const mockPlotlyOnChange = jest.genMockFn();\n      const editorState = {\n        /*\n                 * Our `cursorHasLink` mock returns the selection object.\n                 * Prevent assigning `selectedLinkID` to null.\n                 */\n        getSelection: () => true,\n        // Prevent dispatching to plotly by using existing value\n        value: mockValue,\n      };\n      const context = {\n        state: {\n          // Prevent assinging selectedLinkID by using existing value.\n          selectedLinkID: mockEntityKey,\n        },\n        props: {\n          value: mockValue,\n          onChange: mockPlotlyOnChange,\n        },\n        setState: mockSetState,\n        // Return the value prop of passed editorState (fake behavior)\n        getEditorStateAsHTML: _editorState => _editorState.value,\n      };\n\n      testFn.call(context, editorState);\n\n      expect(mockPlotlyOnChange.mock.calls.length).toBe(0);\n    });\n\n    it(\"dispatches changes to plotly when value differs\", () => {\n      const oldValue = \"old\";\n      const newValue = \"new\";\n      const mockSetState = jest.genMockFn();\n      const mockDebounce = require(\"../debounce\").default;\n      const mockPlotlyOnChange = jest.genMockFn();\n      const editorState = {\n        /*\n                 * Our `cursorHasLink` mock returns the selection object.\n                 * Prevent assigning `selectedLinkID` to null.\n                 */\n        getSelection: () => true,\n        // A new value in editorState should be dispatched to plotly\n        value: newValue,\n      };\n      const context = {\n        state: {\n          // Prevent assinging selectedLinkID by using existing value.\n          selectedLinkID: mockEntityKey,\n        },\n        props: {\n          value: oldValue,\n          onChange: mockPlotlyOnChange,\n        },\n        setState: mockSetState,\n        // Return the value prop of passed editorState (fake behavior)\n        getEditorStateAsHTML: _editorState => _editorState.value,\n      };\n\n      testFn.call(context, editorState);\n\n      expect(mockDebounce).toBeCalledWith(mockPlotlyOnChange, [newValue]);\n    });\n\n    it(\"sets selected link in state\", () => {\n      const oldLinkID = null;\n      const mockValue = \"samesame\";\n      const mockSetState = jest.genMockFn();\n      const editorState = {\n        /*\n                 * Our `cursorHasLink` mock returns the selection object.\n                 * Prevent assigning `selectedLinkID` to null.\n                 */\n        getSelection: () => true,\n        // Prevent dispatching to plotly by using existing value\n        value: mockValue,\n      };\n      const context = {\n        state: {\n          // Set a different linkID than the mock to trigger update\n          selectedLinkID: oldLinkID,\n        },\n        props: {\n          value: mockValue,\n          onChange: () => {},\n        },\n        setState: mockSetState,\n        // Return the value prop of passed editorState (fake behavior)\n        getEditorStateAsHTML: _editorState => _editorState.value,\n      };\n\n      testFn.call(context, editorState);\n\n      expect(oldLinkID).not.toBe(mockEntityKey);\n      expect(mockSetState).toBeCalledWith({\n        editorState,\n        selectedLinkID: mockEntityKey,\n      });\n    });\n\n    it(\"updates selected link in state\", () => {\n      const oldLinkID = \"oldLinkID\";\n      const mockValue = \"samesame\";\n      const mockSetState = jest.genMockFn();\n      const editorState = {\n        /*\n                 * Our `cursorHasLink` mock returns the selection object.\n                 * Prevent assigning `selectedLinkID` to null.\n                 */\n        getSelection: () => true,\n        // Prevent dispatching to plotly by using existing value\n        value: mockValue,\n      };\n      const context = {\n        state: {\n          // Set a different linkID than the mock to trigger update\n          selectedLinkID: oldLinkID,\n        },\n        props: {\n          value: mockValue,\n          onChange: () => {},\n        },\n        setState: mockSetState,\n        // Return the value prop of passed editorState (fake behavior)\n        getEditorStateAsHTML: _editorState => _editorState.value,\n      };\n\n      testFn.call(context, editorState);\n\n      expect(oldLinkID).not.toBe(mockEntityKey);\n      expect(mockSetState).toBeCalledWith({\n        editorState,\n        selectedLinkID: mockEntityKey,\n      });\n    });\n\n    it(\"removes unselected link from state\", () => {\n      const mockValue = \"samesame\";\n      const mockSetState = jest.genMockFn();\n      const editorState = {\n        /*\n                 * Our `cursorHasLink` mock returns the selection object.\n                 * Set to `false` to trigger clearing of `selectedLinkID`.\n                 */\n        getSelection: () => false,\n        // Prevent dispatching to plotly by using existing value\n        value: mockValue,\n      };\n      const context = {\n        state: {},\n        props: {\n          value: mockValue,\n          onChange: () => {},\n        },\n        setState: mockSetState,\n        // Return the value prop of passed editorState (fake behavior)\n        getEditorStateAsHTML: _editorState => _editorState.value,\n      };\n\n      testFn.call(context, editorState);\n\n      expect(mockSetState).toBeCalledWith({\n        editorState,\n        selectedLinkID: null,\n      });\n    });\n  });\n\n  describe(\"#onLinkEditorClose\", () => {\n    let mockSetState;\n    let context;\n    let testFn;\n\n    beforeEach(() => {\n      mockSetState = jest.genMockFn();\n      context = {\n        focus: () => {},\n        state: {\n          editorState: {},\n        },\n        setState: mockSetState,\n      };\n      testFn = RichTextEditor.prototype.onLinkEditorClose;\n    });\n\n    it(\"sets linkEditorFocus state to false\", () => {\n      testFn.call(context);\n\n      expect(mockSetState.mock.calls.length).toBe(1);\n      expect(mockSetState.mock.calls[0][0].linkEditorFocus).toBe(false);\n    });\n\n    it(\"sets selectedLinkID state to null\", () => {\n      testFn.call(context);\n\n      expect(mockSetState.mock.calls.length).toBe(1);\n      expect(mockSetState.mock.calls[0][0].selectedLinkID).toBe(null);\n    });\n  });\n});\n"]}