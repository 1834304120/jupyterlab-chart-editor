{"version":3,"sources":["../../../../../../src/components/widgets/annotation_editor/editors/__tests__/StyleButton-test.js"],"names":["describe","getButtonElement","component","find","it","labelElement","button","expect","length","toBe","prop","contains","activeClass","hasClass","mockOnToggle","jest","genMockFn","simulate","toBeCalledWith"],"mappings":";;AAAA;;;;AACA;;AAEA;;;;;;AAEAA,SAAS,aAAT,EAAwB,YAAM;AAC5B,MAAMC,mBAAmB,SAAnBA,gBAAmB;AAAA,WACvBC,UAAUC,IAAV,CAAe,gCAAf,CADuB;AAAA,GAAzB;;AAGAC,KAAG,iCAAH,EAAsC,YAAM;AAC1C,QAAMC,eAAe;AAAA;AAAA;AAAA;AAAA,KAArB;;AAEA,QAAMH,YAAY,qBAChB;AACE,cAAQ,KADV;AAEE,aAAOG,YAFT;AAGE,gBAAU,oBAAM,CAAE,CAHpB;AAIE,aAAM;AAJR,MADgB,CAAlB;;AASA,QAAMC,SAASL,iBAAiBC,SAAjB,CAAf;;AAEAK,WAAOD,OAAOE,MAAd,EAAsBC,IAAtB,CAA2B,CAA3B;AACAF,WAAOD,OAAOI,IAAP,CAAY,WAAZ,CAAP,EAAiCD,IAAjC,CAAsC,QAAtC;AACAF,WAAOD,OAAOI,IAAP,CAAY,cAAZ,CAAP,EAAoCD,IAApC,CAAyC,KAAzC;AACAF,WAAOD,OAAOK,QAAP,CAAgBN,YAAhB,CAAP,EAAsCI,IAAtC,CAA2C,IAA3C;AACD,GAlBD;;AAoBAL,KAAG,+BAAH,EAAoC,YAAM;AACxC,QAAMC,eAAe;AAAA;AAAA;AAAA;AAAA,KAArB;;AAEA,QAAMH,YAAY,qBAChB;AACE,cAAQ,IADV;AAEE,aAAOG,YAFT;AAGE,gBAAU,oBAAM,CAAE,CAHpB;AAIE,aAAM;AAJR,MADgB,CAAlB;;AASA,QAAMO,cAAc,uCAApB;AACA,QAAMN,SAASL,iBAAiBC,SAAjB,CAAf;;AAEAK,WAAOD,OAAOO,QAAP,CAAgBD,WAAhB,CAAP,EAAqCH,IAArC,CAA0C,IAA1C;AACAF,WAAOD,OAAOI,IAAP,CAAY,WAAZ,CAAP,EAAiCD,IAAjC,CAAsC,QAAtC;AACAF,WAAOD,OAAOI,IAAP,CAAY,cAAZ,CAAP,EAAoCD,IAApC,CAAyC,IAAzC;AACAF,WAAOD,OAAOK,QAAP,CAAgBN,YAAhB,CAAP,EAAsCI,IAAtC,CAA2C,IAA3C;AACD,GAnBD;;AAqBAL,KAAG,yBAAH,EAA8B,YAAM;AAClC,QAAMC,eAAe;AAAA;AAAA;AAAA;AAAA,KAArB;AACA,QAAMS,eAAeC,KAAKC,SAAL,EAArB;;AAEA,QAAMd,YAAY,mBAChB;AACE,cAAQ,KADV;AAEE,aAAOG,YAFT;AAGE,aAAO,MAHT;AAIE,gBAAUS;AAJZ,MADgB,CAAlB;;AASAb,qBAAiBC,SAAjB,EAA4Be,QAA5B,CAAqC,WAArC;;AAEAV,WAAOO,YAAP,EAAqBI,cAArB,CAAoC,MAApC;AACD,GAhBD;AAiBD,CA9DD","file":"StyleButton-test.js","sourcesContent":["import React from \"react\";\nimport { mount, shallow } from \"enzyme\";\n\nimport StyleButton from \"../StyleButton\";\n\ndescribe(\"StyleButton\", () => {\n  const getButtonElement = component =>\n    component.find(\".rich-text-editor__styleButton\");\n\n  it(\"Renders an inactive StyleButton\", () => {\n    const labelElement = <span>B</span>;\n\n    const component = shallow(\n      <StyleButton\n        active={false}\n        label={labelElement}\n        onToggle={() => {}}\n        value=\"BOLD\"\n      />\n    );\n\n    const button = getButtonElement(component);\n\n    expect(button.length).toBe(1);\n    expect(button.prop(\"data-role\")).toBe(\"button\");\n    expect(button.prop(\"data-pressed\")).toBe(false);\n    expect(button.contains(labelElement)).toBe(true);\n  });\n\n  it(\"Renders an active StyleButton\", () => {\n    const labelElement = <span>B</span>;\n\n    const component = shallow(\n      <StyleButton\n        active={true}\n        label={labelElement}\n        onToggle={() => {}}\n        value=\"BOLD\"\n      />\n    );\n\n    const activeClass = \"rich-text-editor__styleButton--active\";\n    const button = getButtonElement(component);\n\n    expect(button.hasClass(activeClass)).toBe(true);\n    expect(button.prop(\"data-role\")).toBe(\"button\");\n    expect(button.prop(\"data-pressed\")).toBe(true);\n    expect(button.contains(labelElement)).toBe(true);\n  });\n\n  it(\"Calls back when toggled\", () => {\n    const labelElement = <span>B</span>;\n    const mockOnToggle = jest.genMockFn();\n\n    const component = mount(\n      <StyleButton\n        active={false}\n        label={labelElement}\n        value={\"BOLD\"}\n        onToggle={mockOnToggle}\n      />\n    );\n\n    getButtonElement(component).simulate(\"mousedown\");\n\n    expect(mockOnToggle).toBeCalledWith(\"BOLD\");\n  });\n});\n"]}