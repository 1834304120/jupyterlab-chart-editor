{"version":3,"sources":["../../../../../src/components/widgets/annotation_editor/editors/LinkEditor.js"],"names":["LinkEditor","props","state","position","getUpdatedPosition","originalLinkURL","linkURL","getRef","bind","c","_ref","trim","focus","nextProps","linkID","setState","setSelectionRange","length","coordinates","x","y","urlValue","onURLChange","ev","key","preventDefault","onClose","onInputChange","onBlur","onFocus","placeholderText","urlText","left","top","target","value","onInputKeyDown","propTypes","string","isRequired","func","shape","number","defaultProps"],"mappings":";;;;;;;;AAKA;;;;AACA;;AACA;;AACA;;;;;;;;+eARA;;;;;IAUMA,U;;;AACJ,sBAAYC,KAAZ,EAAmB;AAAA;;AAAA,wHACXA,KADW;;AAGjB,UAAKC,KAAL,GAAa;AACX;AACAC,gBAAU,MAAKC,kBAAL,CAAwBH,KAAxB,CAFC;AAGXI,uBAAiBJ,MAAMK;AAHZ,KAAb;;AAMA,UAAKC,MAAL,GAAc,MAAKA,MAAL,CAAYC,IAAZ,OAAd;AATiB;AAUlB;;;;2BAEMC,C,EAAG;AACR,WAAKC,IAAL,GAAYD,CAAZ;AACD;;;wCAEmB;AAClB;AACA,UAAI,KAAKR,KAAL,CAAWK,OAAX,CAAmBK,IAAnB,OAA8B,EAAlC,EAAsC;AACpC,aAAKD,IAAL,IAAa,KAAKA,IAAL,CAAUE,KAAV,EAAb;AACD;AACF;;;8CAEyBC,S,EAAW;AAAA,UAC3BZ,KAD2B,GACjB,IADiB,CAC3BA,KAD2B;;AAGnC;;AACA,UAAIY,UAAUC,MAAV,KAAqBb,MAAMa,MAA/B,EAAuC;AACrC,aAAKC,QAAL,CAAc;AACZZ,oBAAU,KAAKC,kBAAL,CAAwBH,KAAxB;AADE,SAAd;AAGD;AACF;;;yCAEoB;AACnB;AACA;AACA;AACA,WAAKS,IAAL,IACE,KAAKA,IAAL,CAAUM,iBAAV,CACE,KAAKf,KAAL,CAAWK,OAAX,CAAmBW,MADrB,EAEE,KAAKhB,KAAL,CAAWK,OAAX,CAAmBW,MAFrB,CADF;AAKD;;;uCAEkBhB,K,EAAO;AAAA,+BACPA,MAAMiB,WADC;AAAA,UAChBC,CADgB,sBAChBA,CADgB;AAAA,UACbC,CADa,sBACbA,CADa;;;AAGxB,aAAO,EAAED,IAAF,EAAKC,IAAL,EAAP;AACD;;;kCAEaC,Q,EAAU;AAAA,mBACU,KAAKpB,KADf;AAAA,UACda,MADc,UACdA,MADc;AAAA,UACNQ,WADM,UACNA,WADM;;AAGtB;;AACAA,kBAAYR,MAAZ,EAAoBO,QAApB;AACD;;;mCAEcE,E,EAAI;AACjB;;;;AADiB,UAKTC,GALS,GAKDD,EALC,CAKTC,GALS;;;AAOjB,UAAIA,6BAAJ,EAAwB;AACtB;AACAD,WAAGE,cAAH;;AAEA,eAAO,KAAKxB,KAAL,CAAWyB,OAAX,CAAmB,KAAKzB,KAAL,CAAWa,MAA9B,CAAP;AACD;;AAED,UAAIU,6BAAJ,EAAwB;AACtB;AACAD,WAAGE,cAAH;;AAEA;AACA,aAAKE,aAAL,CAAmB,KAAKzB,KAAL,CAAWG,eAA9B;;AAEA,eAAO,KAAKJ,KAAL,CAAWyB,OAAX,CAAmB,KAAKzB,KAAL,CAAWa,MAA9B,CAAP;AACD;AACF;;;6BAEQ;AAAA;;AAAA,UACCX,QADD,GACc,KAAKD,KADnB,CACCC,QADD;AAAA,oBAE8B,KAAKF,KAFnC;AAAA,UAEC2B,MAFD,WAECA,MAFD;AAAA,UAESC,OAFT,WAESA,OAFT;AAAA,UAEkBvB,OAFlB,WAEkBA,OAFlB;;AAGP,UAAMwB,kBAAkB,aAAE,gBAAF,CAAxB;AACA,UAAMC,UAAU,aAAE,KAAF,CAAhB;;AAEA,aACE;AAAA;AAAA;AACE,qBAAU,aADZ;AAEE,iBAAO,EAAEC,MAAM7B,SAASgB,CAAjB,EAAoBc,KAAK9B,SAASiB,CAAlC;AAFT;AAIE;AAAA;AAAA,YAAM,WAAU,oBAAhB;AAAsCW;AAAtC,SAJF;AAME;AACE,qBAAU,oBADZ;AAEE,kBAAQH,MAFV;AAGE,mBAASC,OAHX;AAIE,oBAAU;AAAA,mBAAM,OAAKF,aAAL,CAAmBJ,GAAGW,MAAH,CAAUC,KAA7B,CAAN;AAAA,WAJZ;AAKE,qBAAW;AAAA,mBAAM,OAAKC,cAAL,CAAoBb,EAApB,CAAN;AAAA,WALb;AAME,eAAK,KAAKhB,MANZ;AAOE,iBAAOD,OAPT;AAQE,uBAAawB;AARf;AANF,OADF;AAmBD;;;;;;AAGH9B,WAAWqC,SAAX,GAAuB;AACrBvB,UAAQ,iBAAUwB,MAAV,CAAiBC,UADJ;AAErBjC,WAAS,iBAAUgC,MAAV,CAAiBC,UAFL;AAGrBX,UAAQ,iBAAUY,IAAV,CAAeD,UAHF;AAIrBV,WAAS,iBAAUW,IAAV,CAAeD,UAJH;AAKrBb,WAAS,iBAAUc,IAAV,CAAeD,UALH;AAMrBjB,eAAa,iBAAUkB,IAAV,CAAeD,UANP;;AAQrBrB,eAAa,iBAAUuB,KAAV,CAAgB;AAC3BtB,OAAG,iBAAUuB,MADc;AAE3BtB,OAAG,iBAAUsB;AAFc,GAAhB;AARQ,CAAvB;;AAcA1C,WAAW2C,YAAX,GAA0B;AACxBzB,eAAa;AACXC,OAAG,CADQ;AAEXC,OAAG;AAFQ;AADW,CAA1B;;kBAOepB,U","file":"LinkEditor.js","sourcesContent":["/*\n * The LinkEditor is a simple UI component that floats below a selected link\n * in the RichTextEditor, and lets the user enter a URL.\n */\n\nimport React, { Component, PropTypes } from \"react\";\nimport { RETURN_KEY, ESCAPE_KEY } from \"@workspace/constants/workspace\";\nimport { _ } from \"@common/utils/i18n\";\nimport { findDOMNode } from \"react-dom\";\n\nclass LinkEditor extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      // Use cached position to maintain position during times of focus.\n      position: this.getUpdatedPosition(props),\n      originalLinkURL: props.linkURL,\n    };\n\n    this.getRef = this.getRef.bind(this);\n  }\n\n  getRef(c) {\n    this._ref = c;\n  }\n\n  componentDidMount() {\n    // Focus the input field if the URL value is empty\n    if (this.props.linkURL.trim() === \"\") {\n      this._ref && this._ref.focus();\n    }\n  }\n\n  componentWillReceiveProps(nextProps) {\n    const { props } = this;\n\n    // Update position if we are editing a new link\n    if (nextProps.linkID !== props.linkID) {\n      this.setState({\n        position: this.getUpdatedPosition(props),\n      });\n    }\n  }\n\n  componentDidUpdate() {\n    // Cursor dissappears when component rerenders, to make sure it's present\n    // we're using setSelection range to make it appear at the end of text:\n    // https://github.com/plotly/streambed/issues/9964\n    this._ref &&\n      this._ref.setSelectionRange(\n        this.props.linkURL.length,\n        this.props.linkURL.length\n      );\n  }\n\n  getUpdatedPosition(props) {\n    const { x, y } = props.coordinates;\n\n    return { x, y };\n  }\n\n  onInputChange(urlValue) {\n    const { linkID, onURLChange } = this.props;\n\n    // Call back to parent\n    onURLChange(linkID, urlValue);\n  }\n\n  onInputKeyDown(ev) {\n    /*\n         * `KeyboardEvent.key` enjoys excellent cross-browser support.\n         * https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key\n         */\n    const { key } = ev;\n\n    if (key === RETURN_KEY) {\n      // Save changes\n      ev.preventDefault();\n\n      return this.props.onClose(this.props.linkID);\n    }\n\n    if (key === ESCAPE_KEY) {\n      // Cancel changes\n      ev.preventDefault();\n\n      // Restore original URL\n      this.onInputChange(this.state.originalLinkURL);\n\n      return this.props.onClose(this.props.linkID);\n    }\n  }\n\n  render() {\n    const { position } = this.state;\n    const { onBlur, onFocus, linkURL } = this.props;\n    const placeholderText = _(\"Enter link URL\");\n    const urlText = _(\"URL\");\n\n    return (\n      <div\n        className=\"link-editor\"\n        style={{ left: position.x, top: position.y }}\n      >\n        <span className=\"link-editor__label\">{urlText}</span>\n\n        <input\n          className=\"link-editor__input\"\n          onBlur={onBlur}\n          onFocus={onFocus}\n          onChange={ev => this.onInputChange(ev.target.value)}\n          onKeyDown={ev => this.onInputKeyDown(ev)}\n          ref={this.getRef}\n          value={linkURL}\n          placeholder={placeholderText}\n        />\n      </div>\n    );\n  }\n}\n\nLinkEditor.propTypes = {\n  linkID: PropTypes.string.isRequired,\n  linkURL: PropTypes.string.isRequired,\n  onBlur: PropTypes.func.isRequired,\n  onFocus: PropTypes.func.isRequired,\n  onClose: PropTypes.func.isRequired,\n  onURLChange: PropTypes.func.isRequired,\n\n  coordinates: PropTypes.shape({\n    x: PropTypes.number,\n    y: PropTypes.number,\n  }),\n};\n\nLinkEditor.defaultProps = {\n  coordinates: {\n    x: 0,\n    y: 0,\n  },\n};\n\nexport default LinkEditor;\n"]}