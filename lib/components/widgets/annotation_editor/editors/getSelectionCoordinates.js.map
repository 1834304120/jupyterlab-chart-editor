{"version":3,"sources":["../../../../../src/components/widgets/annotation_editor/editors/getSelectionCoordinates.js"],"names":["getSelectionRect","selection","rangeCount","range","getRangeAt","collapse","boundingClientRect","getBoundingClientRect","clientRect","getClientRects","top","getscrollOffset","window","pageXOffset","x","y","containerOffset","pageYOffset","scrollX","scrollY","getSelectionCoordinates","scrollOffset","coordinates","anchorNode","rect","left"],"mappings":";;;;;AAAA;;;;AAIA,IAAMA,mBAAmB,SAAnBA,gBAAmB,YAAa;AACpC;AACA,MAAI,CAACC,UAAUC,UAAf,EAA2B;AACzB,WAAO,IAAP;AACD;;AAED;AACA;AACA,MAAMC,QAAQF,UAAUG,UAAV,CAAqB,CAArB,CAAd;;AAEA;AACAD,QAAME,QAAN,CAAe,KAAf;;AAEA;;;;;;AAMA,MAAMC,qBAAqBH,MAAMI,qBAAN,EAA3B;AACA,MAAMC,aAAaL,MAAMM,cAAN,GAAuB,CAAvB,CAAnB;;AAEA,SAAOH,mBAAmBI,GAAnB,GAAyB,CAAzB,GAA6BJ,kBAA7B,GAAkDE,UAAzD;AACD,CAvBD;;AAyBA,IAAMG,kBAAkB,SAAlBA,eAAkB,kBAAmB;AACzC,MAAI,OAAOC,OAAOC,WAAd,KAA8B,QAAlC,EAA4C;AAC1C,WAAO;AACLC,SAAGF,OAAOC,WADL;AAELE,SAAGC,kBAAkBJ,OAAOK;AAFvB,KAAP;AAID;;AAED,MAAI,OAAOL,OAAOM,OAAd,KAA0B,QAA9B,EAAwC;AACtC,WAAO;AACLJ,SAAGF,OAAOM,OADL;AAELH,SAAGC,kBAAkBJ,OAAOO;AAFvB,KAAP;AAID;;AAED,SAAO,EAAEL,GAAG,CAAL,EAAQC,GAAGC,eAAX,EAAP;AACD,CAhBD;;AAkBA;;;;;;;;AAQA,IAAMI,0BAA0B,SAA1BA,uBAA0B,CAACnB,SAAD,EAAYe,eAAZ,EAAgC;AAC9D,MAAMK,eAAeV,gBAAgBK,eAAhB,CAArB;AACA,MAAMM,cAAc,EAAER,GAAGO,aAAaP,CAAlB,EAAqBC,GAAGM,aAAaN,CAArC,EAApB;;AAEA,MAAI,CAACd,SAAD,IAAc,CAACA,UAAUsB,UAA7B,EAAyC;AACvC,WAAOD,WAAP;AACD;;AAED,MAAME,OAAOxB,iBAAiBC,SAAjB,CAAb;;AAEA,MAAIuB,IAAJ,EAAU;AACR;AACAF,gBAAYR,CAAZ,IAAiBU,KAAKC,IAAtB;AACAH,gBAAYP,CAAZ,IAAiBS,KAAKd,GAAtB;AACD;;AAED,SAAOY,WAAP;AACD,CAjBD;;kBAmBeF,uB","file":"getSelectionCoordinates.js","sourcesContent":["/*\n * A small helper module for getting the coordinates of a DOM Selection object.\n */\n\nconst getSelectionRect = selection => {\n  // We need a range to get a rect.\n  if (!selection.rangeCount) {\n    return null;\n  }\n\n  // Introduction to the Range objects:\n  // http://www.quirksmode.org/dom/range_intro.html\n  const range = selection.getRangeAt(0);\n\n  // Collapse selection to end for consistent positioning\n  range.collapse(false);\n\n  /*\n     * Safari/WebKit has a bug where getBoundingClientRect has incorrect results\n     * I've consistently seen all measurements be 0 for Safari;\n     * use getClientRects as a workaround. -@coopy\n     * https://bugs.webkit.org/show_bug.cgi?id=46203\n     */\n  const boundingClientRect = range.getBoundingClientRect();\n  const clientRect = range.getClientRects()[0];\n\n  return boundingClientRect.top > 0 ? boundingClientRect : clientRect;\n};\n\nconst getscrollOffset = containerOffset => {\n  if (typeof window.pageXOffset === \"number\") {\n    return {\n      x: window.pageXOffset,\n      y: containerOffset + window.pageYOffset,\n    };\n  }\n\n  if (typeof window.scrollX === \"number\") {\n    return {\n      x: window.scrollX,\n      y: containerOffset + window.scrollY,\n    };\n  }\n\n  return { x: 0, y: containerOffset };\n};\n\n/**\n * Get the {x, y} coordinates of a DOM Selection object,\n * relative to the viewport.\n *\n * @param {Selection} selection a DOM Selection object\n *        (i.e. from `window.getSelection()`)\n * @returns {Object} An object with x and y in pixels\n */\nconst getSelectionCoordinates = (selection, containerOffset) => {\n  const scrollOffset = getscrollOffset(containerOffset);\n  const coordinates = { x: scrollOffset.x, y: scrollOffset.y };\n\n  if (!selection || !selection.anchorNode) {\n    return coordinates;\n  }\n\n  const rect = getSelectionRect(selection);\n\n  if (rect) {\n    // Add to the offset\n    coordinates.x += rect.left;\n    coordinates.y += rect.top;\n  }\n\n  return coordinates;\n};\n\nexport default getSelectionCoordinates;\n"]}