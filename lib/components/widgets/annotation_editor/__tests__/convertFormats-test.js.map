{"version":3,"sources":["../../../../../src/components/widgets/annotation_editor/__tests__/convertFormats-test.js"],"names":["describe","simpleExpr","complexExpr","wrappedSimpleExpr","wrappedComplexExpr","it","expect","toBe","emptyLaTeXExpr"],"mappings":"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","file":"convertFormats-test.js","sourcesContent":["import {\n  hasTextExpression,\n  isLaTeXExpr,\n  htmlToLaTeX,\n  laTeXToHTML,\n} from \"../convertFormats\";\n\ndescribe(\"convertFormats\", () => {\n  describe(\"isLaTeXExpr\", () => {\n    const simpleExpr = \"_int\";\n    const complexExpr = \"x^2 \\frac{d^2 y}{dx^2} + alpha^2 = 0\";\n    const wrappedSimpleExpr = `$${simpleExpr}$`;\n    const wrappedComplexExpr = `$${complexExpr}$`;\n\n    it(\"returns `true` for strings wrapped in `$...$`\", () => {\n      expect(isLaTeXExpr(\"$$\")).toBe(true);\n      expect(isLaTeXExpr(wrappedSimpleExpr)).toBe(true);\n      expect(isLaTeXExpr(wrappedComplexExpr)).toBe(true);\n    });\n\n    it(\"returns `false` for strings not wrapped in `$...$`\", () => {\n      expect(isLaTeXExpr(\"\")).toBe(false);\n      expect(isLaTeXExpr(\"$\")).toBe(false);\n      expect(isLaTeXExpr(\"_$$_\")).toBe(false);\n      expect(isLaTeXExpr(simpleExpr)).toBe(false);\n      expect(isLaTeXExpr(complexExpr)).toBe(false);\n    });\n  });\n\n  describe(\"hasTextExpression\", () => {\n    it(\"returns true when LaTeX contains `\\text` expression\", () => {\n      expect(hasTextExpression(\"$\\text{}$\")).toBe(true);\n      expect(hasTextExpression(\"$\\text{text}$\")).toBe(true);\n      expect(hasTextExpression(\"$\\text{text}\\text{more text}$\")).toBe(true);\n    });\n\n    it(\"returns false when LaTeX has no `\\text` expression\", () => {\n      expect(hasTextExpression(\"$$\")).toBe(false);\n      expect(hasTextExpression(\"$int{}$\")).toBe(false);\n    });\n  });\n\n  describe(\"htmlToLaTeX\", () => {\n    it(\"handles empty input\", () => {\n      const emptyLaTeXExpr = \"$\\\\text{}$\";\n\n      expect(htmlToLaTeX(\"\")).toBe(emptyLaTeXExpr);\n      expect(htmlToLaTeX(\" \")).toBe(emptyLaTeXExpr);\n      expect(htmlToLaTeX(\"\\n\")).toBe(emptyLaTeXExpr);\n      expect(htmlToLaTeX(\"\\t\")).toBe(emptyLaTeXExpr);\n      expect(htmlToLaTeX(\"\\n \\t\")).toBe(emptyLaTeXExpr);\n      expect(htmlToLaTeX(\"<br>\")).toBe(emptyLaTeXExpr);\n    });\n\n    it(\"converts a bare paragraph\", () => {\n      expect(htmlToLaTeX(\"A paragraph\")).toBe(\"$\\\\text{A paragraph}$\");\n      expect(htmlToLaTeX(\"A\\nparagraph\")).toBe(\"$\\\\text{A\\nparagraph}$\");\n      expect(htmlToLaTeX(\"A\\tparagraph\")).toBe(\"$\\\\text{A\\tparagraph}$\");\n      expect(htmlToLaTeX(\"\\nA paragraph\")).toBe(\"$\\\\text{A paragraph}$\");\n    });\n\n    it(\"converts a paragraph with inline styles\", () => {\n      expect(\n        htmlToLaTeX(\"<b>Bold</b> <i>text</i> x<sup>2</sup> a<sub>b</sub>\")\n      ).toBe(\"$\\\\text{Bold text x2 ab}$\");\n    });\n\n    it(\"converts two paragraphs\", () => {\n      expect(htmlToLaTeX(\"First para<br>Second para\")).toBe(\n        \"$\\\\text{First para}\\n\\\\text{Second para}$\"\n      );\n\n      expect(htmlToLaTeX(\"First para\\n<br>\\nSecond para\")).toBe(\n        \"$\\\\text{First para}\\n\\\\text{Second para}$\"\n      );\n    });\n\n    it(\"converts two paragraphs with inline styles\", () => {\n      expect(htmlToLaTeX(\"<b>First</b> para<br><i>Second</i> para\")).toBe(\n        \"$\\\\text{First para}\\n\\\\text{Second para}$\"\n      );\n    });\n\n    it(\"keeps empty newlines as newlines\", () => {\n      expect(htmlToLaTeX(\"Some text<br><br>More text\")).toBe(\n        \"$\\\\text{Some text}\\n\\n\\\\text{More text}$\"\n      );\n    });\n  });\n\n  describe(\"laTeXToHTML\", () => {\n    it(\"handles empty input\", () => {\n      expect(laTeXToHTML(\"\")).toBe(\"\");\n      expect(laTeXToHTML(\"$$\")).toBe(\"\");\n      expect(laTeXToHTML(\"$ $\")).toBe(\"\");\n      expect(laTeXToHTML(\"$\\n$\")).toBe(\"\");\n    });\n\n    it(\"converts empty text expression to empty string\", () => {\n      expect(laTeXToHTML(\"$\\text{}$\")).toBe(\"\");\n      expect(laTeXToHTML(\"$\\text{ }$\")).toBe(\"\");\n      expect(laTeXToHTML(\"$\\text{\\n}$\")).toBe(\"\");\n    });\n\n    it(\"converts a text expression to a paragraph\", () => {\n      expect(laTeXToHTML(\"$\\text{A paragraph}$\")).toBe(\"A paragraph\");\n    });\n\n    it(\"ignores other LaTeX expressions\", () => {\n      expect(laTeXToHTML(\"$int{}alpha\\text{A paragraph}\\beta$\")).toBe(\n        \"A paragraph\"\n      );\n    });\n\n    it(\"converts two text expressions to two paragraphs\", () => {\n      expect(\n        laTeXToHTML(\"$\\text{First paragraph}\\text{Second paragraph}$\")\n      ).toBe(\"First paragraph<br>Second paragraph\");\n\n      expect(\n        laTeXToHTML(\n          \"$int{}alpha\\text{First paragraph}\\beta\\text{Second paragraph}$\"\n        )\n      ).toBe(\"First paragraph<br>Second paragraph\");\n    });\n  });\n});\n"]}