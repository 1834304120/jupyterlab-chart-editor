{"version":3,"sources":["../../../../src/components/widgets/annotation_editor/AnnotationEditor.js"],"names":["MULTI_MODE_TAB","key","label","LATEX_TAB","EDIT_MODE_HTML","EDIT_MODE_RICH_TEXT","EDIT_MODE_STATE_TRANSITIONS","AnnotationEditor","createClass","propTypes","defaultValuePattern","instanceOf","RegExp","onChange","func","isRequired","placeholder","string","value","getDefaultProps","getInitialState","startTab","props","nextTab","selectedTab","convertValue","editor","renderTabPanel","render","RichTextEditorPanelContent","HTMLEditorPanelContent","MultiModeTabContent","LaTeXTabContent","onTabChange","trimmedValue","trim","trimmedValueLength","length","convertedValue","isDefaultValue","test","setState","state","renderConfirmationPanel","onCancel","onContinue"],"mappings":"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","file":"AnnotationEditor.js","sourcesContent":["import React, { PropTypes } from \"react\";\nimport ImmutablePropTypes from \"react-immutable-proptypes\";\nimport TabPanel from \"@workspace/components/widgets/TabPanel\";\nimport ModeSwitchPanel from \"@workspace/components/widgets/annotation_editor/ModeSwitchPanel\";\n\nimport { _ } from \"@common/utils/i18n\";\nimport {\n  isLaTeXExpr,\n  htmlToLaTeX,\n  laTeXToHTML,\n} from \"@workspace/components/widgets/annotation_editor/convertFormats\";\n\nimport FormatSwitchConfirmationPanel from \"@workspace/components/widgets/annotation_editor/FormatSwitchConfirmationPanel\";\nimport RichTextEditor from \"./editors/RichTextEditor\";\nimport HTMLEditor from \"./editors/HTMLEditor\";\nimport LaTeXEditor from \"./editors/LaTeXEditor\";\n\nconst MULTI_MODE_TAB = {\n  key: \"RICH_TEXT\",\n  label: _(\"Rich Text\"),\n};\nconst LATEX_TAB = {\n  key: \"LATEX\",\n  label: _(\"LaTeX\"),\n};\n\nconst EDIT_MODE_HTML = \"HTML\";\nconst EDIT_MODE_RICH_TEXT = \"RICH_TEXT\";\n\nconst EDIT_MODE_STATE_TRANSITIONS = {\n  [EDIT_MODE_HTML]: EDIT_MODE_RICH_TEXT,\n  [EDIT_MODE_RICH_TEXT]: EDIT_MODE_HTML,\n};\n\nconst AnnotationEditor = React.createClass({\n  propTypes: {\n    defaultValuePattern: PropTypes.instanceOf(RegExp),\n    onChange: PropTypes.func.isRequired,\n    placeholder: PropTypes.string,\n    value: PropTypes.string,\n  },\n\n  getDefaultProps() {\n    return {\n      defaultValuePattern: /^$/,\n      placeholder: \"\",\n      value: \"\",\n    };\n  },\n\n  getInitialState() {\n    const startTab = isLaTeXExpr(this.props.value)\n      ? LATEX_TAB.key\n      : MULTI_MODE_TAB.key;\n\n    return {\n      /*\n             * When nextTab is set, we are waiting for confirmation from the\n             * user before switching to the next tab.\n             */\n      nextTab: null,\n      selectedTab: startTab,\n    };\n  },\n\n  /**\n     * Convert a value to the format expected by the provided editor.\n     *\n     * @param {String} value The current value\n     * @param {String} editor The editor to convert for [RICH_TEXT|LATEX]\n     * @returns {String} The converted value\n     */\n  convertValue(value, editor) {\n    return editor === LATEX_TAB.key ? htmlToLaTeX(value) : laTeXToHTML(value);\n  },\n\n  renderTabPanel(render) {\n    if (!render) return null;\n\n    const { onChange, placeholder, value } = this.props;\n\n    const RichTextEditorPanelContent = (\n      <RichTextEditor\n        onChange={onChange}\n        placeholder={placeholder}\n        value={value}\n      />\n    );\n\n    const HTMLEditorPanelContent = (\n      <HTMLEditor onChange={onChange} placeholder={placeholder} value={value} />\n    );\n\n    const MultiModeTabContent = (\n      <ModeSwitchPanel\n        modesToComponents={{\n          [EDIT_MODE_RICH_TEXT]: RichTextEditorPanelContent,\n          [EDIT_MODE_HTML]: HTMLEditorPanelContent,\n        }}\n        modesToButtonLabels={{\n          [EDIT_MODE_RICH_TEXT]: _(\"Edit in HTML\"),\n          [EDIT_MODE_HTML]: _(\"Edit in Rich Text\"),\n        }}\n        modeTransitions={EDIT_MODE_STATE_TRANSITIONS}\n        defaultMode={EDIT_MODE_RICH_TEXT}\n      />\n    );\n\n    const LaTeXTabContent = (\n      <LaTeXEditor\n        onChange={onChange}\n        placeholder={placeholder}\n        value={value}\n      />\n    );\n\n    const onTabChange = (selectedTab, nextTab) => {\n      const { defaultValuePattern } = this.props;\n      const trimmedValue = value.trim();\n      const trimmedValueLength = trimmedValue.length;\n      const convertedValue = this.convertValue(trimmedValue, nextTab);\n      /*\n             * Check against default value - we have to compare the plain\n             * value, not the LaTeX format value with `\\text{}` wrapping.\n             */\n      const isDefaultValue = isLaTeXExpr(trimmedValue)\n        ? defaultValuePattern.test(convertedValue)\n        : defaultValuePattern.test(trimmedValue);\n\n      if (!isDefaultValue && trimmedValueLength > 0) {\n        // Show confirmation dialogue and defer tab change.\n        return this.setState({\n          nextTab,\n        });\n      }\n\n      // Show requested tab immediately.\n      this.setState({\n        selectedTab: nextTab,\n      });\n\n      // Convert the annotation and dispatch onChange action\n      onChange(convertedValue);\n    };\n\n    /*\n         * Can't use `components/Tabs.react`; the parent component needs\n         * to control the state which tab is active. `Tabs.react` takes an\n         * `onBeforeChange` callback prop that can cancel tab switching\n         * synchronously, but we need to be able to fully control when the\n         * switch takes place.\n         * Further, an initial attempt to use `Tabs.react` resulted in the\n         * following bugs:\n         *   1. Rich text editor style controls would not work.\n         *   2. Click on second tab would not register until user had\n         *      clicked on first tab.\n         * Issue: https://github.com/plotly/streambed/issues/6120\n         */\n    return (\n      <TabPanel\n        tabs={[MULTI_MODE_TAB, LATEX_TAB]}\n        components={{\n          [MULTI_MODE_TAB.key]: MultiModeTabContent,\n          [LATEX_TAB.key]: LaTeXTabContent,\n        }}\n        selectedTab={this.state.selectedTab}\n        onTabChange={onTabChange}\n      />\n    );\n  },\n\n  renderConfirmationPanel(render) {\n    if (!render) return null;\n\n    const onCancel = () => {\n      this.setState({\n        nextTab: null,\n      });\n    };\n\n    const onContinue = () => {\n      const { nextTab } = this.state;\n      const { onChange, value } = this.props;\n\n      // Set next tab as active\n      this.setState({\n        selectedTab: nextTab,\n        nextTab: null,\n      });\n\n      // Convert the annotation\n      const convertedValue = this.convertValue(value, nextTab);\n      onChange(convertedValue);\n    };\n\n    return (\n      <FormatSwitchConfirmationPanel\n        onCancel={onCancel}\n        onContinue={onContinue}\n        value={this.props.value}\n      />\n    );\n  },\n\n  render() {\n    const renderConfirmationPanel = this.state.nextTab !== null;\n\n    /*\n         * `renderConfirmationPanel` and `renderTabPanel` are mutually\n         * exclusive; only one will return a component.\n         */\n    return (\n      <div>\n        {this.renderConfirmationPanel(renderConfirmationPanel)}\n        {this.renderTabPanel(!renderConfirmationPanel)}\n      </div>\n    );\n  },\n});\n\nexport default AnnotationEditor;\n"]}