{"version":3,"sources":["../../../../src/components/widgets/annotation_editor/FormatSwitchConfirmationPanel.js"],"names":["getMessages","value","FormatSwitchConfirmationPanel","messages","props","onCancel","onContinue","propTypes","func","isRequired","string"],"mappings":";;;;;;AAAA;;;;AAEA;;AAIA;;;;AAEA,IAAMA,cAAc,SAAdA,WAAc,QAAS;AAC3B,MAAI,CAAC,iCAAYC,KAAZ,CAAL,EAAyB;AACvB,WAAO,CACL,aACE,wEADF,CADK,EAIL,aAAE,wDAAF,CAJK,CAAP;AAMD;;AAED,MAAI,uCAAkBA,KAAlB,CAAJ,EAA8B;AAC5B,WAAO,CACL,aAAE,uCAAF,CADK,EAEL,aAAE,8DAAF,CAFK,CAAP;AAID;;AAED,SAAO,CACL,aAAE,uCAAF,CADK,EAEL,aAAE,yCAAF,CAFK,CAAP;AAID,CArBD;;AAuBA,IAAMC,gCAAgC,SAAhCA,6BAAgC,QAAS;AAC7C,MAAMC,WAAWH,YAAYI,MAAMH,KAAlB,CAAjB;;AAEA,SACE;AAAA;AAAA,MAAK,WAAU,oBAAf;AACE;AAAA;AAAA,QAAK,WAAU,aAAf;AACE;AAAA;AAAA,UAAK,WAAU,oBAAf;AACE;AAAA;AAAA,YAAI,WAAU,6CAAd;AACG,uBAAE,WAAF;AADH,SADF;AAKE;AAAA;AAAA,YAAG,WAAU,gBAAb;AAA+BE,mBAAS,CAAT;AAA/B,SALF;AAOE;AAAA;AAAA,YAAG,WAAU,eAAb;AAA8BA,mBAAS,CAAT;AAA9B;AAPF,OADF;AAWE;AAAA;AAAA,UAAK,WAAU,6BAAf;AACE;AAAA;AAAA;AACE,uBAAU,qDADZ;AAEE,qBAASC,MAAMC;AAFjB;AAIG,uBAAE,SAAF;AAJH;AADF,OAXF;AAoBE;AAAA;AAAA,UAAK,WAAU,6BAAf;AACE;AAAA;AAAA;AACE,uBAAU,uDADZ;AAEE,qBAASD,MAAME;AAFjB;AAIG,uBAAE,UAAF;AAJH;AADF;AApBF;AADF,GADF;AAiCD,CApCD;;AAsCAJ,8BAA8BK,SAA9B,GAA0C;AACxCF,YAAU,iBAAUG,IAAV,CAAeC,UADe;AAExCH,cAAY,iBAAUE,IAAV,CAAeC,UAFa;AAGxCR,SAAO,iBAAUS,MAAV,CAAiBD;AAHgB,CAA1C;;kBAMeP,6B","file":"FormatSwitchConfirmationPanel.js","sourcesContent":["import React, { PropTypes } from \"react\";\n\nimport {\n  isLaTeXExpr,\n  hasTextExpression,\n} from \"@workspace/components/widgets/annotation_editor/convertFormats\";\nimport { _ } from \"@common/utils/i18n\";\n\nconst getMessages = value => {\n  if (!isLaTeXExpr(value)) {\n    return [\n      _(\n        \"LaTeX is a math typesetting language that doesn't work with rich text.\"\n      ),\n      _(\"Continuing will convert your note to LaTeX-style text.\"),\n    ];\n  }\n\n  if (hasTextExpression(value)) {\n    return [\n      _(\"Rich text is incompatible with LaTeX.\"),\n      _(\"Continuing will convert your LaTeX expression into raw text.\"),\n    ];\n  }\n\n  return [\n    _(\"Rich text is incompatible with LaTeX.\"),\n    _(\"Continuing will remove your expression.\"),\n  ];\n};\n\nconst FormatSwitchConfirmationPanel = props => {\n  const messages = getMessages(props.value);\n\n  return (\n    <div className=\"confirmation-panel\">\n      <div className=\"block-group\">\n        <div className=\"block +text-center\">\n          <h5 className=\"confirmation-panel__header +weight-semibold\">\n            {_(\"Heads up!\")}\n          </h5>\n\n          <p className=\"+weight-normal\">{messages[0]}</p>\n\n          <p className=\"+weight-light\">{messages[1]}</p>\n        </div>\n\n        <div className=\"block block-50 +text-center\">\n          <button\n            className=\"btnbase btn--default confirmation-panel__btn-cancel\"\n            onClick={props.onCancel}\n          >\n            {_(\"Go back\")}\n          </button>\n        </div>\n\n        <div className=\"block block-50 +text-center\">\n          <button\n            className=\"btnbase btn--primary confirmation-panel__btn-continue\"\n            onClick={props.onContinue}\n          >\n            {_(\"Continue\")}\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nFormatSwitchConfirmationPanel.propTypes = {\n  onCancel: PropTypes.func.isRequired,\n  onContinue: PropTypes.func.isRequired,\n  value: PropTypes.string.isRequired,\n};\n\nexport default FormatSwitchConfirmationPanel;\n"]}