{"version":3,"sources":["../../../src/components/widgets/SymbolSelectorStatefullWrapper.js"],"names":["SymbolSelectorStatefulWrapper","props","state","activeOption","symbolColor","isOpen","toggleMenu","bind","changeSymbol","closeMenu","nextProps","shouldNotUpdate","setState","document","addEventListener","removeEventListener","e","newSymbol","onChange","is3D","borderColor","traceType","propTypes","string","func","isRequired","bool"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;;;IAEqBA,6B;;;AACnB,yCAAYC,KAAZ,EAAmB;AAAA;;AAAA,8JACXA,KADW;;AAGjB,UAAKC,KAAL,GAAa;AACXC,oBAAcF,MAAME,YAAN,IAAsB,QADzB;AAEXC,mBAAaH,MAAMG,WAFR;AAGXC,cAAQ;AAHG,KAAb;AAKA,UAAKC,UAAL,GAAkB,MAAKA,UAAL,CAAgBC,IAAhB,OAAlB;AACA,UAAKC,YAAL,GAAoB,MAAKA,YAAL,CAAkBD,IAAlB,OAApB;AACA,UAAKE,SAAL,GAAiB,MAAKA,SAAL,CAAeF,IAAf,OAAjB;AAViB;AAWlB;;;;8CAEyBG,S,EAAW;AACnC,UAAMC,kBAAkB,oBACtB,oBAAQ,cAAR,EAAwBD,SAAxB,EAAmC,KAAKR,KAAxC,CADsB,EAEtB,oBAAQ,aAAR,EAAuBQ,SAAvB,EAAkC,KAAKR,KAAvC,CAFsB,CAAxB;;AAKA,UAAI,CAACS,eAAL,EAAsB;AACpB,aAAKC,QAAL,CAAc;AACZT,wBAAcO,UAAUP,YADZ;AAEZC,uBAAaM,UAAUN;AAFX,SAAd;AAID;AACF;;;wCAEmB;AAClBS,eAASC,gBAAT,CAA0B,OAA1B,EAAmC,KAAKL,SAAxC;AACD;;;2CAEsB;AACrBI,eAASE,mBAAT,CAA6B,OAA7B,EAAsC,KAAKN,SAA3C;AACD;;;8BAESO,C,EAAG;AACX,WAAKJ,QAAL,CAAc,EAAEP,QAAQ,KAAV,EAAd;AACD;;;iCAEY;AACX,WAAKO,QAAL,CAAc,EAAEP,QAAQ,CAAC,KAAKH,KAAL,CAAWG,MAAtB,EAAd;AACD;;;iCAEYY,S,EAAW;AACtB,WAAKL,QAAL,CAAc,EAAET,cAAcc,SAAhB,EAAd;AACA,WAAKhB,KAAL,CAAWiB,QAAX,CAAoBD,SAApB;AACD;;;6BAEQ;AACP,aACE;AACE,sBAAc,KAAKf,KAAL,CAAWC,YAD3B;AAEE,oBAAY,KAAKG,UAFnB;AAGE,sBAAc,KAAKE,YAHrB;AAIE,qBAAa,KAAKP,KAAL,CAAWG,WAJ1B;AAKE,gBAAQ,KAAKF,KAAL,CAAWG,MALrB;AAME,cAAM,KAAKJ,KAAL,CAAWkB,IANnB;AAOE,qBAAa,KAAKlB,KAAL,CAAWmB,WAP1B;AAQE,mBAAW,KAAKnB,KAAL,CAAWoB;AARxB,QADF;AAYD;;;;;;kBA9DkBrB,6B;;;AAiErBA,8BAA8BsB,SAA9B,GAA0C;AACxCnB,gBAAc,oBAAUoB,MADgB;AAExCL,YAAU,oBAAUM,IAAV,CAAeC,UAFe;AAGxCrB,eAAa,oBAAUmB,MAAV,CAAiBE,UAHU;AAIxCN,QAAM,oBAAUO,IAJwB;AAKxCN,eAAa,oBAAUG,MALiB;AAMxCF,aAAW,oBAAUE;AANmB,CAA1C","file":"SymbolSelectorStatefullWrapper.js","sourcesContent":["import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport SymbolSelector from \"./SymbolSelector\";\nimport { eqProps, allPass } from \"ramda\";\n\nexport default class SymbolSelectorStatefulWrapper extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      activeOption: props.activeOption || \"circle\",\n      symbolColor: props.symbolColor,\n      isOpen: false,\n    };\n    this.toggleMenu = this.toggleMenu.bind(this);\n    this.changeSymbol = this.changeSymbol.bind(this);\n    this.closeMenu = this.closeMenu.bind(this);\n  }\n\n  componentWillReceiveProps(nextProps) {\n    const shouldNotUpdate = allPass(\n      eqProps(\"activeOption\", nextProps, this.state),\n      eqProps(\"symbolColor\", nextProps, this.state)\n    );\n\n    if (!shouldNotUpdate) {\n      this.setState({\n        activeOption: nextProps.activeOption,\n        symbolColor: nextProps.symbolColor,\n      });\n    }\n  }\n\n  componentDidMount() {\n    document.addEventListener(\"click\", this.closeMenu);\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener(\"click\", this.closeMenu);\n  }\n\n  closeMenu(e) {\n    this.setState({ isOpen: false });\n  }\n\n  toggleMenu() {\n    this.setState({ isOpen: !this.state.isOpen });\n  }\n\n  changeSymbol(newSymbol) {\n    this.setState({ activeOption: newSymbol });\n    this.props.onChange(newSymbol);\n  }\n\n  render() {\n    return (\n      <SymbolSelector\n        activeOption={this.state.activeOption}\n        toggleMenu={this.toggleMenu}\n        changeSymbol={this.changeSymbol}\n        symbolColor={this.props.symbolColor}\n        isOpen={this.state.isOpen}\n        is3D={this.props.is3D}\n        borderColor={this.props.borderColor}\n        traceType={this.props.traceType}\n      />\n    );\n  }\n}\n\nSymbolSelectorStatefulWrapper.propTypes = {\n  activeOption: PropTypes.string,\n  onChange: PropTypes.func.isRequired,\n  symbolColor: PropTypes.string.isRequired,\n  is3D: PropTypes.bool,\n  borderColor: PropTypes.string,\n  traceType: PropTypes.string,\n};\n"]}