{"version":3,"sources":["../../../src/components/widgets/SymbolSelectorStatefullWrapper.js"],"names":["SymbolSelectorStatefulWrapper","props","state","activeOption","symbolColor","isOpen","toggleMenu","bind","changeSymbol","closeMenu","nextProps","shouldNotUpdate","setState","document","addEventListener","removeEventListener","e","newSymbol","onChange","is3D","borderColor","traceType","propTypes","string","func","isRequired","PropTypes","bool"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;AACA;;;;;;;;;;IAEqBA,6B;;;AAEjB,2CAAYC,KAAZ,EAAmB;AAAA;;AAAA,kKACTA,KADS;;AAGf,cAAKC,KAAL,GAAa;AACTC,0BAAcF,MAAME,YAAN,IAAsB,QAD3B;AAETC,yBAAaH,MAAMG,WAFV;AAGTC,oBAAQ;AAHC,SAAb;AAKA,cAAKC,UAAL,GAAkB,MAAKA,UAAL,CAAgBC,IAAhB,OAAlB;AACA,cAAKC,YAAL,GAAoB,MAAKA,YAAL,CAAkBD,IAAlB,OAApB;AACA,cAAKE,SAAL,GAAiB,MAAKA,SAAL,CAAeF,IAAf,OAAjB;AAVe;AAWlB;;;;kDAGyBG,S,EAAW;AACjC,gBAAMC,kBAAkB,oBACpB,oBAAQ,cAAR,EAAwBD,SAAxB,EAAmC,KAAKR,KAAxC,CADoB,EAEpB,oBAAQ,aAAR,EAAuBQ,SAAvB,EAAkC,KAAKR,KAAvC,CAFoB,CAAxB;;AAKA,gBAAI,CAACS,eAAL,EAAsB;AAClB,qBAAKC,QAAL,CAAc;AACVT,kCAAcO,UAAUP,YADd;AAEVC,iCAAaM,UAAUN;AAFb,iBAAd;AAIH;AACJ;;;4CAEmB;AAChBS,qBAASC,gBAAT,CAA0B,OAA1B,EAAmC,KAAKL,SAAxC;AACH;;;+CAEsB;AACnBI,qBAASE,mBAAT,CAA6B,OAA7B,EAAsC,KAAKN,SAA3C;AACH;;;kCAESO,C,EAAG;AACT,iBAAKJ,QAAL,CAAc,EAACP,QAAQ,KAAT,EAAd;AACH;;;qCAEY;AACT,iBAAKO,QAAL,CAAc,EAACP,QAAQ,CAAC,KAAKH,KAAL,CAAWG,MAArB,EAAd;AACH;;;qCAEYY,S,EAAW;AACpB,iBAAKL,QAAL,CAAc,EAACT,cAAcc,SAAf,EAAd;AACA,iBAAKhB,KAAL,CAAWiB,QAAX,CAAoBD,SAApB;AACH;;;iCAEQ;AACL,mBACI;AACI,8BAAc,KAAKf,KAAL,CAAWC,YAD7B;AAEI,4BAAY,KAAKG,UAFrB;AAGI,8BAAc,KAAKE,YAHvB;AAII,6BAAa,KAAKP,KAAL,CAAWG,WAJ5B;AAKI,wBAAQ,KAAKF,KAAL,CAAWG,MALvB;AAMI,sBAAM,KAAKJ,KAAL,CAAWkB,IANrB;AAOI,6BAAa,KAAKlB,KAAL,CAAWmB,WAP5B;AAQI,2BAAW,KAAKnB,KAAL,CAAWoB;AAR1B,cADJ;AAYH;;;;;;kBAhEgBrB,6B;;;AAmErBA,8BAA8BsB,SAA9B,GAA0C;AACtCnB,kBAAc,iBAAUoB,MADc;AAEtCL,cAAU,iBAAUM,IAAV,CAAeC,UAFa;AAGtCrB,iBAAa,iBAAUmB,MAAV,CAAiBE,UAHQ;AAItCN,UAAM,gBAAMO,SAAN,CAAgBC,IAJgB;AAKtCP,iBAAa,gBAAMM,SAAN,CAAgBH,MALS;AAMtCF,eAAW,gBAAMK,SAAN,CAAgBH;AANW,CAA1C","file":"SymbolSelectorStatefullWrapper.js","sourcesContent":["import React, {Component, PropTypes} from 'react';\nimport SymbolSelector from '@workspace/components/widgets/SymbolSelector';\nimport {eqProps, allPass} from 'ramda';\n\nexport default class SymbolSelectorStatefulWrapper extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            activeOption: props.activeOption || 'circle',\n            symbolColor: props.symbolColor,\n            isOpen: false\n        };\n        this.toggleMenu = this.toggleMenu.bind(this);\n        this.changeSymbol = this.changeSymbol.bind(this);\n        this.closeMenu = this.closeMenu.bind(this);\n    }\n\n\n    componentWillReceiveProps(nextProps) {\n        const shouldNotUpdate = allPass(\n            eqProps('activeOption', nextProps, this.state),\n            eqProps('symbolColor', nextProps, this.state)\n        );\n\n        if (!shouldNotUpdate) {\n            this.setState({\n                activeOption: nextProps.activeOption,\n                symbolColor: nextProps.symbolColor\n            });\n        }\n    }\n\n    componentDidMount() {\n        document.addEventListener('click', this.closeMenu);\n    }\n\n    componentWillUnmount() {\n        document.removeEventListener('click', this.closeMenu);\n    }\n\n    closeMenu(e) {\n        this.setState({isOpen: false});\n    }\n\n    toggleMenu() {\n        this.setState({isOpen: !this.state.isOpen});\n    }\n\n    changeSymbol(newSymbol) {\n        this.setState({activeOption: newSymbol});\n        this.props.onChange(newSymbol);\n    }\n\n    render() {\n        return (\n            <SymbolSelector\n                activeOption={this.state.activeOption}\n                toggleMenu={this.toggleMenu}\n                changeSymbol={this.changeSymbol}\n                symbolColor={this.props.symbolColor}\n                isOpen={this.state.isOpen}\n                is3D={this.props.is3D}\n                borderColor={this.props.borderColor}\n                traceType={this.props.traceType}\n            />\n        );\n    }\n}\n\nSymbolSelectorStatefulWrapper.propTypes = {\n    activeOption: PropTypes.string,\n    onChange: PropTypes.func.isRequired,\n    symbolColor: PropTypes.string.isRequired,\n    is3D: React.PropTypes.bool,\n    borderColor: React.PropTypes.string,\n    traceType: React.PropTypes.string\n};\n"]}