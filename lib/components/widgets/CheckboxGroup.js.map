{"version":3,"sources":["../../../src/components/widgets/CheckboxGroup.js"],"names":["CheckboxGroup","createClass","propTypes","options","arrayOf","shape","label","string","isRequired","value","checked","bool","onChange","func","className","orientation","getDefaultProps","getInitialState","props","componentWillReceiveProps","nextProps","setState","handleChange","evt","targetCheckbox","target","getAttribute","checkboxes","getCheckboxes","newOptions","i","length","push","findDOMNode","querySelectorAll","renderOptions","state","map","option","checkClass","itemClass","render","boxClass","checkbox__group_horizontal","module","exports"],"mappings":";;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,IAAMA,gBAAgB,gBAAMC,WAAN,CAAkB;AAAA;;AACtCC,aAAW;AACTC,aAAS,oBAAUC,OAAV,CACP,oBAAUC,KAAV,CAAgB;AACdC,aAAO,oBAAUC,MAAV,CAAiBC,UADV;AAEdC,aAAO,oBAAUF,MAAV,CAAiBC,UAFV;AAGdE,eAAS,oBAAUC,IAAV,CAAeH;AAHV,KAAhB,CADO,EAMPA,UAPO;AAQTI,cAAU,oBAAUC,IARX;AASTC,eAAW,oBAAUP,MATZ;AAUTQ,iBAAa,oBAAUR;AAVd,GAD2B;;AActCS,iBAdsC,6BAcpB;AAChB,WAAO;AACLF,iBAAW;AADN,KAAP;AAGD,GAlBqC;AAoBtCG,iBApBsC,6BAoBpB;AAChB,WAAO;AACLd,eAAS,KAAKe,KAAL,CAAWf;AADf,KAAP;AAGD,GAxBqC;;;AA0BtC;;;;AAIAgB,2BA9BsC,qCA8BZC,SA9BY,EA8BD;AACnC,SAAKC,QAAL,CAAc;AACZlB,eAASiB,UAAUjB;AADP,KAAd;AAGD,GAlCqC;;;AAoCtC;;;;;AAKAmB,cAzCsC,wBAyCzBC,GAzCyB,EAyCpB;AAChB;AACA,QAAMC,iBAAiBD,IAAIE,MAAJ,CAAWC,YAAX,CAAwB,YAAxB,CAAvB;;AAEA;AACA,QAAMC,aAAa,KAAKC,aAAL,EAAnB;AACA,QAAMC,aAAa,EAAnB;;AAEA;AACA,SAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIH,WAAWI,MAA/B,EAAuCD,GAAvC,EAA4C;AAC1C,UAAMrB,QAAQkB,WAAWG,CAAX,EAAcJ,YAAd,CAA2B,YAA3B,CAAd;AACA,UAAIhB,UAAUiB,WAAWG,CAAX,EAAcJ,YAAd,CAA2B,cAA3B,MAA+C,MAA7D;AACA,UAAIpB,QAAQqB,WAAWG,CAAX,EAAcJ,YAAd,CAA2B,YAA3B,CAAZ;;AAEA;AACA,UAAIF,mBAAmBf,KAAvB,EAA8BC,UAAU,CAACA,OAAX;;AAE9BmB,iBAAWG,IAAX,CAAgB,EAAE1B,YAAF,EAASG,YAAT,EAAgBC,gBAAhB,EAAhB;AACD;;AAED;AACA,SAAKW,QAAL,CAAc;AACZlB,eAAS0B;AADG,KAAd;;AAIA;AACA,SAAKX,KAAL,CAAWN,QAAX,CAAoBiB,UAApB;AACD,GApEqC;;;AAsEtC;;;AAGAD,eAzEsC,2BAyEtB;AACd,WAAO,mBAASK,WAAT,CAAqB,IAArB,EAA2BC,gBAA3B,CAA4C,mBAA5C,CAAP;AACD,GA3EqC;AA6EtCC,eA7EsC,2BA6EtB;AAAA;;AAAA,QACNpB,WADM,GACU,KAAKG,KADf,CACNH,WADM;;AAGd;;;;;AAIA,WAAO,KAAKqB,KAAL,CAAWjC,OAAX,CAAmBkC,GAAnB,CAAuB,UAACC,MAAD,EAASR,CAAT,EAAe;AAC3C,UAAMS,aAAa,0BAAW,CAAC,iBAAD,EAAoB,MAApB,CAAX,EAAwC;AACzD,2BAAmBD,OAAO5B;AAD+B,OAAxC,CAAnB;;AAIA,UAAM8B,YAAY,0BAAW,gBAAX,EAA6B;AAC7C,oCAA4BzB,gBAAgB,UADC;AAE7C,sCAA8BA,gBAAgB;AAFD,OAA7B,CAAlB;;AAKA,aACE;AAAA;AAAA,UAAK,KAAKe,CAAV,EAAa,WAAWU,SAAxB;AACE;AAAA;AAAA;AACE,uBAAU,eADZ;AAEE,iBAAKF,OAAO7B,KAFd;AAGE,qBAAS,MAAKa,YAHhB;AAIE,0BAAYgB,OAAO7B,KAJrB;AAKE,4BAAc6B,OAAO5B,OALvB;AAME,0BAAY4B,OAAOhC;AANrB;AAQGgC,iBAAO5B,OAAP,GACC;AACE,uBAAW6B,UADb;AAEE,0BAAYD,OAAO7B,KAFrB;AAGE,4BAAc6B,OAAO5B,OAHvB;AAIE,0BAAY4B,OAAOhC;AAJrB,YADD,GAOG;AAfN,SADF;AAmBE;AAAA;AAAA,YAAK,WAAU,iBAAf;AAAkCgC,iBAAOhC;AAAzC;AAnBF,OADF;AAuBD,KAjCM,CAAP;AAkCD,GAtHqC;AAwHtCmC,QAxHsC,oBAwH7B;AAAA,iBAC4B,KAAKvB,KADjC;AAAA,QACCH,WADD,UACCA,WADD;AAAA,QACcD,SADd,UACcA,SADd;;;AAGP,QAAM4B,WAAW,0BAAW,iBAAX,EAA8B5B,SAA9B,EAAyC;AACxD6B,kCAA4B5B,gBAAgB;AADY,KAAzC,CAAjB;AAGA,WAAO;AAAA;AAAA,QAAK,WAAW2B,QAAhB;AAA2B,WAAKP,aAAL;AAA3B,KAAP;AACD;AA/HqC,CAAlB,CAAtB;;AAkIAS,OAAOC,OAAP,GAAiB7C,aAAjB","file":"CheckboxGroup.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport ReactDOM from \"react-dom\";\nimport classnames from \"classnames\";\n\nconst CheckboxGroup = React.createClass({\n  propTypes: {\n    options: PropTypes.arrayOf(\n      PropTypes.shape({\n        label: PropTypes.string.isRequired,\n        value: PropTypes.string.isRequired,\n        checked: PropTypes.bool.isRequired,\n      })\n    ).isRequired,\n    onChange: PropTypes.func,\n    className: PropTypes.string,\n    orientation: PropTypes.string,\n  },\n\n  getDefaultProps() {\n    return {\n      className: \"\",\n    };\n  },\n\n  getInitialState() {\n    return {\n      options: this.props.options,\n    };\n  },\n\n  /*\n     * We've gotten new props from a parent. Sync local state so its\n     * up to date with parent props.\n     */\n  componentWillReceiveProps(nextProps) {\n    this.setState({\n      options: nextProps.options,\n    });\n  },\n\n  /*\n     * Called whenever a checkbox is changed, this updates the local\n     * state to reflect the change and then called props.onChange with\n     * the new options.\n     */\n  handleChange(evt) {\n    // Which one was changed?\n    const targetCheckbox = evt.target.getAttribute(\"data-value\");\n\n    // Grab all the checkboxes\n    const checkboxes = this.getCheckboxes();\n    const newOptions = [];\n\n    // Loop through and update state to reflect changed UI\n    for (let i = 0; i < checkboxes.length; i++) {\n      const value = checkboxes[i].getAttribute(\"data-value\");\n      let checked = checkboxes[i].getAttribute(\"data-checked\") === \"true\";\n      let label = checkboxes[i].getAttribute(\"data-label\");\n\n      // Is it the one that was changed? Toggle its 'checked' property.\n      if (targetCheckbox === value) checked = !checked;\n\n      newOptions.push({ label, value, checked });\n    }\n\n    // Optimistically set local state to newOptions\n    this.setState({\n      options: newOptions,\n    });\n\n    // Pipe off the newOptions to props.onChange so actions can hook in\n    this.props.onChange(newOptions);\n  },\n\n  /**\n     * @returns {nodeList} Array-list list of DOM nodes of type \"checkbox\"\n     */\n  getCheckboxes() {\n    return ReactDOM.findDOMNode(this).querySelectorAll(\"div.checkbox__box\");\n  },\n\n  renderOptions() {\n    const { orientation } = this.props;\n\n    /*\n         * Loop through the options assigned to state\n         * and create a checkbox element for each\n         */\n    return this.state.options.map((option, i) => {\n      const checkClass = classnames([\"checkbox__check\", \"icon\"], {\n        \"icon-check-mark\": option.checked,\n      });\n\n      const itemClass = classnames(\"checkbox__item\", {\n        \"checkbox__item--vertical\": orientation === \"vertical\",\n        \"checkbox__item--horizontal\": orientation === \"horizontal\",\n      });\n\n      return (\n        <div key={i} className={itemClass}>\n          <div\n            className=\"checkbox__box\"\n            ref={option.value}\n            onClick={this.handleChange}\n            data-value={option.value}\n            data-checked={option.checked}\n            data-label={option.label}\n          >\n            {option.checked ? (\n              <i\n                className={checkClass}\n                data-value={option.value}\n                data-checked={option.checked}\n                data-label={option.label}\n              />\n            ) : null}\n          </div>\n\n          <div className=\"checkbox__label\">{option.label}</div>\n        </div>\n      );\n    });\n  },\n\n  render() {\n    const { orientation, className } = this.props;\n\n    const boxClass = classnames(\"checkbox__group\", className, {\n      checkbox__group_horizontal: orientation === \"horizontal\",\n    });\n    return <div className={boxClass}>{this.renderOptions()}</div>;\n  },\n});\n\nmodule.exports = CheckboxGroup;\n"]}