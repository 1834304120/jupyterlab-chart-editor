{"version":3,"sources":["../../../src/components/widgets/MapboxTokenDropdown.js"],"names":["getMapboxTokens","context","currentUser","tokens","mapbox_access_tokens","filterSecretTokens","getHead","token","mapToOption","value","option","label","prependDefault","get","customTokenLabel","appendCustom","getTokenOptions","MapboxTokenDropdown","props","onChange","selectedToken","tokenOptions","propTypes","func","isRequired","string","contextTypes","isDefined"],"mappings":";;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;AACA;;AACA;;;;AAEA;AACA,SAASA,eAAT,CAAyBC,OAAzB,EAAkC;AAAA,QACvBC,WADuB,GACRD,OADQ,CACvBC,WADuB;;AAE9B,QAAMC,SAASD,YAAYE,oBAAZ,IAAoC,EAAnD;AACA,QAAID,MAAJ,EAAY;AACR,eAAOA,MAAP;AACH;;AAED,WAAO,EAAP;AACH;;AAED;AACA,IAAME,qBAAqB,mBAAO,iBAAS;AACvC,QAAMC,UAAU,iCAAc,kBAAM,GAAN,CAAd,CAAhB;AACA,WAAOA,QAAQC,KAAR,MAAmB,IAA1B;AACH,CAH0B,CAA3B;;AAKA,IAAMC,cAAc,gBAAI,kBAAU;AAC9B,WAAO;AACHC,eAAOC,MADJ;AAEHC,eAAOD;AAFJ,KAAP;AAIH,CALmB,CAApB;;AAOA,IAAME,iBAAiB,oBAAQ;AAC3BH,WAAO,sBAAYI,GAAZ,CAAgB,6BAAhB,CADoB;AAE3BF,WAAO;AAFoB,CAAR,CAAvB;;AAKO,IAAMG,8CAAmB,qBAAzB;AACP,IAAMC,eAAe,mBAAO;AACxBN,WAAO,QADiB;AAExBE,WAAOG;AAFiB,CAAP,CAArB;;AAKA,IAAME,kBAAkB,oBACpBD,YADoB,EACNH,cADM,EACUJ,WADV,EACuBH,kBADvB,EAC2CL,eAD3C,CAAxB;;AAIA,SAASiB,mBAAT,CAA6BC,KAA7B,EAAoCjB,OAApC,EAA6C;AAAA,QAErCkB,QAFqC,GAIrCD,KAJqC,CAErCC,QAFqC;AAAA,+BAIrCD,KAJqC,CAGrCE,aAHqC;AAAA,QAGrCA,aAHqC,wCAGrB,sBAAYP,GAAZ,CAAgB,6BAAhB,CAHqB;;;AAMzC,QAAMQ,eAAeL,gBAAgBf,OAAhB,CAArB;;AAEA;AACA;;AAEA,WACI;AAAA;AAAA,UAAK,WAAU,WAAf;AACI;AAAA;AAAA,cAAK,WAAU,kBAAf;AACK,yBAAE,cAAF;AADL,SADJ;AAII;AAAA;AAAA,cAAK,WAAU,mBAAf;AACI;AAAA;AAAA,kBAAM,WAAU,iBAAhB;AACI;AACI,2BAAOmB,aADX;AAEI,6BAASC,YAFb;AAGI,8BAAUF,QAHd;AAII,+BAAW,KAJf;AAKI,8BAAS;AALb;AADJ;AADJ;AAJJ,KADJ;AAkBH;;AAEDF,oBAAoBK,SAApB,GAAgC;AAC5BH,cAAU,iBAAUI,IAAV,CAAeC,UADG;AAE5BJ,mBAAe,iBAAUK;AAFG,CAAhC;;AAKAR,oBAAoBS,YAApB,GAAmC;AAC/BxB,iBAAa,mCAAkByB;AADA,CAAnC;;kBAIeV,mB","file":"MapboxTokenDropdown.js","sourcesContent":["import DropdownWithTextInput from '@workspace/components/widgets/DropdownWithTextInput';\nimport Environment from '@common/utils/environment';\nimport React, {PropTypes} from 'react';\nimport {append, compose, prepend, filter, split, head, map} from 'ramda';\nimport {currentUserOrNull} from '@workspace/utils/customPropTypes';\nimport {_} from '@common/utils/i18n';\n\n// Get mapbox token from currentUser. Return empty array if user not logged in\nfunction getMapboxTokens(context) {\n    const {currentUser} = context;\n    const tokens = currentUser.mapbox_access_tokens || [];\n    if (tokens) {\n        return tokens;\n    }\n\n    return [];\n}\n\n// Only public tokens work with Plotly.js mapbox chart\nconst filterSecretTokens = filter(token => {\n    const getHead = compose(head, split('.'));\n    return getHead(token) === 'pk';\n});\n\nconst mapToOption = map(option => {\n    return {\n        value: option,\n        label: option\n    };\n});\n\nconst prependDefault = prepend({\n    value: Environment.get('MAPBOX_DEFAULT_ACCESS_TOKEN'),\n    label: 'Plotly token'\n});\n\nexport const customTokenLabel = 'custom access token';\nconst appendCustom = append({\n    value: 'custom',\n    label: customTokenLabel\n});\n\nconst getTokenOptions = compose(\n    appendCustom, prependDefault, mapToOption, filterSecretTokens, getMapboxTokens\n);\n\nfunction MapboxTokenDropdown(props, context) {\n    const {\n        onChange,\n        selectedToken = Environment.get('MAPBOX_DEFAULT_ACCESS_TOKEN')\n    } = props;\n\n    const tokenOptions = getTokenOptions(context);\n\n    // display inline-block is needed because:\n    // http://stackoverflow.com/questions/2614091/simple-div-containing-span-wont-size-correctly\n\n    return (\n        <div className=\"menu-item\">\n            <div className=\"menu-item__title\">\n                {_('Mapbox Token')}\n            </div>\n            <div className=\"menu-item__widget\">\n                <span className=\"widget-dropdown\">\n                    <DropdownWithTextInput\n                        value={selectedToken}\n                        options={tokenOptions}\n                        onUpdate={onChange}\n                        clearable={false}\n                        minWidth=\"125px\"\n                    />\n                </span>\n            </div>\n        </div>\n    );\n}\n\nMapboxTokenDropdown.propTypes = {\n    onChange: PropTypes.func.isRequired,\n    selectedToken: PropTypes.string\n};\n\nMapboxTokenDropdown.contextTypes = {\n    currentUser: currentUserOrNull.isDefined\n};\n\nexport default MapboxTokenDropdown;\n"]}