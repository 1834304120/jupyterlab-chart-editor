{"version":3,"sources":["../../../src/components/widgets/MapboxTokenDropdown.js"],"names":["getMapboxTokens","context","currentUser","tokens","mapbox_access_tokens","filterSecretTokens","getHead","token","mapToOption","value","option","label","prependDefault","get","customTokenLabel","appendCustom","getTokenOptions","MapboxTokenDropdown","props","onChange","selectedToken","tokenOptions","propTypes","func","isRequired","string","contextTypes","isDefined"],"mappings":";;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;AACA;;AACA;;;;AAEA;AACA,SAASA,eAAT,CAAyBC,OAAzB,EAAkC;AAAA,MACxBC,WADwB,GACRD,OADQ,CACxBC,WADwB;;AAEhC,MAAMC,SAASD,YAAYE,oBAAZ,IAAoC,EAAnD;AACA,MAAID,MAAJ,EAAY;AACV,WAAOA,MAAP;AACD;;AAED,SAAO,EAAP;AACD;;AAED;AACA,IAAME,qBAAqB,mBAAO,iBAAS;AACzC,MAAMC,UAAU,iCAAc,kBAAM,GAAN,CAAd,CAAhB;AACA,SAAOA,QAAQC,KAAR,MAAmB,IAA1B;AACD,CAH0B,CAA3B;;AAKA,IAAMC,cAAc,gBAAI,kBAAU;AAChC,SAAO;AACLC,WAAOC,MADF;AAELC,WAAOD;AAFF,GAAP;AAID,CALmB,CAApB;;AAOA,IAAME,iBAAiB,oBAAQ;AAC7BH,SAAO,sBAAYI,GAAZ,CAAgB,6BAAhB,CADsB;AAE7BF,SAAO;AAFsB,CAAR,CAAvB;;AAKO,IAAMG,8CAAmB,qBAAzB;AACP,IAAMC,eAAe,mBAAO;AAC1BN,SAAO,QADmB;AAE1BE,SAAOG;AAFmB,CAAP,CAArB;;AAKA,IAAME,kBAAkB,oBACtBD,YADsB,EAEtBH,cAFsB,EAGtBJ,WAHsB,EAItBH,kBAJsB,EAKtBL,eALsB,CAAxB;;AAQA,SAASiB,mBAAT,CAA6BC,KAA7B,EAAoCjB,OAApC,EAA6C;AAAA,MAEzCkB,QAFyC,GAIvCD,KAJuC,CAEzCC,QAFyC;AAAA,6BAIvCD,KAJuC,CAGzCE,aAHyC;AAAA,MAGzCA,aAHyC,wCAGzB,sBAAYP,GAAZ,CAAgB,6BAAhB,CAHyB;;;AAM3C,MAAMQ,eAAeL,gBAAgBf,OAAhB,CAArB;;AAEA;AACA;;AAEA,SACE;AAAA;AAAA,MAAK,WAAU,WAAf;AACE;AAAA;AAAA,QAAK,WAAU,kBAAf;AAAmC,mBAAE,cAAF;AAAnC,KADF;AAEE;AAAA;AAAA,QAAK,WAAU,mBAAf;AACE;AAAA;AAAA,UAAM,WAAU,iBAAhB;AACE;AACE,iBAAOmB,aADT;AAEE,mBAASC,YAFX;AAGE,oBAAUF,QAHZ;AAIE,qBAAW,KAJb;AAKE,oBAAS;AALX;AADF;AADF;AAFF,GADF;AAgBD;;AAEDF,oBAAoBK,SAApB,GAAgC;AAC9BH,YAAU,oBAAUI,IAAV,CAAeC,UADK;AAE9BJ,iBAAe,oBAAUK;AAFK,CAAhC;;AAKAR,oBAAoBS,YAApB,GAAmC;AACjCxB,eAAa,mCAAkByB;AADE,CAAnC;;kBAIeV,mB","file":"MapboxTokenDropdown.js","sourcesContent":["import DropdownWithTextInput from \"./DropdownWithTextInput\";\nimport Environment from \"@common/utils/environment\";\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { append, compose, prepend, filter, split, head, map } from \"ramda\";\nimport { currentUserOrNull } from \"@workspace/utils/customPropTypes\";\nimport { _ } from \"@common/utils/i18n\";\n\n// Get mapbox token from currentUser. Return empty array if user not logged in\nfunction getMapboxTokens(context) {\n  const { currentUser } = context;\n  const tokens = currentUser.mapbox_access_tokens || [];\n  if (tokens) {\n    return tokens;\n  }\n\n  return [];\n}\n\n// Only public tokens work with Plotly.js mapbox chart\nconst filterSecretTokens = filter(token => {\n  const getHead = compose(head, split(\".\"));\n  return getHead(token) === \"pk\";\n});\n\nconst mapToOption = map(option => {\n  return {\n    value: option,\n    label: option,\n  };\n});\n\nconst prependDefault = prepend({\n  value: Environment.get(\"MAPBOX_DEFAULT_ACCESS_TOKEN\"),\n  label: \"Plotly token\",\n});\n\nexport const customTokenLabel = \"custom access token\";\nconst appendCustom = append({\n  value: \"custom\",\n  label: customTokenLabel,\n});\n\nconst getTokenOptions = compose(\n  appendCustom,\n  prependDefault,\n  mapToOption,\n  filterSecretTokens,\n  getMapboxTokens\n);\n\nfunction MapboxTokenDropdown(props, context) {\n  const {\n    onChange,\n    selectedToken = Environment.get(\"MAPBOX_DEFAULT_ACCESS_TOKEN\"),\n  } = props;\n\n  const tokenOptions = getTokenOptions(context);\n\n  // display inline-block is needed because:\n  // http://stackoverflow.com/questions/2614091/simple-div-containing-span-wont-size-correctly\n\n  return (\n    <div className=\"menu-item\">\n      <div className=\"menu-item__title\">{_(\"Mapbox Token\")}</div>\n      <div className=\"menu-item__widget\">\n        <span className=\"widget-dropdown\">\n          <DropdownWithTextInput\n            value={selectedToken}\n            options={tokenOptions}\n            onUpdate={onChange}\n            clearable={false}\n            minWidth=\"125px\"\n          />\n        </span>\n      </div>\n    </div>\n  );\n}\n\nMapboxTokenDropdown.propTypes = {\n  onChange: PropTypes.func.isRequired,\n  selectedToken: PropTypes.string,\n};\n\nMapboxTokenDropdown.contextTypes = {\n  currentUser: currentUserOrNull.isDefined,\n};\n\nexport default MapboxTokenDropdown;\n"]}