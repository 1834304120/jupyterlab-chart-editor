{"version":3,"sources":["../../../src/components/widgets/AccordionMenu.js"],"names":["SimpleAddMenu","props","addNewMenuClass","disableAddMenu","addNewMenuHandler","className","buttonText","addMenuText","propTypes","string","func","bool","DropdownAddMenu","addNewMenuConfig","title","options","simpleAddMenuPlaceholder","width","shape","isRequired","arrayOf","idOrIndex","id","index","String","AccordionMenu","state","initialState","toggleAllHandler","toggleAll","bind","makeHandler","toggleSubMenu","toggleSubMenuHandlerConstructor","newProps","newSubmenuStates","subMenuStates","assignOpenState","subMenus","length","Object","keys","setState","merge","forEach","subMenu","i","isOpen","any","identity","getMenuStates","menu","getState","menuStates","map","anySubMenusOpen","setMenuStates","subMenuConfig","titleColor","iconClass","content","isRemovable","pathOr","has","removeMenuHandler","accordionMenuModifier","header","doAddMenu","doSimpleAddMenu","doDropdownAddMenu","Boolean","simpleAddMenu","dropdownAddMenu","collapseButtonText","collapseButton","accordionClassName","parentClassName","renderSubmenuItems","placeholder","defaultProps","oneOfType","node","element"],"mappings":"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","file":"AccordionMenu.js","sourcesContent":["import AccordionMenuItem from \"./AccordionMenuItem\";\nimport Dropdown from \"./widgets/Dropdown\";\nimport R from \"ramda\";\nimport React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport classnames from \"classnames\";\nimport { dropdownOptionShape } from \"@workspace/utils/customPropTypes\";\n\nexport class SimpleAddMenu extends Component {\n  render() {\n    const { addNewMenuClass, disableAddMenu, addNewMenuHandler } = this.props;\n\n    const className = classnames(\n      \"btnbase\",\n      \"btn--primary\",\n      \"js-test-add-new-layer\",\n      \"+float-right\",\n      addNewMenuClass,\n      { \"--disabled\": disableAddMenu }\n    );\n    const buttonText = this.props.addMenuText || \"\";\n\n    return (\n      <div className={className} onClick={addNewMenuHandler}>\n        {\"+ \" + buttonText}\n      </div>\n    );\n  }\n}\n\n/*\n * See the main AccordionMenu component PropTypes section for more information.\n */\nSimpleAddMenu.propTypes = {\n  addNewMenuClass: PropTypes.string,\n  addNewMenuHandler: PropTypes.func,\n  disableAddMenu: PropTypes.bool,\n  addMenuText: PropTypes.string,\n};\n\nexport class DropdownAddMenu extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    const { title, options } = this.props.addNewMenuConfig;\n\n    const simpleAddMenuPlaceholder = <SimpleAddMenu addMenuText={title} />;\n\n    /*\n         * Always display `+` (SimpleAddMenu) and show a\n         * dropdown when you click on it.\n         * We're always displaying the `+` by returning SimpleAddMenu in\n         * the valueRenderer and the placeholder\n         */\n    return (\n      <div className=\"+float-right js-dropdown-add-menu\">\n        <Dropdown\n          className={`${this.props\n            .addNewMenuClass} accordion-menu-dropdown-button`}\n          style={{ width: null }}\n          options={options}\n          clearable={false}\n          onChange={this.props.addNewMenuHandler}\n          placeholder={simpleAddMenuPlaceholder}\n          valueRenderer={() => simpleAddMenuPlaceholder}\n        />\n      </div>\n    );\n  }\n}\n\n/*\n * See the main AccordionMenu component PropTypes section for more information.\n */\nDropdownAddMenu.propTypes = {\n  addNewMenuConfig: PropTypes.shape({\n    title: PropTypes.string.isRequired,\n    options: PropTypes.arrayOf(dropdownOptionShape).isRequired,\n  }),\n  addNewMenuClass: PropTypes.string,\n  addNewMenuHandler: PropTypes.func,\n};\n\nfunction idOrIndex(id, index) {\n  if (typeof id === \"string\") {\n    return id;\n  }\n\n  return String(index);\n}\n\n/*\n * Each AccordionMenuItem is passed in as an object and its content\n * as an element\n * The expand and collapse buttons set the state of each submenu\n */\nexport default class AccordionMenu extends Component {\n  constructor(props) {\n    super(props);\n    this.state = this.initialState(props);\n\n    this.toggleAllHandler = this.toggleAll.bind(this);\n\n    // Used to construct a collapse/expand handler for each sub-menu.\n    const makeHandler = index => this.toggleSubMenu(index);\n    this.toggleSubMenuHandlerConstructor = makeHandler.bind(this);\n  }\n\n  componentWillReceiveProps(newProps) {\n    const newSubmenuStates = this.initialState(newProps).subMenuStates;\n\n    /*\n         * Only update openess state when adding a new AccordionMenuItem\n         * e.g for +Trace / +Filter / +Note\n         */\n    if (\n      this.props.assignOpenState &&\n      newProps.subMenus.length !== Object.keys(this.state.subMenuStates).length\n    ) {\n      this.setState({\n        subMenuStates: newSubmenuStates,\n      });\n      return;\n    }\n\n    // Only update sub-menu states of those that are newly added.\n    this.setState({\n      subMenuStates: R.merge(newSubmenuStates, this.state.subMenuStates),\n    });\n  }\n\n  initialState(props) {\n    const subMenuStates = {};\n    props.subMenus.forEach((subMenu, i) => {\n      const id = idOrIndex(subMenu.id, i);\n      subMenuStates[id] = subMenu.isOpen;\n    });\n\n    return { subMenuStates };\n  }\n\n  /**\n     * Check if any sub-menu is open.\n     * @return {Boolean} True if all sub-menus are closed.\n     */\n  anySubMenusOpen() {\n    return R.any(R.identity, this.getMenuStates());\n  }\n\n  /**\n     * Set all the sub-menus to a given state.\n     * @param {Boolean} state the collapse state for all sub-menus\n     */\n  setMenuStates(state) {\n    const subMenuStates = {};\n    const setState = (menu, index) => {\n      const id = idOrIndex(menu.id, index);\n      subMenuStates[id] = state;\n    };\n    this.props.subMenus.forEach(setState);\n    this.setState({ subMenuStates });\n  }\n\n  /**\n     * Get all the sub-menu collapse states.\n     * @return {Boolean[]} state: the collapse state for all sub-menus\n     */\n  getMenuStates() {\n    const getState = id => this.state.subMenuStates[id];\n    const menuStates = Object.keys(this.state.subMenuStates).map(getState);\n    return menuStates;\n  }\n\n  /**\n     * Given the state of all menus, expand or collapse all menus at once.\n     */\n  toggleAll() {\n    /*\n         * If any sub-menu is open, collapse all sub-menus\n         * Else expand all sub-menus\n         */\n\n    if (this.anySubMenusOpen()) {\n      this.setMenuStates(false);\n    } else {\n      this.setMenuStates(true);\n    }\n  }\n\n  /**\n     * Toggle an individual submenu\n     * @param {Number} id: The sub-menu ref id.\n     */\n  toggleSubMenu(id) {\n    this.setState({\n      subMenuStates: R.merge(this.state.subMenuStates, {\n        [id]: !this.state.subMenuStates[id],\n      }),\n    });\n  }\n\n  /**\n     * Renders each sub-menu in the accordion menu.\n     * @return {AccordionMenuItem[]} sub-menu DOM elements\n     */\n  renderSubmenuItems() {\n    return this.props.subMenus.map((subMenuConfig, i) => {\n      const { title, titleColor, iconClass, content } = subMenuConfig;\n\n      const isRemovable = R.pathOr(\n        R.has(\"removeMenuHandler\", this.props),\n        [\"isRemovable\"],\n        subMenuConfig\n      );\n\n      const id = idOrIndex(subMenuConfig.id, i);\n\n      return (\n        <AccordionMenuItem\n          title={title}\n          titleColor={titleColor}\n          iconClass={iconClass}\n          key={id}\n          id={id}\n          isOpen={this.state.subMenuStates[id]}\n          isRemovable={isRemovable}\n          removeMenuHandler={this.props.removeMenuHandler}\n          onToggle={() => this.toggleSubMenuHandlerConstructor(id)}\n          accordionMenuModifier={this.props.accordionMenuModifier || null}\n        >\n          {content}\n        </AccordionMenuItem>\n      );\n    });\n  }\n\n  render() {\n    const { addNewMenuHandler, addNewMenuConfig, header } = this.props;\n\n    /*\n         * If the developer passes in a handler we are going to set up\n         * an add new menu UI.\n         */\n    const doAddMenu = typeof addNewMenuHandler === \"function\";\n\n    /*\n         * if the developer doesn't pass in options we just call the handler\n         * when the user clicks on a \"+\" button.\n         */\n    const doSimpleAddMenu = doAddMenu && !addNewMenuConfig;\n\n    /*\n         * if the developer passes in options we are going to set up a\n         * standalone box with a dropdown and a \"+\" button.\n         */\n    const doDropdownAddMenu = doAddMenu && Boolean(addNewMenuConfig);\n\n    /*\n         * Only render the components when needed.\n         */\n    const simpleAddMenu = doSimpleAddMenu ? (\n      <SimpleAddMenu\n        addNewMenuClass={this.props.addNewMenuClass}\n        addNewMenuHandler={this.props.addNewMenuHandler}\n        disableAddMenu={this.props.disableAddMenu}\n        addMenuText={this.props.addMenuText}\n      />\n    ) : null;\n\n    const dropdownAddMenu = doDropdownAddMenu ? (\n      <DropdownAddMenu\n        addNewMenuClass={this.props.addNewMenuClass}\n        addNewMenuHandler={this.props.addNewMenuHandler}\n        addNewMenuConfig={this.props.addNewMenuConfig}\n      />\n    ) : null;\n\n    let collapseButtonText;\n    if (this.anySubMenusOpen()) {\n      collapseButtonText = \"Collapse All\";\n    } else {\n      collapseButtonText = \"Expand All\";\n    }\n\n    const collapseButton =\n      this.props.subMenus.length > 0 ? (\n        <div\n          className=\"accordion-menu-button +float-left js-test-collapse-text\"\n          onClick={this.toggleAllHandler}\n        >\n          {this.anySubMenusOpen() ? (\n            <i className=\"icon-resize-down +soft-quarter-right\" />\n          ) : (\n            <i className=\"icon-resize-expand +soft-quarter-right\" />\n          )}\n          {collapseButtonText}\n        </div>\n      ) : null;\n\n    const accordionClassName = classnames(\n      \"accordion-menu__button-area\",\n      \"+clearfix\"\n    );\n\n    return (\n      <div className={this.props.parentClassName}>\n        <div className={accordionClassName}>\n          {collapseButton}\n          {simpleAddMenu}\n          {dropdownAddMenu}\n        </div>\n        {header}\n        <div>\n          {this.props.subMenus && this.props.subMenus.length > 0 ? (\n            this.renderSubmenuItems()\n          ) : (\n            this.props.placeholder && this.props.placeholder()\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n\nAccordionMenu.defaultProps = {\n  assignOpenState: false,\n};\n\nAccordionMenu.propTypes = {\n  subMenus: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.oneOfType([PropTypes.string, PropTypes.node]).isRequired,\n      titleColor: PropTypes.string,\n      isOpen: PropTypes.bool,\n      iconClass: PropTypes.string,\n      content: PropTypes.element,\n      id: PropTypes.string,\n      isRemovable: PropTypes.bool,\n    })\n  ),\n\n  /*\n     * If this handler is passed in as a prop the Accordion menu\n     * will have a \"+\" button in the top right with a click handler\n     * set to the this function.\n     */\n  addNewMenuHandler: PropTypes.func,\n\n  // Make add layer button unclickable\n  disableAddMenu: PropTypes.bool,\n\n  /*\n     * A class in which to style the \"+\" button (if it is shown)\n     */\n  addNewMenuClass: PropTypes.string,\n\n  /*\n     * Text to include in the \"+\" button (if it is shown)\n     */\n  addMenuText: PropTypes.string,\n\n  /*\n     * If this object is present the accordian menu will show a \"create\n     * new menu\" box with a dropdown consisting of the options\n     * given in the list instead of the simple \"+\" button. The\n     * addNewMenuClass handler will be passed the value in the dropdown\n     * once the user clicks the plus button.\n     */\n  addNewMenuConfig: PropTypes.shape({\n    title: PropTypes.string.isRequired,\n    options: PropTypes.arrayOf(dropdownOptionShape).isRequired,\n  }),\n\n  /*\n     * If this handler is passed in submenus will show an 'x'\n     * which when called evokes this function with the id\n     * of the submenu.\n     */\n  removeMenuHandler: PropTypes.func,\n\n  /*\n     * Optionally display a generic header item at the top of the AccordionMenu\n    */\n\n  header: PropTypes.element,\n\n  parentClassName: PropTypes.string,\n\n  /*\n     * On first render get open state from parent Component\n     */\n  assignOpenState: PropTypes.bool,\n\n  /*\n     * Class to modify default look of accoridon menu\n     */\n  accordionMenuModifier: PropTypes.string,\n\n  /*\n     * Optional method to render a placeholder when no subMenus present\n     */\n  placeholder: PropTypes.func,\n};\n"]}