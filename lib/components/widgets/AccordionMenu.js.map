{"version":3,"sources":["../../../src/components/widgets/AccordionMenu.js"],"names":["SimpleAddMenu","props","addNewMenuClass","disableAddMenu","addNewMenuHandler","className","buttonText","addMenuText","propTypes","string","func","bool","DropdownAddMenu","addNewMenuConfig","title","options","simpleAddMenuPlaceholder","width","shape","isRequired","arrayOf","idOrIndex","id","index","String","AccordionMenu","state","initialState","toggleAllHandler","toggleAll","bind","makeHandler","toggleSubMenu","toggleSubMenuHandlerConstructor","newProps","newSubmenuStates","subMenuStates","assignOpenState","subMenus","length","Object","keys","setState","merge","forEach","subMenu","i","isOpen","any","identity","getMenuStates","menu","getState","menuStates","map","anySubMenusOpen","setMenuStates","subMenuConfig","titleColor","iconClass","content","isRemovable","pathOr","has","removeMenuHandler","accordionMenuModifier","header","doAddMenu","doSimpleAddMenu","doDropdownAddMenu","Boolean","simpleAddMenu","dropdownAddMenu","collapseButtonText","collapseButton","accordionClassName","parentClassName","renderSubmenuItems","placeholder","defaultProps","oneOfType","node","element"],"mappings":"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","file":"AccordionMenu.js","sourcesContent":["import AccordionMenuItem from './AccordionMenuItem';\nimport Dropdown from './widgets/Dropdown';\nimport R from 'ramda';\nimport React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport {dropdownOptionShape} from '@workspace/utils/customPropTypes';\n\nexport class SimpleAddMenu extends Component {\n    render() {\n        const {addNewMenuClass, disableAddMenu, addNewMenuHandler} = this.props;\n\n        const className = classnames(\n            'btnbase',\n            'btn--primary',\n            'js-test-add-new-layer',\n            '+float-right',\n            addNewMenuClass,\n            {'--disabled': disableAddMenu}\n        );\n        const buttonText = this.props.addMenuText || '';\n\n        return (\n            <div className={className}\n                 onClick={addNewMenuHandler}\n            >\n                {'+ ' + buttonText}\n            </div>\n        );\n    }\n}\n\n/*\n * See the main AccordionMenu component PropTypes section for more information.\n */\nSimpleAddMenu.propTypes = {\n    addNewMenuClass: PropTypes.string,\n    addNewMenuHandler: PropTypes.func,\n    disableAddMenu: PropTypes.bool,\n    addMenuText: PropTypes.string\n};\n\nexport class DropdownAddMenu extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        const {title, options} = this.props.addNewMenuConfig;\n\n        const simpleAddMenuPlaceholder = (\n            <SimpleAddMenu\n                addMenuText={title}\n            />\n        );\n\n        /*\n         * Always display `+` (SimpleAddMenu) and show a\n         * dropdown when you click on it.\n         * We're always displaying the `+` by returning SimpleAddMenu in\n         * the valueRenderer and the placeholder\n         */\n        return (\n            <div className=\"+float-right js-dropdown-add-menu\">\n                <Dropdown\n                    className={`${this.props.addNewMenuClass} accordion-menu-dropdown-button`}\n                    style={{width: null}}\n                    options={options}\n                    clearable={false}\n                    onChange={this.props.addNewMenuHandler}\n                    placeholder={simpleAddMenuPlaceholder}\n                    valueRenderer={() => simpleAddMenuPlaceholder}\n                />\n            </div>\n        );\n\n    }\n}\n\n/*\n * See the main AccordionMenu component PropTypes section for more information.\n */\nDropdownAddMenu.propTypes = {\n    addNewMenuConfig: PropTypes.shape({\n        title: PropTypes.string.isRequired,\n        options: PropTypes.arrayOf(dropdownOptionShape).isRequired\n    }),\n    addNewMenuClass: PropTypes.string,\n    addNewMenuHandler: PropTypes.func\n};\n\n\nfunction idOrIndex(id, index) {\n    if (typeof id === 'string') {\n        return id;\n    }\n\n    return String(index);\n}\n\n/*\n * Each AccordionMenuItem is passed in as an object and its content\n * as an element\n * The expand and collapse buttons set the state of each submenu\n */\nexport default class AccordionMenu extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = this.initialState(props);\n\n        this.toggleAllHandler = this.toggleAll.bind(this);\n\n        // Used to construct a collapse/expand handler for each sub-menu.\n        const makeHandler = index => this.toggleSubMenu(index);\n        this.toggleSubMenuHandlerConstructor = makeHandler.bind(this);\n    }\n\n    componentWillReceiveProps(newProps) {\n        const newSubmenuStates = this.initialState(newProps).subMenuStates;\n\n        /*\n         * Only update openess state when adding a new AccordionMenuItem\n         * e.g for +Trace / +Filter / +Note\n         */\n        if (this.props.assignOpenState &&\n            newProps.subMenus.length !==\n                Object.keys(this.state.subMenuStates).length\n        ) {\n            this.setState({\n                subMenuStates: newSubmenuStates\n            });\n            return;\n        }\n\n        // Only update sub-menu states of those that are newly added.\n        this.setState({\n            subMenuStates: R.merge(newSubmenuStates, this.state.subMenuStates)\n        });\n    }\n\n    initialState(props) {\n        const subMenuStates = {};\n        props.subMenus.forEach((subMenu, i) => {\n            const id = idOrIndex(subMenu.id, i);\n            subMenuStates[id] = subMenu.isOpen;\n        });\n\n        return {subMenuStates};\n    }\n\n    /**\n     * Check if any sub-menu is open.\n     * @return {Boolean} True if all sub-menus are closed.\n     */\n    anySubMenusOpen() {\n        return R.any(R.identity, this.getMenuStates());\n    }\n\n    /**\n     * Set all the sub-menus to a given state.\n     * @param {Boolean} state the collapse state for all sub-menus\n     */\n    setMenuStates(state) {\n        const subMenuStates = {};\n        const setState = (menu, index) => {\n            const id = idOrIndex(menu.id, index);\n            subMenuStates[id] = state;\n        };\n        this.props.subMenus.forEach(setState);\n        this.setState({subMenuStates});\n    }\n\n    /**\n     * Get all the sub-menu collapse states.\n     * @return {Boolean[]} state: the collapse state for all sub-menus\n     */\n    getMenuStates() {\n        const getState = id => this.state.subMenuStates[id];\n        const menuStates = Object.keys(this.state.subMenuStates).map(getState);\n        return menuStates;\n    }\n\n    /**\n     * Given the state of all menus, expand or collapse all menus at once.\n     */\n    toggleAll() {\n        /*\n         * If any sub-menu is open, collapse all sub-menus\n         * Else expand all sub-menus\n         */\n\n        if (this.anySubMenusOpen()) {\n            this.setMenuStates(false);\n        } else {\n            this.setMenuStates(true);\n        }\n    }\n\n    /**\n     * Toggle an individual submenu\n     * @param {Number} id: The sub-menu ref id.\n     */\n    toggleSubMenu(id) {\n        this.setState({\n            subMenuStates: R.merge(this.state.subMenuStates, {\n                [id]: !this.state.subMenuStates[id]\n            })\n        });\n    }\n\n    /**\n     * Renders each sub-menu in the accordion menu.\n     * @return {AccordionMenuItem[]} sub-menu DOM elements\n     */\n    renderSubmenuItems() {\n\n        return this.props.subMenus.map((subMenuConfig, i) => {\n            const {\n                title,\n                titleColor,\n                iconClass,\n                content\n            } = subMenuConfig;\n\n            const isRemovable = R.pathOr(\n                R.has('removeMenuHandler', this.props),\n                ['isRemovable'],\n                subMenuConfig\n            );\n\n            const id = idOrIndex(subMenuConfig.id, i);\n\n            return (\n                <AccordionMenuItem\n                    title={title}\n                    titleColor={titleColor}\n                    iconClass={iconClass}\n                    key={id}\n                    id={id}\n                    ref={id}\n                    isOpen={this.state.subMenuStates[id]}\n                    isRemovable={isRemovable}\n                    removeMenuHandler={this.props.removeMenuHandler}\n                    onToggle={() => this.toggleSubMenuHandlerConstructor(id)}\n                    accordionMenuModifier={this.props.accordionMenuModifier || null}\n                >\n                    {content}\n                </AccordionMenuItem>\n            );\n        });\n    }\n\n    render() {\n\n        const {addNewMenuHandler, addNewMenuConfig, header} = this.props;\n\n        /*\n         * If the developer passes in a handler we are going to set up\n         * an add new menu UI.\n         */\n        const doAddMenu = typeof addNewMenuHandler === 'function';\n\n        /*\n         * if the developer doesn't pass in options we just call the handler\n         * when the user clicks on a \"+\" button.\n         */\n        const doSimpleAddMenu = doAddMenu && !addNewMenuConfig;\n\n        /*\n         * if the developer passes in options we are going to set up a\n         * standalone box with a dropdown and a \"+\" button.\n         */\n        const doDropdownAddMenu = doAddMenu && Boolean(addNewMenuConfig);\n\n        /*\n         * Only render the components when needed.\n         */\n        const simpleAddMenu = doSimpleAddMenu ? (\n            <SimpleAddMenu\n                addNewMenuClass={this.props.addNewMenuClass}\n                addNewMenuHandler={this.props.addNewMenuHandler}\n                disableAddMenu={this.props.disableAddMenu}\n                addMenuText={this.props.addMenuText}\n            />\n        ) : null;\n\n        const dropdownAddMenu = doDropdownAddMenu ? (\n            <DropdownAddMenu\n                addNewMenuClass={this.props.addNewMenuClass}\n                addNewMenuHandler={this.props.addNewMenuHandler}\n                addNewMenuConfig={this.props.addNewMenuConfig}\n            />\n        ) : null;\n\n        let collapseButtonText;\n        if (this.anySubMenusOpen()) {\n            collapseButtonText = 'Collapse All';\n        } else {\n            collapseButtonText = 'Expand All';\n        }\n\n        const collapseButton = this.props.subMenus.length > 0 ? (\n            <div className=\"accordion-menu-button +float-left js-test-collapse-text\"\n                 ref=\"collapse\"\n                 onClick={this.toggleAllHandler}\n            >\n                {this.anySubMenusOpen() ?\n                    <i className=\"icon-resize-down +soft-quarter-right\"/>\n                    :\n                    <i className=\"icon-resize-expand +soft-quarter-right\"/>\n                }\n                {collapseButtonText}\n            </div>\n        ) : null;\n\n        const accordionClassName = classnames(\n            'accordion-menu__button-area',\n            '+clearfix'\n        );\n\n        return (\n            <div className={this.props.parentClassName}>\n                <div className={accordionClassName}>\n                    {collapseButton}\n                    {simpleAddMenu}\n                    {dropdownAddMenu}\n                </div>\n                {header}\n                <div>\n                    {this.props.subMenus && this.props.subMenus.length > 0 ? (\n                        this.renderSubmenuItems()\n                    ) : (\n                        this.props.placeholder && this.props.placeholder()\n                    )}\n                </div>\n            </div>\n        );\n    }\n}\n\nAccordionMenu.defaultProps = {\n    assignOpenState: false\n};\n\nAccordionMenu.propTypes = {\n    subMenus: PropTypes.arrayOf(PropTypes.shape({\n        title: PropTypes.oneOfType([PropTypes.string, PropTypes.node]).isRequired,\n        titleColor: PropTypes.string,\n        isOpen: PropTypes.bool,\n        iconClass: PropTypes.string,\n        content: PropTypes.element,\n        id: PropTypes.string,\n        isRemovable: PropTypes.bool\n    })),\n\n    /*\n     * If this handler is passed in as a prop the Accordion menu\n     * will have a \"+\" button in the top right with a click handler\n     * set to the this function.\n     */\n    addNewMenuHandler: PropTypes.func,\n\n    // Make add layer button unclickable\n    disableAddMenu: PropTypes.bool,\n\n    /*\n     * A class in which to style the \"+\" button (if it is shown)\n     */\n    addNewMenuClass: PropTypes.string,\n\n\n    /*\n     * Text to include in the \"+\" button (if it is shown)\n     */\n    addMenuText: PropTypes.string,\n\n    /*\n     * If this object is present the accordian menu will show a \"create\n     * new menu\" box with a dropdown consisting of the options\n     * given in the list instead of the simple \"+\" button. The\n     * addNewMenuClass handler will be passed the value in the dropdown\n     * once the user clicks the plus button.\n     */\n    addNewMenuConfig: PropTypes.shape({\n        title: PropTypes.string.isRequired,\n        options: PropTypes.arrayOf(dropdownOptionShape).isRequired\n    }),\n\n    /*\n     * If this handler is passed in submenus will show an 'x'\n     * which when called evokes this function with the id\n     * of the submenu.\n     */\n    removeMenuHandler: PropTypes.func,\n\n    /*\n     * Optionally display a generic header item at the top of the AccordionMenu\n    */\n\n    header: PropTypes.element,\n\n    parentClassName: PropTypes.string,\n\n    /*\n     * On first render get open state from parent Component\n     */\n    assignOpenState: PropTypes.bool,\n\n    /*\n     * Class to modify default look of accoridon menu\n     */\n    accordionMenuModifier: PropTypes.string,\n\n    /*\n     * Optional method to render a placeholder when no subMenus present\n     */\n    placeholder: PropTypes.func\n\n};\n"]}