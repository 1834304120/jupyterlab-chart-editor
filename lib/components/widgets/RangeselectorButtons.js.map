{"version":3,"sources":["../../../src/components/widgets/RangeselectorButtons.js"],"names":["RangeselectorButtons","props","removeButton","bind","newButton","userButtonIndex","axisTarget","buttons","dispatch","userButtonsArray","reset","step","label","splice","unshift","relayoutObject","length","newButtons","index","prefix","controls","type","TEXT_INPUT","immediate","attr","DROPDOWN_SELECTOR","options","value","NUMERIC_INPUT","button","i","buttonPanel","buildSpec","content","title","isOpen","visibility","generalControls","RADIO","COLOR","marginTop","allUserButtons","buttonPanels","map","renderButtonPanel","generalStylingControls","renderGeneralSpec","Error","propTypes","string","isRequired","array","func","onUpdate","object","mapPlotToProps","plot","buttonsPath","pathOr"],"mappings":"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","file":"RangeselectorButtons.js","sourcesContent":["/*\n * This component is used to create rangeselector buttons:\n *     https://plot.ly/javascript/reference/#layout-xaxis-rangeselector\n * We're rebuilding the buttons array because of this bug on Plotly.js:\n *     https://github.com/plotly/plotly.js/issues/777\n * We are able to make this work because Plotly.js is more lenient here:\n *     https://github.com/plotly/plotly.js/issues/749\n */\nimport React, {Component, PropTypes} from 'react';\nimport {tail} from 'ramda';\n\nimport AccordionMenu from '@workspace/components/widgets/AccordionMenu';\nimport connectWorkspacePlot from '@workspace/utils/connectWorkspacePlot';\n\n// eslint-disable-next-line\nimport GenericStylePanel from '@workspace/components/panels/EditModeMenu/Style/GenericStyleComponents/Generic';\nimport {_} from '@common/utils/i18n';\nimport {CONTROL_TYPES} from '@workspace/constants/workspace';\nimport {relayout} from '@workspace/actions/workspace';\nimport {textControls} from '@workspace/schemas/Reusable';\n\nclass RangeselectorButtons extends Component {\n    constructor(props) {\n        super(props);\n        this.removeButton = this.removeButton.bind(this);\n        this.newButton = this.newButton.bind(this);\n    }\n\n    removeButton(userButtonIndex) {\n        const {axisTarget, buttons, dispatch} = this.props;\n        const userButtonsArray = tail(buttons);\n        const reset = {step: 'all', label: 'reset'};\n\n        userButtonsArray.splice(userButtonIndex, 1);\n        userButtonsArray.unshift(reset);\n\n        const relayoutObject = (userButtonsArray.length === 1) ?\n            {[`${axisTarget}.rangeselector.buttons`]: []} :\n            {[`${axisTarget}.rangeselector.buttons`]: userButtonsArray};\n\n        dispatch(relayout(relayoutObject));\n    }\n\n    newButton() {\n        const {axisTarget, buttons, dispatch} = this.props;\n        const newButtons = [...buttons, {label: `#${buttons.length}`}];\n        const reset = {step: 'all', label: 'reset'};\n\n        const relayoutObject = (buttons.length === 0) ?\n            {[`${axisTarget}.rangeselector.buttons`]: [reset, {label: '#1'}]} :\n            {[`${axisTarget}.rangeselector.buttons`]: newButtons};\n\n        dispatch(relayout(relayoutObject));\n    }\n\n    buildSpec(index) {\n        const {axisTarget} = this.props;\n        const prefix = `layout.${axisTarget}.rangeselector.buttons[${index}]`;\n        return {\n            controls: [\n                {\n                    label: 'Label',\n                    type: CONTROL_TYPES.TEXT_INPUT,\n                    immediate: true,\n                    attr: `${prefix}.label`\n                },\n                {\n                    label: 'Step',\n                    type: CONTROL_TYPES.DROPDOWN_SELECTOR,\n                    attr: `${prefix}.step`,\n                    options: [\n                        {label: 'Month', value: 'month'},\n                        {label: 'Year', value: 'year'},\n                        {label: 'Day', value: 'day'},\n                        {label: 'Hour', value: 'hour'},\n                        {label: 'Minute', value: 'minute'},\n                        {label: 'Second', value: 'second'},\n                        {label: 'All', value: 'all'}\n                    ]\n                },\n                {\n                    label: 'Count',\n                    type: CONTROL_TYPES.NUMERIC_INPUT,\n                    attr: `${prefix}.count`\n                },\n                {\n                    label: 'Stepmode',\n                    type: CONTROL_TYPES.DROPDOWN_SELECTOR,\n                    attr: `${prefix}.stepmode`,\n                    options: [\n                        {label: 'Backward', value: 'backward'},\n                        {label: 'To Date', value: 'todate'}\n                    ]\n                }\n            ]\n        };\n    }\n\n    renderButtonPanel(button, i) {\n        const buttonPanel = (\n            <GenericStylePanel\n                dispatch={this.props.dispatch}\n                componentSpec={[this.buildSpec(i + 1)]}\n            />\n        );\n\n        return {\n            content: buttonPanel,\n            title: button.label,\n            isOpen: true\n        };\n    }\n\n    renderGeneralSpec() {\n        const prefix = `layout.${this.props.axisTarget}.rangeselector`;\n        const visibility = {\n            attr: `${prefix}.visible`,\n            value: true\n        };\n\n        const generalControls = [\n            {\n                title: 'Visibility',\n                controls: [\n                    {\n                        label: null,\n                        type: CONTROL_TYPES.RADIO,\n                        attr: `${prefix}.visible`,\n                        options: [\n                            {label: 'Show', value: true},\n                            {label: 'Hide', value: false}\n                        ]\n                    }\n                ]\n            },\n            {\n                title: 'Style',\n                controls: [\n                    {\n\n                        /*\n                         * Cannot change the color of the 'reset' button:\n                         *     https://github.com/plotly/plotly.js/issues/790\n                         */\n                        label: 'Background',\n                        type: CONTROL_TYPES.COLOR,\n                        attr: `${prefix}.bgcolor`\n                    },\n                    {\n                        label: 'Border Width',\n                        type: CONTROL_TYPES.NUMERIC_INPUT,\n                        attr: `${prefix}.borderwidth`\n                    },\n                    {\n                        label: 'Border Color',\n                        type: CONTROL_TYPES.COLOR,\n                        attr: `${prefix}.bordercolor`\n                    }\n                ],\n                visibility: visibility\n            },\n            {\n                title: 'Text',\n                controls: textControls(`${prefix}.font`),\n                visibility: visibility\n            },\n            {\n                title: 'Position',\n                controls: [\n                    {\n                        label: 'Horizontal',\n                        type: CONTROL_TYPES.NUMERIC_INPUT,\n                        step: 0.1,\n                        attr: `${prefix}.x`\n                    },\n                    {\n                        label: 'Vertical',\n                        type: CONTROL_TYPES.NUMERIC_INPUT,\n                        step: 0.1,\n                        attr: `${prefix}.y`\n                    }\n                ],\n                visibility: visibility\n            }\n        ];\n\n        return (\n            <div style={{marginTop: '20px'}}>\n                <GenericStylePanel\n                    dispatch={this.props.dispatch}\n                    componentSpec={generalControls}\n                />\n            </div>\n        );\n    }\n\n    render() {\n        const {axisTarget, buttons, value} = this.props;\n        if (axisTarget === 'xaxis') {\n            const allUserButtons = tail(value.buttons);\n            const buttonPanels = allUserButtons\n                .map(this.renderButtonPanel.bind(this));\n            let generalStylingControls = buttons.length > 0 ?\n                this.renderGeneralSpec() : null;\n\n            return (\n                <div className=\"+clearfix\">\n                    <AccordionMenu\n                        subMenus={buttonPanels}\n                        addMenuText={_('Button')}\n                        removeMenuHandler={this.removeButton}\n                        addNewMenuHandler={this.newButton}\n                    />\n                    {generalStylingControls}\n                </div>\n            );\n        }\n        throw new Error(\n            `This styling option is unavalable for ${axisTarget} axis`\n        );\n    }\n}\n\nRangeselectorButtons.propTypes = {\n    axisTarget: PropTypes.string.isRequired,\n    buttons: PropTypes.array.isRequired,\n    dispatch: PropTypes.func.isRequired,\n    onUpdate: PropTypes.func.isRequired,\n    value: PropTypes.object\n};\n\nfunction mapPlotToProps(plot, {axisTarget}) {\n    const buttonsPath = ['_fullLayout', axisTarget, 'rangeselector', 'buttons'];\n    return {buttons: plot.pathOr([], buttonsPath)};\n}\n\nexport default connectWorkspacePlot(mapPlotToProps)(RangeselectorButtons);\n"]}