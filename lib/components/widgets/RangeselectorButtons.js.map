{"version":3,"sources":["../../../src/components/widgets/RangeselectorButtons.js"],"names":["RangeselectorButtons","props","removeButton","bind","newButton","userButtonIndex","axisTarget","buttons","dispatch","userButtonsArray","reset","step","label","splice","unshift","relayoutObject","length","newButtons","index","prefix","controls","type","TEXT_INPUT","immediate","attr","DROPDOWN_SELECTOR","options","value","NUMERIC_INPUT","button","i","buttonPanel","buildSpec","content","title","isOpen","visibility","generalControls","RADIO","COLOR","marginTop","allUserButtons","buttonPanels","map","renderButtonPanel","generalStylingControls","renderGeneralSpec","Error","propTypes","string","isRequired","array","func","onUpdate","object","mapPlotToProps","plot","buttonsPath","pathOr"],"mappings":"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","file":"RangeselectorButtons.js","sourcesContent":["/*\n * This component is used to create rangeselector buttons:\n *     https://plot.ly/javascript/reference/#layout-xaxis-rangeselector\n * We're rebuilding the buttons array because of this bug on Plotly.js:\n *     https://github.com/plotly/plotly.js/issues/777\n * We are able to make this work because Plotly.js is more lenient here:\n *     https://github.com/plotly/plotly.js/issues/749\n */\nimport React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { tail } from \"ramda\";\n\nimport AccordionMenu from \"./AccordionMenu\";\nimport connectWorkspacePlot from \"@workspace/utils/connectWorkspacePlot\";\n\n// eslint-disable-next-line\nimport GenericStylePanel from \"@workspace/components/panels/EditModeMenu/Style/GenericStyleComponents/Generic\";\nimport { _ } from \"@common/utils/i18n\";\nimport { CONTROL_TYPES } from \"@workspace/constants/workspace\";\nimport { relayout } from \"@workspace/actions/workspace\";\nimport { textControls } from \"@workspace/schemas/Reusable\";\n\nclass RangeselectorButtons extends Component {\n  constructor(props) {\n    super(props);\n    this.removeButton = this.removeButton.bind(this);\n    this.newButton = this.newButton.bind(this);\n  }\n\n  removeButton(userButtonIndex) {\n    const { axisTarget, buttons, dispatch } = this.props;\n    const userButtonsArray = tail(buttons);\n    const reset = { step: \"all\", label: \"reset\" };\n\n    userButtonsArray.splice(userButtonIndex, 1);\n    userButtonsArray.unshift(reset);\n\n    const relayoutObject =\n      userButtonsArray.length === 1\n        ? { [`${axisTarget}.rangeselector.buttons`]: [] }\n        : { [`${axisTarget}.rangeselector.buttons`]: userButtonsArray };\n\n    dispatch(relayout(relayoutObject));\n  }\n\n  newButton() {\n    const { axisTarget, buttons, dispatch } = this.props;\n    const newButtons = [...buttons, { label: `#${buttons.length}` }];\n    const reset = { step: \"all\", label: \"reset\" };\n\n    const relayoutObject =\n      buttons.length === 0\n        ? { [`${axisTarget}.rangeselector.buttons`]: [reset, { label: \"#1\" }] }\n        : { [`${axisTarget}.rangeselector.buttons`]: newButtons };\n\n    dispatch(relayout(relayoutObject));\n  }\n\n  buildSpec(index) {\n    const { axisTarget } = this.props;\n    const prefix = `layout.${axisTarget}.rangeselector.buttons[${index}]`;\n    return {\n      controls: [\n        {\n          label: \"Label\",\n          type: CONTROL_TYPES.TEXT_INPUT,\n          immediate: true,\n          attr: `${prefix}.label`,\n        },\n        {\n          label: \"Step\",\n          type: CONTROL_TYPES.DROPDOWN_SELECTOR,\n          attr: `${prefix}.step`,\n          options: [\n            { label: \"Month\", value: \"month\" },\n            { label: \"Year\", value: \"year\" },\n            { label: \"Day\", value: \"day\" },\n            { label: \"Hour\", value: \"hour\" },\n            { label: \"Minute\", value: \"minute\" },\n            { label: \"Second\", value: \"second\" },\n            { label: \"All\", value: \"all\" },\n          ],\n        },\n        {\n          label: \"Count\",\n          type: CONTROL_TYPES.NUMERIC_INPUT,\n          attr: `${prefix}.count`,\n        },\n        {\n          label: \"Stepmode\",\n          type: CONTROL_TYPES.DROPDOWN_SELECTOR,\n          attr: `${prefix}.stepmode`,\n          options: [\n            { label: \"Backward\", value: \"backward\" },\n            { label: \"To Date\", value: \"todate\" },\n          ],\n        },\n      ],\n    };\n  }\n\n  renderButtonPanel(button, i) {\n    const buttonPanel = (\n      <GenericStylePanel\n        dispatch={this.props.dispatch}\n        componentSpec={[this.buildSpec(i + 1)]}\n      />\n    );\n\n    return {\n      content: buttonPanel,\n      title: button.label,\n      isOpen: true,\n    };\n  }\n\n  renderGeneralSpec() {\n    const prefix = `layout.${this.props.axisTarget}.rangeselector`;\n    const visibility = {\n      attr: `${prefix}.visible`,\n      value: true,\n    };\n\n    const generalControls = [\n      {\n        title: \"Visibility\",\n        controls: [\n          {\n            label: null,\n            type: CONTROL_TYPES.RADIO,\n            attr: `${prefix}.visible`,\n            options: [\n              { label: \"Show\", value: true },\n              { label: \"Hide\", value: false },\n            ],\n          },\n        ],\n      },\n      {\n        title: \"Style\",\n        controls: [\n          {\n            /*\n                         * Cannot change the color of the 'reset' button:\n                         *     https://github.com/plotly/plotly.js/issues/790\n                         */\n            label: \"Background\",\n            type: CONTROL_TYPES.COLOR,\n            attr: `${prefix}.bgcolor`,\n          },\n          {\n            label: \"Border Width\",\n            type: CONTROL_TYPES.NUMERIC_INPUT,\n            attr: `${prefix}.borderwidth`,\n          },\n          {\n            label: \"Border Color\",\n            type: CONTROL_TYPES.COLOR,\n            attr: `${prefix}.bordercolor`,\n          },\n        ],\n        visibility: visibility,\n      },\n      {\n        title: \"Text\",\n        controls: textControls(`${prefix}.font`),\n        visibility: visibility,\n      },\n      {\n        title: \"Position\",\n        controls: [\n          {\n            label: \"Horizontal\",\n            type: CONTROL_TYPES.NUMERIC_INPUT,\n            step: 0.1,\n            attr: `${prefix}.x`,\n          },\n          {\n            label: \"Vertical\",\n            type: CONTROL_TYPES.NUMERIC_INPUT,\n            step: 0.1,\n            attr: `${prefix}.y`,\n          },\n        ],\n        visibility: visibility,\n      },\n    ];\n\n    return (\n      <div style={{ marginTop: \"20px\" }}>\n        <GenericStylePanel\n          dispatch={this.props.dispatch}\n          componentSpec={generalControls}\n        />\n      </div>\n    );\n  }\n\n  render() {\n    const { axisTarget, buttons, value } = this.props;\n    if (axisTarget === \"xaxis\") {\n      const allUserButtons = tail(value.buttons);\n      const buttonPanels = allUserButtons.map(\n        this.renderButtonPanel.bind(this)\n      );\n      let generalStylingControls =\n        buttons.length > 0 ? this.renderGeneralSpec() : null;\n\n      return (\n        <div className=\"+clearfix\">\n          <AccordionMenu\n            subMenus={buttonPanels}\n            addMenuText={_(\"Button\")}\n            removeMenuHandler={this.removeButton}\n            addNewMenuHandler={this.newButton}\n          />\n          {generalStylingControls}\n        </div>\n      );\n    }\n    throw new Error(`This styling option is unavalable for ${axisTarget} axis`);\n  }\n}\n\nRangeselectorButtons.propTypes = {\n  axisTarget: PropTypes.string.isRequired,\n  buttons: PropTypes.array.isRequired,\n  dispatch: PropTypes.func.isRequired,\n  onUpdate: PropTypes.func.isRequired,\n  value: PropTypes.object,\n};\n\nfunction mapPlotToProps(plot, { axisTarget }) {\n  const buttonsPath = [\"_fullLayout\", axisTarget, \"rangeselector\", \"buttons\"];\n  return { buttons: plot.pathOr([], buttonsPath) };\n}\n\nexport default connectWorkspacePlot(mapPlotToProps)(RangeselectorButtons);\n"]}