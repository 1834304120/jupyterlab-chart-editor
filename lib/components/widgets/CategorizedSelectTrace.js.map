{"version":3,"sources":["../../../src/components/widgets/CategorizedSelectTrace.js"],"names":["WorkspaceActions","ESC_KEYCODE","smoothScroll","element","increment","scrollAmount","window","requestAnimationFrame","delta","Math","ceil","scrollTop","abs","Number","MIN_VALUE","CategorizedSelectTrace","props","handleSelectOption","bind","handleClose","handleToggle","closeWithEsc","handleScroll","handleScrollOnOverlay","renderIconContainer","addEventListener","removeEventListener","scrollDelayHandle","clearTimeout","chartType","padding","iconClass","Boolean","IMG_DIR","imgSrc","imgThumb","categorize","categorizedOptions","option","category","get","meta","categoryOptions","push","toJS","assoc","traceOptions","reduce","selectedTraceValue","selectedOptionPredicate","find","selectOptionCallback","onMenuToggle","event","stopPropagation","keyCode","isOpen","setTimeout","handleRepositionOverlay","editModePanel","document","querySelector","deltaY","styles","refs","input","position","getBoundingClientRect","top","bottom","left","overlayStyles","computeOverlayPosition","overlay","style","selectedOption","label","type","inputClassName","getIconClassName","footerMessage","footerClassName","dispatch","plotMeta","tipDirection","feedLink","helpLink","exampleLink","includes","feedQuery","helpDoc","examplePlot","loadFigure","columnDefinition","categorizedTraceOptions","traceSelectHandler","options","map","disabled","isAccessible","isSelected","baseClass","testSelector","optionClassName","handleSelect","select","getImgThumbnailSrc","optionElements","renderOptions","handleStopPropagation","columns","renderColumns","renderFooterMessage","controlClassName","renderSelectInput","renderSelectOverlay","propTypes","func","isRequired","string","bool"],"mappings":"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","file":"CategorizedSelectTrace.js","sourcesContent":["import {\n  CHART_TYPE_ICON,\n  CATEGORY_LAYOUT,\n} from \"@workspace/constants/workspace\";\nimport { _ } from \"@common/utils/i18n\";\nimport { GET_ENCODING_SCHEMA } from \"@workspace/constants/graphTable\";\nimport { immutableTraceSelectOptionsShape } from \"@workspace/utils/customPropTypes\";\nimport { SELECT_PLOT_META } from \"@workspace/constants/selectPlot\";\nimport * as WorkspaceActions from \"@workspace/actions/workspace\";\nimport classnames from \"classnames\";\nimport R from \"ramda\";\nimport React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\n\nexport const ESC_KEYCODE = 27;\n\n/*\n * Scrolling over the menu overlay must be 'faked' via hard-updating the\n * scroll-top property of EditModePanel.\n */\nfunction smoothScroll(element, increment) {\n  if (element.scrollAmount) {\n    element.scrollAmount += increment;\n  } else {\n    element.scrollAmount = increment;\n  }\n\n  window.requestAnimationFrame(() => {\n    const delta = Math.ceil(element.scrollAmount / 7);\n    element.scrollTop += delta;\n    element.scrollAmount -= delta;\n    if (Math.abs(element.scrollAmount - 0) > Number.MIN_VALUE * 100) {\n      smoothScroll(element, 0);\n    } else {\n      element.scrollAmount = 0;\n    }\n  });\n}\n\n/*\n * This component provides a table style dropdown with chart types\n * for each category of plots. It generates a map of lists as a skeleton\n * for the table of choices where the chart categories are sequenced as\n * described by CATEGORY_LAYOUT in workspace/constants/workspace.js\n */\nclass CategorizedSelectTrace extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleSelectOption = this.handleSelectOption.bind(this);\n    this.handleClose = this.handleClose.bind(this);\n    this.handleToggle = this.handleToggle.bind(this);\n    this.closeWithEsc = this.closeWithEsc.bind(this);\n    this.handleScroll = this.handleScroll.bind(this);\n    this.handleScrollOnOverlay = this.handleScrollOnOverlay.bind(this);\n    this.renderIconContainer = this.renderIconContainer.bind(this);\n  }\n\n  componentDidMount() {\n    window.addEventListener(\"click\", this.handleClose);\n    window.addEventListener(\"keydown\", this.closeWithEsc);\n\n    // Handle scroll in capture mode not bubble mode.\n    window.addEventListener(\"scroll\", this.handleScroll, true);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"click\", this.handleClose);\n    window.removeEventListener(\"keydown\", this.closeWithEsc);\n    window.removeEventListener(\"scroll\", this.handleScroll);\n\n    if (this.scrollDelayHandle) {\n      clearTimeout(this.scrollDelayHandle);\n    }\n  }\n\n  getIconClassName(chartType, padding = true) {\n    const iconClass = CHART_TYPE_ICON[chartType];\n\n    return classnames({\n      [iconClass]: Boolean(iconClass),\n      \"+soft-half-right\": padding && Boolean(iconClass),\n    });\n  }\n\n  getImgThumbnailSrc(chartType) {\n    const IMG_DIR = \"/static/webapp/images/plot-thumbs/\";\n\n    const imgSrc = IMG_DIR + SELECT_PLOT_META[chartType].imgThumb;\n\n    return imgSrc;\n  }\n\n  categorizedTraceOptions() {\n    /*\n         * Generates a map of lists which represents the chart types seperated\n         * into each chart category.\n         */\n    const categorize = (categorizedOptions, option) => {\n      const category = GET_ENCODING_SCHEMA()[option.get(\"type\")].meta.category;\n      const categoryOptions = categorizedOptions[category] || [];\n\n      categoryOptions.push(option.toJS());\n\n      return R.assoc(category, categoryOptions, categorizedOptions);\n    };\n\n    return this.props.traceOptions.reduce(categorize, {});\n  }\n\n  selectedOption() {\n    const { selectedTraceValue, traceOptions } = this.props;\n    const selectedOptionPredicate = option => {\n      return option.get(\"value\") === selectedTraceValue;\n    };\n\n    return traceOptions.find(selectedOptionPredicate).toJS();\n  }\n\n  handleSelectOption(selectOptionCallback) {\n    selectOptionCallback();\n    this.props.onMenuToggle(false);\n  }\n\n  handleClose() {\n    this.props.onMenuToggle(false);\n  }\n\n  handleToggle(event) {\n    event.stopPropagation();\n    this.props.onMenuToggle();\n  }\n\n  closeWithEsc(event) {\n    if (event.keyCode === ESC_KEYCODE) {\n      this.handleClose();\n    }\n  }\n\n  // Must reposition chart select menu when the user scrolls.\n  handleScroll() {\n    if (this.scrollDelayHandle) {\n      clearTimeout(this.scrollDelayHandle);\n    }\n\n    if (this.props.isOpen) {\n      this.scrollDelayHandle = setTimeout(() => {\n        this.scrollDelayHandle = null;\n        this.handleRepositionOverlay();\n      }, 10);\n    }\n  }\n\n  /*\n     * Since scrolling over the overlay does scoll the element, no scroll event\n     * is fired and propgated. To allow the editModePanel to scroll,\n     * mousewheel events are used to simulate smooth scrolling.\n     */\n  handleScrollOnOverlay(event) {\n    const editModePanel = document.querySelector(\"#js-edit-mode-panel\");\n    smoothScroll(editModePanel, event.deltaY);\n  }\n\n  computeOverlayPosition() {\n    const styles = {};\n    if (this.refs.input) {\n      const position = this.refs.input.getBoundingClientRect();\n      styles.top = position.bottom;\n      styles.left = position.left;\n    }\n    return styles;\n  }\n\n  handleRepositionOverlay() {\n    const overlayStyles = this.computeOverlayPosition();\n    const overlay = document.querySelector(\"#js-chart-select-overlay\");\n\n    /*\n         * In order to quickly update the position of the overlay\n         * the style property of the overlay is hard-updated (not via setState).\n         * This avoids the problems of the overlay only moving to the correct\n         * position after scrolling.\n         */\n    overlay.style.left = `${overlayStyles.left}px`;\n    overlay.style.top = `${overlayStyles.top}px`;\n  }\n\n  renderSelectInput() {\n    const { label, type } = this.selectedOption();\n    const inputClassName = classnames(\n      \"categorized-select-trace__input\",\n      \"dropdown-container\",\n      \"arrowless-categorized-select-trace__input\",\n      \"js-categorized-select-trace__input\"\n    );\n\n    /*\n         * React select classes and DOM structure are reused to force\n         * the dropdown overlay to behave like other dropdown menus\n         * in the workspace.\n         * data-chart-type is used by Splinter to match against types\n         * as labels are purely a front-end construction.\n         */\n    return (\n      <div ref=\"input\" onClick={this.handleToggle} className={inputClassName}>\n        <div className=\"Select has-value\">\n          <div className=\"Select-control\">\n            <div className=\"Select-value\">\n              <span className=\"Select-value-label\">\n                <i className={this.getIconClassName(type)} />\n                {label}\n              </span>\n            </div>\n            <span className=\"Select-arrow-zone\">\n              <span className=\"Select-arrow\" />\n            </span>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  renderFooterMessage() {\n    if (!this.props.footerMessage) {\n      return null;\n    }\n\n    const footerClassName = classnames(\n      \"categorized-select-trace__overlay__footer\",\n      \"+weight-light\"\n    );\n\n    return (\n      <div className={footerClassName}>\n        <span>{_(this.props.footerMessage)}</span>\n      </div>\n    );\n  }\n\n  renderIconContainer(chartType) {\n    const { dispatch } = this.props;\n    let plotMeta = SELECT_PLOT_META[chartType] || {};\n    let tipDirection = \"right\";\n    let [feedLink, helpLink, exampleLink] = [null, null, null];\n\n    if ([\"scattermapbox\", \"choropleth\", \"scattergeo\"].includes(chartType)) {\n      tipDirection = \"left\";\n    }\n\n    if (plotMeta.feedQuery) {\n      feedLink = (\n        <a\n          href={\"https://plot.ly/feed/?q=\" + plotMeta.feedQuery}\n          target=\"_blank\"\n          className={\"hint--\" + tipDirection}\n          aria-label=\"Charts like this by Plotly users\"\n        >\n          <i className=\"icon-search\" aria-hidden=\"true\" />\n        </a>\n      );\n    }\n\n    if (plotMeta.helpDoc) {\n      helpLink = (\n        <a\n          href={plotMeta.helpDoc}\n          target=\"_blank\"\n          className={\"hint--\" + tipDirection}\n          aria-label=\"View a tutorial on this chart type\"\n        >\n          <i className=\"icon-book-2\" aria-hidden=\"true\" />\n        </a>\n      );\n    }\n\n    if (plotMeta.examplePlot) {\n      /* eslint-disable no-script-url */\n      exampleLink = (\n        <a\n          href=\"javascript:;\"\n          onClick={() =>\n            setTimeout(() => {\n              dispatch(\n                WorkspaceActions.loadFigure(plotMeta.examplePlot, chartType)\n              );\n            }, 0)}\n          className={\"hint--\" + tipDirection}\n          aria-label=\"See a basic example\"\n        >\n          <i className=\"icon-plot\" aria-hidden=\"true\" />\n        </a>\n      );\n      /* eslint-enable no-script-url */\n    }\n\n    return (\n      <div className=\"categorized-select-trace__icon__container js-icon-container\">\n        {feedLink}\n        {helpLink}\n        {exampleLink}\n      </div>\n    );\n  }\n\n  renderOptions(columnDefinition) {\n    const categorizedOptions = this.categorizedTraceOptions();\n\n    const { traceSelectHandler, selectedTraceValue } = this.props;\n    const options = categorizedOptions[columnDefinition.category];\n\n    return R.map(option => {\n      const { type, label, disabled, isAccessible } = option;\n      const isSelected = selectedTraceValue === type;\n\n      const baseClass = \"categorized-select-trace__overlay__option\";\n      const testSelector = \"js-categorized-select-trace-option\";\n      const optionClassName = classnames(baseClass, testSelector, {\n        [`${baseClass}--disabled`]: disabled,\n        [`${baseClass}--selected`]: isSelected,\n      });\n\n      let handleSelect = () => {};\n\n      if (!disabled) {\n        handleSelect = evt => {\n          const select = traceSelectHandler.bind(null, type);\n          return this.handleSelectOption(select);\n        };\n      }\n\n      return (\n        <div\n          onClick={handleSelect}\n          className={optionClassName}\n          key={type}\n          data-chart-type={type}\n        >\n          <div className=\"categorized-select-trace__image__container\">\n            <img src={this.getImgThumbnailSrc(type)} />\n          </div>\n          {this.renderIconContainer(type)}\n          {label}\n        </div>\n      );\n    }, options);\n  }\n\n  renderColumns() {\n    return R.map(columnDefinition => {\n      const optionElements = this.renderOptions(columnDefinition);\n\n      return (\n        <div\n          ref={columnDefinition.category}\n          key={columnDefinition.category}\n          className=\"categorized-select-trace__overlay__column\"\n        >\n          <div className=\"categorized-select-trace__overlay__title\">\n            {_(columnDefinition.label)}\n          </div>\n          <div className=\"categorized-select-trace__overlay__options\">\n            {optionElements}\n          </div>\n        </div>\n      );\n    }, CATEGORY_LAYOUT);\n  }\n\n  renderSelectOverlay() {\n    if (!this.props.isOpen) {\n      return null;\n    }\n\n    function handleStopPropagation(event) {\n      event.stopPropagation();\n    }\n\n    /*\n         * Using categorization of options, turn each list for each\n         * category to render columns for each category.\n         */\n    const columns = this.renderColumns();\n\n    return (\n      <div\n        id=\"js-chart-select-overlay\"\n        className=\"categorized-select-trace__overlay\"\n        onClick={handleStopPropagation}\n        onWheel={this.handleScrollOnOverlay}\n        style={this.computeOverlayPosition()}\n      >\n        <div className=\"categorized-select-trace__overlay__option__container\">\n          {columns}\n        </div>\n        {this.renderFooterMessage()}\n      </div>\n    );\n  }\n\n  render() {\n    const { dispatch } = this.props;\n\n    const controlClassName = classnames(\n      \"categorized-select-trace\",\n      \"js-categorized-select-trace\"\n    );\n\n    return (\n      <div className={controlClassName}>\n        {this.renderSelectInput()}\n        {this.renderSelectOverlay()}\n      </div>\n    );\n  }\n}\n\nCategorizedSelectTrace.propTypes = {\n  traceSelectHandler: PropTypes.func.isRequired,\n  selectedTraceValue: PropTypes.string.isRequired,\n  traceOptions: immutableTraceSelectOptionsShape.isRequired,\n  isOpen: PropTypes.bool.isRequired,\n  onMenuToggle: PropTypes.func.isRequired,\n  footerMessage: PropTypes.string,\n};\n\nexport default CategorizedSelectTrace;\n"]}