{"version":3,"sources":["../../../src/components/widgets/CategorizedSelectTrace.js"],"names":["WorkspaceActions","ESC_KEYCODE","smoothScroll","element","increment","scrollAmount","window","requestAnimationFrame","delta","Math","ceil","scrollTop","abs","Number","MIN_VALUE","CategorizedSelectTrace","props","handleSelectOption","bind","handleClose","handleToggle","closeWithEsc","handleScroll","handleScrollOnOverlay","renderIconContainer","addEventListener","removeEventListener","scrollDelayHandle","clearTimeout","chartType","padding","iconClass","Boolean","IMG_DIR","imgSrc","imgThumb","categorize","categorizedOptions","option","category","get","meta","categoryOptions","push","toJS","assoc","traceOptions","reduce","selectedTraceValue","selectedOptionPredicate","find","selectOptionCallback","onMenuToggle","event","stopPropagation","keyCode","isOpen","setTimeout","handleRepositionOverlay","editModePanel","document","querySelector","deltaY","styles","refs","input","position","getBoundingClientRect","top","bottom","left","overlayStyles","computeOverlayPosition","overlay","style","selectedOption","label","type","inputClassName","getIconClassName","footerMessage","footerClassName","dispatch","plotMeta","tipDirection","feedLink","helpLink","exampleLink","includes","feedQuery","helpDoc","examplePlot","loadFigure","columnDefinition","categorizedTraceOptions","traceSelectHandler","options","map","disabled","isAccessible","isSelected","baseClass","testSelector","optionClassName","handleSelect","evt","select","getImgThumbnailSrc","optionElements","renderOptions","handleStopPropagation","columns","renderColumns","renderFooterMessage","controlClassName","renderSelectInput","renderSelectOverlay","propTypes","func","isRequired","string","bool"],"mappings":"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","file":"CategorizedSelectTrace.js","sourcesContent":["import {\n    CHART_TYPE_ICON,\n    CATEGORY_LAYOUT\n} from '@workspace/constants/workspace';\nimport {_} from '@common/utils/i18n';\nimport {GET_ENCODING_SCHEMA} from '@workspace/constants/graphTable';\nimport {immutableTraceSelectOptionsShape} from '@workspace/utils/customPropTypes';\nimport {SELECT_PLOT_META} from '@workspace/constants/selectPlot';\nimport * as WorkspaceActions from '@workspace/actions/workspace';\nimport classnames from 'classnames';\nimport R from 'ramda';\nimport React, {PropTypes, Component} from 'react';\n\nexport const ESC_KEYCODE = 27;\n\n/*\n * Scrolling over the menu overlay must be 'faked' via hard-updating the\n * scroll-top property of EditModePanel.\n */\nfunction smoothScroll(element, increment) {\n    if (element.scrollAmount) {\n        element.scrollAmount += increment;\n    } else {\n        element.scrollAmount = increment;\n    }\n\n    window.requestAnimationFrame(() => {\n        const delta = Math.ceil(element.scrollAmount / 7);\n        element.scrollTop += delta;\n        element.scrollAmount -= delta;\n        if (Math.abs(element.scrollAmount - 0) > Number.MIN_VALUE * 100) {\n            smoothScroll(element, 0);\n        } else {\n            element.scrollAmount = 0;\n        }\n    });\n}\n\n/*\n * This component provides a table style dropdown with chart types\n * for each category of plots. It generates a map of lists as a skeleton\n * for the table of choices where the chart categories are sequenced as\n * described by CATEGORY_LAYOUT in workspace/constants/workspace.js\n */\nclass CategorizedSelectTrace extends Component {\n    constructor(props) {\n        super(props);\n\n        this.handleSelectOption = this.handleSelectOption.bind(this);\n        this.handleClose = this.handleClose.bind(this);\n        this.handleToggle = this.handleToggle.bind(this);\n        this.closeWithEsc = this.closeWithEsc.bind(this);\n        this.handleScroll = this.handleScroll.bind(this);\n        this.handleScrollOnOverlay = this.handleScrollOnOverlay.bind(this);\n        this.renderIconContainer = this.renderIconContainer.bind(this);\n    }\n\n    componentDidMount() {\n        window.addEventListener('click', this.handleClose);\n        window.addEventListener('keydown', this.closeWithEsc);\n\n        // Handle scroll in capture mode not bubble mode.\n        window.addEventListener('scroll', this.handleScroll, true);\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener('click', this.handleClose);\n        window.removeEventListener('keydown', this.closeWithEsc);\n        window.removeEventListener('scroll', this.handleScroll);\n\n        if (this.scrollDelayHandle) {\n            clearTimeout(this.scrollDelayHandle);\n        }\n    }\n\n    getIconClassName(chartType, padding = true) {\n        const iconClass = CHART_TYPE_ICON[chartType];\n\n        return classnames({\n            [iconClass]: Boolean(iconClass),\n            '+soft-half-right': padding && Boolean(iconClass)\n        });\n    }\n\n    getImgThumbnailSrc(chartType) {\n        const IMG_DIR = '/static/webapp/images/plot-thumbs/'\n\n        const imgSrc = IMG_DIR + SELECT_PLOT_META[chartType].imgThumb;\n\n        return imgSrc;\n    }\n\n    categorizedTraceOptions() {\n        /*\n         * Generates a map of lists which represents the chart types seperated\n         * into each chart category.\n         */\n        const categorize = (categorizedOptions, option) => {\n            const category = GET_ENCODING_SCHEMA()[option.get('type')].meta.category;\n            const categoryOptions = categorizedOptions[category] || [];\n\n            categoryOptions.push(option.toJS());\n\n            return R.assoc(category, categoryOptions, categorizedOptions);\n        };\n\n        return this.props.traceOptions.reduce(categorize, {});\n    }\n\n    selectedOption() {\n        const {selectedTraceValue, traceOptions} = this.props;\n        const selectedOptionPredicate = option => {\n            return option.get('value') === selectedTraceValue;\n        };\n\n        return traceOptions.find(selectedOptionPredicate).toJS();\n    }\n\n    handleSelectOption(selectOptionCallback) {\n        selectOptionCallback();\n        this.props.onMenuToggle(false);\n    }\n\n    handleClose() {\n        this.props.onMenuToggle(false);\n    }\n\n    handleToggle(event) {\n        event.stopPropagation();\n        this.props.onMenuToggle();\n    }\n\n    closeWithEsc(event) {\n        if (event.keyCode === ESC_KEYCODE) {\n            this.handleClose();\n        }\n    }\n\n    // Must reposition chart select menu when the user scrolls.\n    handleScroll() {\n        if (this.scrollDelayHandle) {\n            clearTimeout(this.scrollDelayHandle);\n        }\n\n        if (this.props.isOpen) {\n            this.scrollDelayHandle = setTimeout(() => {\n                this.scrollDelayHandle = null;\n                this.handleRepositionOverlay();\n            }, 10);\n        }\n    }\n\n    /*\n     * Since scrolling over the overlay does scoll the element, no scroll event\n     * is fired and propgated. To allow the editModePanel to scroll,\n     * mousewheel events are used to simulate smooth scrolling.\n     */\n    handleScrollOnOverlay(event) {\n        const editModePanel = document.querySelector('#js-edit-mode-panel');\n        smoothScroll(editModePanel, event.deltaY);\n    }\n\n    computeOverlayPosition() {\n        const styles = {};\n        if (this.refs.input) {\n            const position = this.refs.input.getBoundingClientRect();\n            styles.top = position.bottom;\n            styles.left = position.left;\n        }\n        return styles;\n    }\n\n    handleRepositionOverlay() {\n        const overlayStyles = this.computeOverlayPosition();\n        const overlay = document.querySelector('#js-chart-select-overlay');\n\n        /*\n         * In order to quickly update the position of the overlay\n         * the style property of the overlay is hard-updated (not via setState).\n         * This avoids the problems of the overlay only moving to the correct\n         * position after scrolling.\n         */\n        overlay.style.left = `${overlayStyles.left}px`;\n        overlay.style.top = `${overlayStyles.top}px`;\n    }\n\n    renderSelectInput() {\n        const {label, type} = this.selectedOption();\n        const inputClassName = classnames(\n            'categorized-select-trace__input',\n            'dropdown-container',\n            'arrowless-categorized-select-trace__input',\n            'js-categorized-select-trace__input'\n        );\n\n        /*\n         * React select classes and DOM structure are reused to force\n         * the dropdown overlay to behave like other dropdown menus\n         * in the workspace.\n         * data-chart-type is used by Splinter to match against types\n         * as labels are purely a front-end construction.\n         */\n        return (\n            <div\n                ref=\"input\"\n                onClick={this.handleToggle}\n                className={inputClassName}\n            >\n\n                <div className=\"Select has-value\">\n                    <div className=\"Select-control\">\n                        <div className=\"Select-value\">\n                            <span className=\"Select-value-label\">\n                                <i className={this.getIconClassName(type)} />\n                                {label}\n                            </span>\n                        </div>\n                        <span className=\"Select-arrow-zone\">\n                            <span className=\"Select-arrow\" />\n                        </span>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n\n    renderFooterMessage() {\n        if (!this.props.footerMessage) {\n            return null;\n        }\n\n        const footerClassName = classnames(\n            'categorized-select-trace__overlay__footer',\n            '+weight-light'\n        );\n\n        return (\n            <div className={footerClassName}>\n                <span>{_(this.props.footerMessage)}</span>\n            </div>\n        );\n    }\n\n    renderIconContainer( chartType ){\n\n        const {dispatch} = this.props;\n        let plotMeta = SELECT_PLOT_META[chartType] || {};\n        let tipDirection = 'right';\n        let [feedLink, helpLink, exampleLink] = [null, null, null];\n\n        if ([ 'scattermapbox', 'choropleth', 'scattergeo' ].includes(chartType)) {\n            tipDirection = 'left';\n        }\n\n        if (plotMeta.feedQuery) {\n            feedLink = (\n                <a\n                    href={\"https://plot.ly/feed/?q=\"+plotMeta.feedQuery}\n                    target=\"_blank\"\n                    className={\"hint--\"+tipDirection}\n                    aria-label=\"Charts like this by Plotly users\"\n                >\n                    <i className=\"icon-search\" aria-hidden=\"true\"></i>\n                </a>\n            );\n        }\n\n        if (plotMeta.helpDoc) {\n            helpLink = (\n                <a\n                    href={plotMeta.helpDoc}\n                    target=\"_blank\"\n                    className={'hint--' + tipDirection}\n                    aria-label=\"View a tutorial on this chart type\"\n                >\n                    <i className=\"icon-book-2\" aria-hidden=\"true\"></i>\n                </a>\n            );\n        }\n\n        if (plotMeta.examplePlot) {\n            /* eslint-disable no-script-url */\n            exampleLink = (\n                <a\n                    href=\"javascript:;\"\n                    onClick={() =>\n                        setTimeout(() => {dispatch(WorkspaceActions.loadFigure(plotMeta.examplePlot, chartType))}, 0)}\n                    className={'hint--' + tipDirection}\n                    aria-label=\"See a basic example\"\n                >\n                    <i className=\"icon-plot\" aria-hidden=\"true\"></i>\n                </a>\n            );\n            /* eslint-enable no-script-url */\n        }\n\n        return (\n            <div className=\"categorized-select-trace__icon__container js-icon-container\">\n                {feedLink}\n                {helpLink}\n                {exampleLink}\n            </div>\n        );\n    }\n\n    renderOptions(columnDefinition) {\n\n        const categorizedOptions = this.categorizedTraceOptions();\n\n        const {traceSelectHandler, selectedTraceValue} = this.props;\n        const options = categorizedOptions[columnDefinition.category];\n\n        return R.map(option => {\n            const {type, label, disabled, isAccessible} = option;\n            const isSelected = selectedTraceValue === type;\n\n            const baseClass = 'categorized-select-trace__overlay__option';\n            const testSelector = 'js-categorized-select-trace-option';\n            const optionClassName = classnames(baseClass, testSelector, {\n              [`${baseClass}--disabled`]: disabled,\n              [`${baseClass}--selected`]: isSelected\n            });\n\n            let handleSelect = () => {};\n\n            if (!disabled) {\n                handleSelect = (evt) => {\n                    const select = traceSelectHandler.bind(null, type);\n                    return this.handleSelectOption(select);\n                };\n            }\n\n            return (\n                <div\n                    onClick={handleSelect}\n                    className={optionClassName}\n                    key={type}\n                    data-chart-type={type}\n                >\n                    <div className=\"categorized-select-trace__image__container\">\n                        <img src={this.getImgThumbnailSrc(type)} />\n                    </div>\n                    {this.renderIconContainer(type)}\n                    {label}\n                </div>\n            );\n        }, options);\n    }\n\n    renderColumns() {\n\n        return R.map(columnDefinition => {\n\n            const optionElements = this.renderOptions(columnDefinition);\n\n            return (\n                <div\n                    ref={columnDefinition.category}\n                    key={columnDefinition.category}\n                    className=\"categorized-select-trace__overlay__column\"\n                >\n                    <div className=\"categorized-select-trace__overlay__title\">\n                        {_(columnDefinition.label)}\n                    </div>\n                    <div className=\"categorized-select-trace__overlay__options\">\n                        {optionElements}\n                    </div>\n                </div>\n            );\n        }, CATEGORY_LAYOUT);\n    }\n\n    renderSelectOverlay() {\n        if (!this.props.isOpen) {\n            return null;\n        }\n\n        function handleStopPropagation(event) {\n            event.stopPropagation();\n        }\n\n\n        /*\n         * Using categorization of options, turn each list for each\n         * category to render columns for each category.\n         */\n        const columns = this.renderColumns();\n\n        return (\n            <div\n                id=\"js-chart-select-overlay\"\n                className=\"categorized-select-trace__overlay\"\n                onClick={handleStopPropagation}\n                onWheel={this.handleScrollOnOverlay}\n                style={this.computeOverlayPosition()}\n            >\n                <div className=\"categorized-select-trace__overlay__option__container\">\n                    {columns}\n                </div>\n                {this.renderFooterMessage()}\n            </div>\n        );\n    }\n\n    render() {\n\n        const {dispatch} = this.props;\n\n        const controlClassName = classnames(\n            'categorized-select-trace',\n            'js-categorized-select-trace'\n        );\n\n        return (\n            <div className={controlClassName}>\n                {this.renderSelectInput()}\n                {this.renderSelectOverlay()}\n            </div>\n        );\n    }\n}\n\nCategorizedSelectTrace.propTypes = {\n    traceSelectHandler: PropTypes.func.isRequired,\n    selectedTraceValue: PropTypes.string.isRequired,\n    traceOptions: immutableTraceSelectOptionsShape.isRequired,\n    isOpen: PropTypes.bool.isRequired,\n    onMenuToggle: PropTypes.func.isRequired,\n    footerMessage: PropTypes.string\n};\n\nexport default CategorizedSelectTrace;\n"]}