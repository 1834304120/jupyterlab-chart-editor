{"version":3,"sources":["../../../src/components/widgets/UploadImageFile.js"],"names":["ErrorMessages","STATUS","LOADING","ERROR","SUCCESS","INITIAL","UploadImagefile","props","state","status","upload","bind","renderBlankState","renderFullState","renderErrorState","renderLoadingState","renderDropzone","nextProps","value","setState","files","reader","onload","contents","e","target","result","supportedImageDataTypes","imageTypeIsSupported","some","type","startsWith","onUpload","message","UPLOAD_IMAGE_FILE","PARSING_ERROR","length","ONE_AT_A_TIME","readAsDataURL","content","refs","dzone","open","propTypes","func","isRequired","string","module","exports"],"mappings":"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","file":"UploadImageFile.js","sourcesContent":["import React, {Component, PropTypes} from 'react';\nimport Dropzone from 'react-dropzone';\nimport {_} from '@common/utils/i18n';\n\nimport CustomFileReader from '@workspace/utils/CustomFileReader';\nimport * as ErrorMessages from '@workspace/constants/errorMessages';\nimport {IMAGE_PLACEHOLDER} from '@workspace/constants/workspace';\n\nconst STATUS = {\n    LOADING: 'LOADING',\n    ERROR: 'ERROR',\n    SUCCESS: 'SUCCESS',\n    INITIAL: 'INITIAL'\n};\n\nclass UploadImagefile extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            status: STATUS.INITIAL\n        };\n\n        this.upload = this.upload.bind(this);\n        this.renderBlankState = this.renderBlankState.bind(this);\n        this.renderFullState = this.renderFullState.bind(this);\n        this.renderErrorState = this.renderErrorState.bind(this);\n        this.renderLoadingState = this.renderLoadingState.bind(this);\n        this.renderDropzone = this.renderDropzone.bind(this);\n    }\n\n    componentWillReceiveProps(nextProps) {\n        if (\n            nextProps.value &&\n            nextProps.value !== null &&\n            nextProps.value !== IMAGE_PLACEHOLDER\n        ) {\n            this.setState({status: STATUS.SUCCESS});\n        }\n    }\n\n    upload(files) {\n        const reader = new CustomFileReader();\n        reader.onload = e => {\n            const contents = e.target.result;\n\n            // Supported image types on Plotly: https://plot.ly/javascript/static-image-export/#formats-supported\n            // 'PNG', 'JPG/JPEG', 'SVG'\n            const supportedImageDataTypes = ['data:image/jpeg', 'data:image/jpg', 'data:image/svg', 'data:image/png', 'data:image/gif', 'data:image/bmp', 'data:image/webp'];\n\n            const imageTypeIsSupported = supportedImageDataTypes.some((type) => {return contents.startsWith(type)});\n\n            if (imageTypeIsSupported) {\n                this.props.onUpload(contents);\n            } else {\n                this.setState({\n                    status: STATUS.ERROR,\n                    message: ErrorMessages.UPLOAD_IMAGE_FILE.PARSING_ERROR\n                });\n            }\n        };\n\n        if (files.length > 1) {\n            this.setState({\n                status: STATUS.ERROR,\n                message: ErrorMessages.UPLOAD_IMAGE_FILE.ONE_AT_A_TIME\n            });\n        } else if (files.length === 1) {\n            this.setState({status: STATUS.LOADING});\n            reader.readAsDataURL(files[0]);\n        }\n    }\n\n    renderDropzone(content) {\n        return (\n            <Dropzone\n                ref=\"dzone\"\n                onDrop={this.upload}\n                className=\"upload-imagefile js-upload-imagefile upload-imagefile__inactive-dropzone\"\n                activeClassName=\"upload-imagefile upload-imagefile__active-dropzone\"\n                disableClick={true}\n            >\n                {content}\n            </Dropzone>\n        );\n    }\n\n    renderBlankState() {\n        return this.renderDropzone(\n            <div className=\"upload-imagefile__dropzone-content full-height\">\n                <span className=\"+vertically-horizontally-centered-content\">\n                    <a onClick={() => this.refs.dzone.open()}>upload</a> <span>or drag and drop an image</span>\n                </span>\n            </div>\n        );\n    }\n\n    renderLoadingState() {\n        return (\n            <div className=\"upload-imagefile +cursor-loading full-height\">\n                <div className=\"+vertically-horizontally-centered-content\">\n                    {_('Loading...')}\n                </div>\n            </div>\n        );\n    }\n\n    renderErrorState() {\n        return this.renderDropzone(\n            <div className=\"full-height\">\n                <div className=\"+vertically-horizontally-centered-content full-width\">\n                    <div className=\"+text-error\">\n                        {this.state.message}\n                    </div>\n                    <a onClick={() => this.refs.dzone.open()}>{_('Upload again')}</a>\n                </div>\n            </div>\n        );\n    }\n\n    renderFullState() {\n        return (\n            <div className=\"upload-imagefile upload-imagefile-container thin-scroll\">\n              <img src={this.props.value} className=\"uploaded-image js-uploaded-image\"/>\n            </div>\n        );\n    }\n\n    render() {\n        let content;\n        if (this.state.status === STATUS.LOADING) {\n            content = this.renderLoadingState();\n        } else if (this.state.status === STATUS.INITIAL) {\n            content = this.renderBlankState();\n        } else if (this.state.status === STATUS.SUCCESS) {\n            content = this.renderFullState();\n        } else if (this.state.status === STATUS.ERROR) {\n            content = this.renderErrorState();\n        }\n\n        return <div>{content}</div>;\n\n    }\n\n}\n\nUploadImagefile.propTypes = {\n    onUpload: PropTypes.func.isRequired,\n    value: PropTypes.string.isRequired\n};\n\nmodule.exports = UploadImagefile;\n"]}