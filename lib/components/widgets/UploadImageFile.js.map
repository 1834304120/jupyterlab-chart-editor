{"version":3,"sources":["../../../src/components/widgets/UploadImageFile.js"],"names":["ErrorMessages","STATUS","LOADING","ERROR","SUCCESS","INITIAL","UploadImagefile","props","state","status","upload","bind","renderBlankState","renderFullState","renderErrorState","renderLoadingState","renderDropzone","getRef","c","_ref","nextProps","value","setState","files","reader","onload","contents","e","target","result","supportedImageDataTypes","imageTypeIsSupported","some","startsWith","type","onUpload","message","UPLOAD_IMAGE_FILE","PARSING_ERROR","length","ONE_AT_A_TIME","readAsDataURL","content","open","propTypes","func","isRequired","string","module","exports"],"mappings":"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","file":"UploadImageFile.js","sourcesContent":["import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport Dropzone from \"react-dropzone\";\nimport { _ } from \"@common/utils/i18n\";\n\nimport CustomFileReader from \"@workspace/utils/CustomFileReader\";\nimport * as ErrorMessages from \"@workspace/constants/errorMessages\";\nimport { IMAGE_PLACEHOLDER } from \"@workspace/constants/workspace\";\n\nconst STATUS = {\n  LOADING: \"LOADING\",\n  ERROR: \"ERROR\",\n  SUCCESS: \"SUCCESS\",\n  INITIAL: \"INITIAL\",\n};\n\nclass UploadImagefile extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      status: STATUS.INITIAL,\n    };\n\n    this.upload = this.upload.bind(this);\n    this.renderBlankState = this.renderBlankState.bind(this);\n    this.renderFullState = this.renderFullState.bind(this);\n    this.renderErrorState = this.renderErrorState.bind(this);\n    this.renderLoadingState = this.renderLoadingState.bind(this);\n    this.renderDropzone = this.renderDropzone.bind(this);\n    this.getRef = this.getRef.bind(this);\n  }\n\n  getRef(c) {\n    this._ref = c;\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (\n      nextProps.value &&\n      nextProps.value !== null &&\n      nextProps.value !== IMAGE_PLACEHOLDER\n    ) {\n      this.setState({ status: STATUS.SUCCESS });\n    }\n  }\n\n  upload(files) {\n    const reader = new CustomFileReader();\n    reader.onload = e => {\n      const contents = e.target.result;\n\n      // Supported image types on Plotly: https://plot.ly/javascript/static-image-export/#formats-supported\n      // 'PNG', 'JPG/JPEG', 'SVG'\n      const supportedImageDataTypes = [\n        \"data:image/jpeg\",\n        \"data:image/jpg\",\n        \"data:image/svg\",\n        \"data:image/png\",\n        \"data:image/gif\",\n        \"data:image/bmp\",\n        \"data:image/webp\",\n      ];\n\n      const imageTypeIsSupported = supportedImageDataTypes.some(type => {\n        return contents.startsWith(type);\n      });\n\n      if (imageTypeIsSupported) {\n        this.props.onUpload(contents);\n      } else {\n        this.setState({\n          status: STATUS.ERROR,\n          message: ErrorMessages.UPLOAD_IMAGE_FILE.PARSING_ERROR,\n        });\n      }\n    };\n\n    if (files.length > 1) {\n      this.setState({\n        status: STATUS.ERROR,\n        message: ErrorMessages.UPLOAD_IMAGE_FILE.ONE_AT_A_TIME,\n      });\n    } else if (files.length === 1) {\n      this.setState({ status: STATUS.LOADING });\n      reader.readAsDataURL(files[0]);\n    }\n  }\n\n  renderDropzone(content) {\n    return (\n      <Dropzone\n        ref={this.getRef}\n        onDrop={this.upload}\n        className=\"upload-imagefile js-upload-imagefile upload-imagefile__inactive-dropzone\"\n        activeClassName=\"upload-imagefile upload-imagefile__active-dropzone\"\n        disableClick={true}\n      >\n        {content}\n      </Dropzone>\n    );\n  }\n\n  renderBlankState() {\n    return this.renderDropzone(\n      <div className=\"upload-imagefile__dropzone-content full-height\">\n        <span className=\"+vertically-horizontally-centered-content\">\n          <a onClick={() => this._ref.open()}>upload</a>{\" \"}\n          <span>or drag and drop an image</span>\n        </span>\n      </div>\n    );\n  }\n\n  renderLoadingState() {\n    return (\n      <div className=\"upload-imagefile +cursor-loading full-height\">\n        <div className=\"+vertically-horizontally-centered-content\">\n          {_(\"Loading...\")}\n        </div>\n      </div>\n    );\n  }\n\n  renderErrorState() {\n    return this.renderDropzone(\n      <div className=\"full-height\">\n        <div className=\"+vertically-horizontally-centered-content full-width\">\n          <div className=\"+text-error\">{this.state.message}</div>\n          <a onClick={() => this._ref.open()}>{_(\"Upload again\")}</a>\n        </div>\n      </div>\n    );\n  }\n\n  renderFullState() {\n    return (\n      <div className=\"upload-imagefile upload-imagefile-container thin-scroll\">\n        <img\n          src={this.props.value}\n          className=\"uploaded-image js-uploaded-image\"\n        />\n      </div>\n    );\n  }\n\n  render() {\n    let content;\n    if (this.state.status === STATUS.LOADING) {\n      content = this.renderLoadingState();\n    } else if (this.state.status === STATUS.INITIAL) {\n      content = this.renderBlankState();\n    } else if (this.state.status === STATUS.SUCCESS) {\n      content = this.renderFullState();\n    } else if (this.state.status === STATUS.ERROR) {\n      content = this.renderErrorState();\n    }\n\n    return <div>{content}</div>;\n  }\n}\n\nUploadImagefile.propTypes = {\n  onUpload: PropTypes.func.isRequired,\n  value: PropTypes.string.isRequired,\n};\n\nmodule.exports = UploadImagefile;\n"]}