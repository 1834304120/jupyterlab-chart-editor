{"version":3,"sources":["../../../src/components/widgets/ToolMenuItemSubmenu.js"],"names":["ToolMenuItemSubmenu","props","state","isOpen","toggleInfo","bind","setState","title","mainText","subText","children","iconClass","renderInfoBox","propTypes","string","isRequired","node"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;AACA;;;;;;;;;;;;IAEqBA,mB;;;AACnB,+BAAYC,KAAZ,EAAmB;AAAA;;AAAA,0IACXA,KADW;;AAGjB,UAAKC,KAAL,GAAa;AACXC,cAAQ;AADG,KAAb;;AAIA,UAAKC,UAAL,GAAkB,MAAKA,UAAL,CAAgBC,IAAhB,OAAlB;AAPiB;AAQlB;;;;iCAEY;AACX,WAAKC,QAAL,CAAc,EAAEH,QAAQ,CAAC,KAAKD,KAAL,CAAWC,MAAtB,EAAd;AACD;;;oCAEe;AACd,aACE;AAAA;AAAA;AACG,aAAKF,KAAL,CAAWM,KAAX,GACC;AAAA;AAAA,YAAK,WAAU,2BAAf;AAA4C,eAAKN,KAAL,CAAWM;AAAvD,SADD,GAEG,IAHN;AAIG,aAAKN,KAAL,CAAWO,QAAX,GACC;AAAA;AAAA,YAAK,WAAU,0BAAf;AAA2C,eAAKP,KAAL,CAAWO;AAAtD,SADD,GAEG,IANN;AAOG,aAAKP,KAAL,CAAWQ,OAAX,GACC;AAAA;AAAA,YAAK,WAAU,8BAAf;AACG,eAAKR,KAAL,CAAWQ;AADd,SADD,GAIG,IAXN;AAYE;AAAA;AAAA;AAAM,eAAKR,KAAL,CAAWS;AAAjB;AAZF,OADF;AAgBD;;;6BAEQ;AACP,aACE;AAAA;AAAA;AACE;AAAA;AAAA,YAAM,SAAS,KAAKN,UAApB;AACE,+CAAG,WAAW,KAAKH,KAAL,CAAWU,SAAzB;AADF,SADF;AAKG,aAAKT,KAAL,CAAWC,MAAX,GACC;AAAA;AAAA,YAAK,WAAU,oBAAf;AACE;AACE,uBAAU,2BADZ;AAEE,qBAAS,KAAKC;AAFhB,YADF;AAKE;AAAA;AAAA;AAAM,iBAAKQ,aAAL;AAAN;AALF,SADD,GAQG;AAbN,OADF;AAiBD;;;;;;kBApDkBZ,mB;;;AAuDrBA,oBAAoBa,SAApB,GAAgC;AAC9BN,SAAO,oBAAUO,MADa;AAE9BN,YAAU,oBAAUM,MAFU;AAG9BL,WAAS,oBAAUK,MAHW;AAI9BH,aAAW,oBAAUG,MAAV,CAAiBC,UAJE;AAK9BL,YAAU,oBAAUM;AALU,CAAhC","file":"ToolMenuItemSubmenu.js","sourcesContent":["import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport classnames from \"classnames\";\n\nexport default class ToolMenuItemSubmenu extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      isOpen: false,\n    };\n\n    this.toggleInfo = this.toggleInfo.bind(this);\n  }\n\n  toggleInfo() {\n    this.setState({ isOpen: !this.state.isOpen });\n  }\n\n  renderInfoBox() {\n    return (\n      <div>\n        {this.props.title ? (\n          <div className=\"menu-item__submenu__title\">{this.props.title}</div>\n        ) : null}\n        {this.props.mainText ? (\n          <div className=\"menu-item__submenu__text\">{this.props.mainText}</div>\n        ) : null}\n        {this.props.subText ? (\n          <div className=\"menu-item__submenu__sub-text\">\n            {this.props.subText}\n          </div>\n        ) : null}\n        <div>{this.props.children}</div>\n      </div>\n    );\n  }\n\n  render() {\n    return (\n      <span>\n        <span onClick={this.toggleInfo}>\n          <i className={this.props.iconClass} />\n        </span>\n\n        {this.state.isOpen ? (\n          <div className=\"menu-item__submenu\">\n            <div\n              className=\"menu-item__submenu__cover\"\n              onClick={this.toggleInfo}\n            />\n            <div>{this.renderInfoBox()}</div>\n          </div>\n        ) : null}\n      </span>\n    );\n  }\n}\n\nToolMenuItemSubmenu.propTypes = {\n  title: PropTypes.string,\n  mainText: PropTypes.string,\n  subText: PropTypes.string,\n  iconClass: PropTypes.string.isRequired,\n  children: PropTypes.node,\n};\n"]}