{"version":3,"sources":["../../../src/components/widgets/DelayedTextInput.js"],"names":["DelayedTextInput","props","state","value","handleFocus","bind","handleChange","handleUpdate","handleKeyDown","getRef","c","_ref","nextProps","setState","event","autoSelect","target","select","onUpdate","onEnter","onKeyDown","key","keyCode","which","type","className","disabled","autoFocus","placeholder","readOnly","size","propTypes","func","isRequired","string","bool","oneOf","number","defaultProps"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;;;;;;;;;AAEA;;;;;;;;;;;;;;;IAeqBA,gB;;;AACnB,4BAAYC,KAAZ,EAAmB;AAAA;;AAAA,oIACXA,KADW;;AAEjB,UAAKC,KAAL,GAAa,EAAEC,OAAOF,MAAME,KAAf,EAAb;;AAEA,UAAKC,WAAL,GAAmB,MAAKA,WAAL,CAAiBC,IAAjB,OAAnB;AACA,UAAKC,YAAL,GAAoB,MAAKA,YAAL,CAAkBD,IAAlB,OAApB;AACA,UAAKE,YAAL,GAAoB,MAAKA,YAAL,CAAkBF,IAAlB,OAApB;AACA,UAAKG,aAAL,GAAqB,MAAKA,aAAL,CAAmBH,IAAnB,OAArB;AACA,UAAKI,MAAL,GAAc,MAAKA,MAAL,CAAYJ,IAAZ,OAAd;AARiB;AASlB;;;;2BAEMK,C,EAAG;AACR,WAAKC,IAAL,GAAYD,CAAZ;AACD;;;8CAEyBE,S,EAAW;AACnC,UAAMT,QAAQS,UAAUT,KAAxB;AACA,UAAIA,UAAU,KAAKD,KAAL,CAAWC,KAAzB,EAAgC;AAC9B,aAAKU,QAAL,CAAc,EAAEV,YAAF,EAAd;AACD;AACF;;AAED;;;;gCACYW,K,EAAO;AACjB,UAAI,KAAKb,KAAL,CAAWc,UAAf,EAA2B;AACzBD,cAAME,MAAN,CAAaC,MAAb;AACD;AACF;;;uCAEmC;AAAA,UAAXd,KAAW,QAArBa,MAAqB,CAAXb,KAAW;;AAClC,WAAKU,QAAL,CAAc,EAAEV,YAAF,EAAd;AACD;;;wCAEmC;AAAA,UAAXA,KAAW,SAArBa,MAAqB,CAAXb,KAAW;AAAA,UAC1Be,QAD0B,GACb,KAAKjB,KADQ,CAC1BiB,QAD0B;;;AAGlC,WAAKL,QAAL,CAAc,EAAEV,YAAF,EAAd;;AAEA,UAAIe,QAAJ,EAAc;AACZA,iBAASf,KAAT;AACD;AACF;;;kCAEaW,K,EAAO;AAAA,mBACsB,KAAKb,KAD3B;AAAA,UACXkB,OADW,UACXA,OADW;AAAA,UACFD,QADE,UACFA,QADE;AAAA,UACQE,SADR,UACQA,SADR;;;AAGnB,UAAMC,MAAMP,MAAMQ,OAAN,IAAiBR,MAAMS,KAAnC;;AAEA;AACA,UAAIF,QAAQ,EAAZ,EAAgB;AACd,YAAMlB,QAAQ,KAAKQ,IAAL,CAAUR,KAAxB;;AAEA,YAAIgB,OAAJ,EAAa;AACXA,kBAAQhB,KAAR;AACD,SAFD,MAEO;AACLe,mBAASf,KAAT;AACD;AACF,OARD,MAQO,IAAIkB,QAAQ,EAAZ,EAAgB;AACrB;AACA,aAAKR,QAAL,CAAc,EAAEV,OAAO,KAAKF,KAAL,CAAWE,KAApB,EAAd;AACD,OAHM,MAGA,IAAIiB,SAAJ,EAAe;AACpB;AACAA,kBAAUN,KAAV;AACD;AACF;;;6BAEQ;AAAA,oBASH,KAAKb,KATF;AAAA,UAELuB,IAFK,WAELA,IAFK;AAAA,UAGLC,SAHK,WAGLA,SAHK;AAAA,UAILC,QAJK,WAILA,QAJK;AAAA,UAKLC,SALK,WAKLA,SALK;AAAA,UAMLC,WANK,WAMLA,WANK;AAAA,UAOLC,QAPK,WAOLA,QAPK;AAAA,UAQLC,IARK,WAQLA,IARK;AAAA,UAUC3B,KAVD,GAUW,KAAKD,KAVhB,CAUCC,KAVD;;AAWP,aACE;AACE,aAAK,KAAKM,MADZ;AAEE,cAAMe,IAFR;AAGE,mBAAWC,aAAa,EAH1B;AAIE,eAAOtB,KAJT;AAKE,iBAAS,KAAKC,WALhB;AAME,kBAAU,KAAKE,YANjB;AAOE,gBAAQ,KAAKC,YAPf;AAQE,kBAAUmB,QARZ;AASE,mBAAWC,SATb;AAUE,mBAAW,KAAKnB,aAVlB;AAWE,qBAAaoB,WAXf;AAYE,kBAAUC,QAZZ;AAaE,cAAMC;AAbR,QADF;AAiBD;;;;;;kBA/FkB9B,gB;;;AAkGrBA,iBAAiB+B,SAAjB,GAA6B;AAC3B;AACAb,YAAU,oBAAUc,IAAV,CAAeC,UAFE;;AAI3B;AACAd,WAAS,oBAAUa,IALQ;;AAO3B;AACAZ,aAAW,oBAAUY,IARM;;AAU3B;AACA7B,SAAO,oBAAU+B,MAAV,CAAiBD,UAXG;;AAa3B;AACAlB,cAAY,oBAAUoB,IAdK;;AAgB3B;AACAP,eAAa,oBAAUM,MAjBI;AAkB3BT,aAAW,oBAAUS,MAlBM;AAmB3BR,YAAU,oBAAUS,IAnBO;AAoB3BR,aAAW,oBAAUQ,IApBM;AAqB3BN,YAAU,oBAAUM,IArBO;AAsB3BX,QAAM,oBAAUY,KAAV,CAAgB,CAAC,MAAD,EAAS,UAAT,CAAhB,CAtBqB;AAuB3BN,QAAM,oBAAUO;AAvBW,CAA7B;;AA0BArC,iBAAiBsC,YAAjB,GAAgC;AAC9BT,YAAU,KADoB;AAE9BL,QAAM,MAFwB;AAG9BT,cAAY;AAHkB,CAAhC","file":"DelayedTextInput.js","sourcesContent":["import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\n\n/**\n * A generic component to handle text input fields that should not\n * propagate their updates until the user blurs or presses enter.\n *\n * If you want to update on every change, use a bare <input> instead.\n *\n * Exposes three events:\n *     onUpdate: fired on blur, and on pressing enter if there is no onEnter\n *     onEnter (optional): fired only when pressing enter\n *     onKeyDown (optional): fired on any keydown. Intended for capturing\n *         special keys like arrow keys, rather than direct changes to the text\n *\n * TODO: use this in NumericInput as well\n * https://github.com/plotly/streambed/issues/8440\n */\nexport default class DelayedTextInput extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { value: props.value };\n\n    this.handleFocus = this.handleFocus.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleUpdate = this.handleUpdate.bind(this);\n    this.handleKeyDown = this.handleKeyDown.bind(this);\n    this.getRef = this.getRef.bind(this);\n  }\n\n  getRef(c) {\n    this._ref = c;\n  }\n\n  componentWillReceiveProps(nextProps) {\n    const value = nextProps.value;\n    if (value !== this.state.value) {\n      this.setState({ value });\n    }\n  }\n\n  // Selects/highlights all of the text in the input on focus\n  handleFocus(event) {\n    if (this.props.autoSelect) {\n      event.target.select();\n    }\n  }\n\n  handleChange({ target: { value } }) {\n    this.setState({ value });\n  }\n\n  handleUpdate({ target: { value } }) {\n    const { onUpdate } = this.props;\n\n    this.setState({ value });\n\n    if (onUpdate) {\n      onUpdate(value);\n    }\n  }\n\n  handleKeyDown(event) {\n    const { onEnter, onUpdate, onKeyDown } = this.props;\n\n    const key = event.keyCode || event.which;\n\n    // Allow the input to be saved when the enter key is pressed\n    if (key === 13) {\n      const value = this._ref.value;\n\n      if (onEnter) {\n        onEnter(value);\n      } else {\n        onUpdate(value);\n      }\n    } else if (key === 27) {\n      // revert input with escape key\n      this.setState({ value: this.props.value });\n    } else if (onKeyDown) {\n      // pass anything else on to onKeyDown from props\n      onKeyDown(event);\n    }\n  }\n\n  render() {\n    const {\n      type,\n      className,\n      disabled,\n      autoFocus,\n      placeholder,\n      readOnly,\n      size,\n    } = this.props;\n    const { value } = this.state;\n    return (\n      <input\n        ref={this.getRef}\n        type={type}\n        className={className || \"\"}\n        value={value}\n        onFocus={this.handleFocus}\n        onChange={this.handleChange}\n        onBlur={this.handleUpdate}\n        disabled={disabled}\n        autoFocus={autoFocus}\n        onKeyDown={this.handleKeyDown}\n        placeholder={placeholder}\n        readOnly={readOnly}\n        size={size}\n      />\n    );\n  }\n}\n\nDelayedTextInput.propTypes = {\n  // Called with input value on blur (and enter if no onEnter is given)\n  onUpdate: PropTypes.func.isRequired,\n\n  // Called with input value on enter\n  onEnter: PropTypes.func,\n\n  // Called on any keydown\n  onKeyDown: PropTypes.func,\n\n  // Input value property\n  value: PropTypes.string.isRequired,\n\n  // do we select the whole input string on focus?\n  autoSelect: PropTypes.bool,\n\n  // Other properties forwarded to <input>\n  placeholder: PropTypes.string,\n  className: PropTypes.string,\n  disabled: PropTypes.bool,\n  autoFocus: PropTypes.bool,\n  readOnly: PropTypes.bool,\n  type: PropTypes.oneOf([\"text\", \"password\"]),\n  size: PropTypes.number,\n};\n\nDelayedTextInput.defaultProps = {\n  readOnly: false,\n  type: \"text\",\n  autoSelect: true,\n};\n"]}