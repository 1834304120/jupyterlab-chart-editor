{"version":3,"sources":["../../../src/components/widgets/SelectColumn.js"],"names":["TEST_SELECTOR_CLASS","UnconnectedSelectColumn","props","isConsistent","bind","onColumnSelection","getOptions","getValue","newOption","multi","multiTable","srcString","columnMeta","selection","selectedColumnId","tables","tableIds","restrictOptions","fid","reduce","options","table","tableId","index","indexOf","push","disabled","label","columnIds","get","forEach","getIn","columnId","value","colRef","type","uids","find","allColumnIds","toJS","referencedColumnIds","uid","EXCLUDE","SINGLE","INCLUDE","ALL","Error","srcs","Array","src","nextProps","minWidth","placeholder","propTypes","func","isRequired","oneOfType","array","string","bool","map","list","defaultProps","clearable","mapStateToProps","state","workspace","SelectColumn"],"mappings":"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","file":"SelectColumn.js","sourcesContent":["import Dropdown from \"./Dropdown\";\nimport ImmutablePropTypes from \"react-immutable-proptypes\";\nimport React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport connectWorkspaceSheets from \"@workspace/utils/connectWorkspaceSheets\";\nimport { difference, is, isEmpty, isNil, map } from \"ramda\";\nimport { connect } from \"react-redux\";\nimport { COL_REF_TYPES } from \"@workspace/constants/files\";\nimport { stringOrNull } from \"@workspace/utils/customPropTypes\";\nimport { joinSrcs, parseColRef, parseSrc } from \"@workspace/utils/regexps\";\n\nexport const TEST_SELECTOR_CLASS = \"js-SelectColumn\";\n\nexport class UnconnectedSelectColumn extends Component {\n  constructor(props) {\n    super(props);\n    this.isConsistent = this.isConsistent.bind(this);\n    this.onColumnSelection = this.onColumnSelection.bind(this);\n    this.getOptions = this.getOptions.bind(this);\n    this.getValue = this.getValue.bind(this);\n  }\n\n  onColumnSelection(newOption) {\n    const { multi, multiTable, onColumnSelection } = this.props;\n    if (multi) {\n      if (multiTable) {\n        onColumnSelection(isEmpty(newOption || []) ? null : newOption);\n      } else {\n        // newOption can be `undefined` or an array.\n        const srcString = joinSrcs(newOption || []);\n        onColumnSelection(srcString ? srcString : null);\n      }\n    } else {\n      onColumnSelection(newOption);\n    }\n  }\n\n  getOptions() {\n    const {\n      columnMeta,\n      multi,\n      multiTable,\n      selectedColumnId: selection,\n      tables,\n      tableIds,\n    } = this.props;\n\n    // If multiTable is true, selection is an array of columnIds.\n    const restrictOptions = !multiTable && multi && selection;\n    const fid = restrictOptions ? parseSrc(selection).fid : null;\n\n    return tables.reduce((options, table, tableId) => {\n      const index = tableIds.indexOf(tableId);\n\n      if (restrictOptions) {\n        // Only allow new selections to match currently-selected table.\n        if (fid !== tableId) {\n          return options;\n        }\n      }\n\n      // This is just a label, which is why it's always disabled.\n      options.push({ disabled: true, label: `Grid ${index + 1}` });\n\n      // These are the select-able options.\n      const columnIds = table.get(\"columnIds\");\n      columnIds.forEach(columnId => {\n        const label = columnMeta.getIn([columnId, \"name\"]);\n        options.push({ label, value: columnId });\n      });\n\n      return options;\n    }, []);\n  }\n\n  getValue() {\n    const {\n      multi,\n      multiTable,\n      tables,\n      selectedColumnId: selection,\n    } = this.props;\n\n    // If we're not in multi-mode, we return the string we're given.\n    if (!multi) {\n      return selection;\n    }\n\n    // We're in multi-mode, but be consistent undefined, null, '', & [].\n    if (isEmpty(selection || [])) {\n      return null;\n    }\n\n    // If we're in multiTable-mode, just return the array we have.\n    if (multiTable) {\n      return selection;\n    }\n\n    // For everything else, we need to parse the src to return an array.\n    const { colRef, fid } = parseSrc(selection);\n    const { type, uids = [] } = parseColRef(colRef);\n    const table = tables.find(value => value.get(\"fid\") === fid);\n    const allColumnIds = table.get(\"columnIds\").toJS();\n    const referencedColumnIds = map(uid => `${fid}:${uid}`, uids);\n\n    switch (type) {\n      case COL_REF_TYPES.EXCLUDE:\n        return difference(allColumnIds, referencedColumnIds);\n      case COL_REF_TYPES.SINGLE:\n      case COL_REF_TYPES.INCLUDE:\n        return referencedColumnIds;\n      case COL_REF_TYPES.ALL:\n        return allColumnIds;\n      default:\n        throw new Error(\"Unknown colRef type in SelectColumn.\");\n    }\n  }\n\n  isConsistent(selection, tables) {\n    /*\n         * This is really tricky, we need the props from our parent component\n         * (selectedSrc) to be consistent with props from connect (tables).\n         * Shockingly, we can't depend on this being synchronous.\n         */\n\n    if (isNil(selection) || isEmpty(selection)) {\n      // Nothing to cross-check with, we're A-OK.\n      return true;\n    }\n\n    /*\n         * We return false if the connected 'tables' doesn't match passed-down\n         * 'selectedSrc'. Note that there's also a potential problem with the\n         * uids in the `selectedSrc`, however, this doesn't lead to bad render\n         * cycles and it's hard to tell if the given `selectedSrc` was just bad\n         * from the beginning or if it's just a temporary inconsistency due to\n         * a race condition.\n         */\n    const srcs = is(Array, selection) ? selection : [selection];\n    for (const src of srcs) {\n      const { fid } = parseSrc(src);\n      const table = tables.find(value => value.get(\"fid\") === fid);\n      if (!table) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  shouldComponentUpdate(nextProps) {\n    // TODO: Tricky issue with connected leaf components. See #7517\n    const { selectedColumnId: selection, tables } = nextProps;\n    return this.isConsistent(selection, tables);\n  }\n\n  render() {\n    const { label, minWidth, multi, placeholder } = this.props;\n    const options = this.getOptions();\n    const value = this.getValue();\n\n    return (\n      <span className=\"widget-dropdown\">\n        <Dropdown\n          className={`${TEST_SELECTOR_CLASS}-${label}`}\n          options={options}\n          value={value}\n          searchable={true}\n          placeholder={placeholder}\n          onChange={this.onColumnSelection}\n          clearable={true}\n          minWidth={minWidth}\n          multi={multi}\n          width={\"100%\"}\n        />\n      </span>\n    );\n  }\n}\n\nUnconnectedSelectColumn.propTypes = {\n  // Props from parent component.\n  onColumnSelection: PropTypes.func.isRequired,\n  selectedColumnId: PropTypes.oneOfType([stringOrNull, PropTypes.array]),\n  placeholder: PropTypes.string,\n  minWidth: PropTypes.string,\n  multi: PropTypes.bool,\n  multiTable: PropTypes.bool,\n  label: PropTypes.string,\n\n  // Props from connect.\n  columnMeta: ImmutablePropTypes.map,\n  tables: ImmutablePropTypes.map,\n  tableIds: ImmutablePropTypes.list,\n};\n\nUnconnectedSelectColumn.defaultProps = {\n  placeholder: \"\",\n  clearable: true,\n  multi: false,\n  multiTable: false,\n  label: \"\",\n};\n\nconst mapStateToProps = state => {\n  const { columnMeta, tables, tableIds } = state.workspace;\n  return { columnMeta, tables, tableIds };\n};\n\nconst SelectColumn = connect(mapStateToProps)(\n  connectWorkspaceSheets(null, true)(UnconnectedSelectColumn)\n);\n\nexport default SelectColumn;\n"]}