{"version":3,"sources":["../../../src/components/widgets/MapboxStyleUrlController.js"],"names":["PRESET_STYLES","label","value","STYLE_OPTIONS","VALUE_TYPES","PRESET","MAPBOX_STUDIO","MAPBOX_ATLAS","JSON","STATUS","LOADING","BLANK","WARNING","DONE","menuItem","content","menuItemWarning","MAPBOX_ATLAS_ERROR_MESSAGES","INVALID_JSON","url","FAILED_REQUEST","errorMessage","parse","protocol","DOWNLOAD","FAILED_PARSING","EXPECTED_URL","UNKNOWN","JsonEditor","props","state","invalidJSON","setValidJSON","bind","setState","nextProps","jsonString","jsonObject","e","console","error","applyChanges","textareaStyle","textareaClass","stringify","target","MapboxStyleUrlController","defaultValueType","defaultAtlasUrl","get","valueType","values","status","atlasStyleURL","changeValueType","setValue","updatePlot","setAtlasURL","downloadAtlasJSON","viewJson","setValueFromProps","style","find","option","isNil","newValueType","Object","assign","then","stateUpdate","styleJSON","catch","ERROR","contains","message","keys","dispatch","accesstoken","propTypes","object","isRequired","func","MapboxStyleUrl","selectedToken","onTokenChange","renderOptions","help","header","title","tooltip","viewJsonButton","buttonText","onChange","newValue","headerText","placeholder","onSubmit","textAreaValue","buttonClass","join","token","oneOf","shape","string","module","exports"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;AACA;;;;AACA;;AACA;;AACA;;;;AACA;;;;AACA;;;;AACA;;AACA;;AACA;;;;;;;;;;;;;;AAEA,IAAMA,gBAAgB,CACpB,EAAEC,OAAO,OAAT,EAAkBC,OAAO,OAAzB,EADoB,EAEpB,EAAED,OAAO,UAAT,EAAqBC,OAAO,UAA5B,EAFoB,EAGpB,EAAED,OAAO,OAAT,EAAkBC,OAAO,OAAzB,EAHoB,EAIpB,EAAED,OAAO,MAAT,EAAiBC,OAAO,MAAxB,EAJoB,EAKpB,EAAED,OAAO,WAAT,EAAsBC,OAAO,WAA7B,EALoB,EAMpB,EAAED,OAAO,wBAAT,EAAmCC,OAAO,mBAA1C,EANoB,CAAtB;;AASA,IAAMC,gBAAgB,CACpB,EAAEF,OAAO,eAAT,EAA0BC,OAAO,QAAjC,EADoB,EAEpB,EAAED,OAAO,qBAAT,EAAgCC,OAAO,eAAvC,EAFoB,EAGpB,EAAED,OAAO,oBAAT,EAA+BC,OAAO,cAAtC,EAHoB,EAIpB,EAAED,OAAO,aAAT,EAAwBC,OAAO,MAA/B,EAJoB,CAAtB;;AAOA,IAAME,cAAc;AAClBC,UAAQ,QADU;AAElBC,iBAAe,eAFG;AAGlBC,gBAAc,cAHI;AAIlBC,QAAM;AAJY,CAApB;;AAOA,IAAMC,SAAS;AACbC,WAAS,SADI;AAEbC,SAAO,OAFM;AAGbC,WAAS,SAHI;AAIbC,QAAM;AAJO,CAAf;;AAOA,IAAMC,WAAW,SAAXA,QAAW,UAAW;AAC1B,SACE;AAAA;AAAA,MAAK,WAAU,WAAf;AACE;AAAA;AAAA,QAAK,WAAU,qBAAf;AAAsCC;AAAtC;AADF,GADF;AAKD,CAND;;AAQA,IAAMC,kBAAkB,SAAlBA,eAAkB,UAAW;AACjC,SACE;AAAA;AAAA,MAAK,WAAU,WAAf;AACE;AAAA;AAAA,QAAK,WAAU,qBAAf;AACE;AAAA;AAAA,UAAM,WAAU,8BAAhB;AAAgDD;AAAhD;AADF;AADF,GADF;AAOD,CARD;;AAUA,IAAME,8BAA8B;AAClCC,gBAAc;AAAA,WACZF,gBACE;AAAA;AAAA;AACG,2CAAsBE,YADzB;AAEE;AAAA;AAAA,UAAG,MAAMC,GAAT,EAAc,QAAO,QAArB;AACGA;AADH;AAFF,KADF,CADY;AAAA,GADoB;;AAWlCC,kBAAgB,6BAAO;AACrB,QAAIC,qBAAJ;AACA,QAAI,cAAIC,KAAJ,CAAUH,GAAV,EAAeI,QAAf,KAA4B,OAAhC,EAAyC;AACvCF,qBAAeL,gBACb;AAAA;AAAA;AACG,6CAAsBI,cADzB;AAEE;AAAA;AAAA,YAAG,MAAK,kCAAR,EAA2C,QAAO,QAAlD;AAAA;AAAA,SAFF;AAAA;AAAA,OADa,CAAf;AAQD,KATD,MASO;AACLC,qBAAeL,gBACb;AAAA;AAAA;AACG,6CAAsBQ,QADzB;AAEE;AAAA;AAAA,YAAG,MAAML,GAAT,EAAc,QAAO,QAArB;AACGA;AADH,SAFF;AAKG,qBAAE,gDAAF;AALH,OADa,CAAf;AASD;AACD,WAAOE,YAAP;AACD,GAlCiC;;AAoClCI,kBAAgB;AAAA,WACdT,gBACE;AAAA;AAAA;AACG,2CAAsBS,cADzB;AAEE;AAAA;AAAA,UAAG,MAAMN,GAAT,EAAc,QAAO,QAArB;AACGA;AADH,OAFF;AAAA;AAKG,2CAAsBO,YALzB;AAAA;AAAA,KADF,CADc;AAAA,GApCkB;;AAgDlCC,WAAS;AAAA,WAAMX,gBAAgB;AAAA;AAAA;AAAO,2CAAsBW;AAA7B,KAAhB,CAAN;AAAA;AAhDyB,CAApC;;AAmDA;;IACMC,U;;;AACJ,sBAAYC,KAAZ,EAAmB;AAAA;;AAAA,wHACXA,KADW;;AAEjB,UAAKC,KAAL,GAAa;AACX5B,aAAO,IADI;AAEX6B,mBAAa;AAFF,KAAb;AAIA,UAAKC,YAAL,GAAoB,MAAKA,YAAL,CAAkBC,IAAlB,OAApB;AANiB;AAOlB;;;;yCAEoB;AACnB,WAAKC,QAAL,CAAc,EAAEhC,OAAO,KAAK2B,KAAL,CAAW3B,KAApB,EAAd;AACD;;;8CAEyBiC,S,EAAW;AACnC,WAAKD,QAAL,CAAc,EAAEhC,OAAOiC,UAAUjC,KAAnB,EAAd;AACD;;;iCAEYkC,U,EAAY;AACvB,WAAKF,QAAL,CAAc,EAAEH,aAAa,KAAf,EAAd;AACA,UAAI;AACF,YAAMM,aAAa7B,KAAKc,KAAL,CAAWc,UAAX,CAAnB;AACA,aAAKF,QAAL,CAAc,EAAEhC,OAAOmC,UAAT,EAAd;AACD,OAHD,CAGE,OAAOC,CAAP,EAAU;AACVC,gBAAQC,KAAR,CAAcF,CAAd;AACA,aAAKJ,QAAL,CAAc,EAAEH,aAAa,IAAf,EAAd;AACD;AACF;;;6BAEQ;AAAA;;AAAA,mBACgD,KAAKF,KADrD;AAAA,UACCY,YADD,UACCA,YADD;AAAA,UACeC,aADf,UACeA,aADf;AAAA,UAC8BC,aAD9B,UAC8BA,aAD9B;AAAA,UAECzC,KAFD,GAEW,KAAK4B,KAFhB,CAEC5B,KAFD;;;AAIP,aACE;AAAA;AAAA;AACGY,iBACC;AACE,iBAAO4B,aADT;AAEE,qBAAWC,aAFb;AAGE,iBAAOnC,KAAKoC,SAAL,CAAe1C,KAAf,EAAsB,IAAtB,EAA4B,CAA5B,CAHT;AAIE,kBAAQ;AAAA,mBAAK,OAAK8B,YAAL,CAAkBM,EAAEO,MAAF,CAAS3C,KAA3B,CAAL;AAAA;AAJV,UADD,CADH;AAUG,aAAK4B,KAAL,CAAWC,WAAX,GACCjB,SACE;AAAA;AAAA,YAAM,WAAU,2CAAhB;AACG,uBAAE,cAAF;AADH,SADF,CADD,GAMG,IAhBN;AAkBGA,iBACC;AAAA;AAAA;AACE,uBAAU,mDADZ;AAEE,qBAAS;AAAA,qBAAM2B,aAAa,OAAKX,KAAL,CAAW5B,KAAxB,CAAN;AAAA;AAFX;AAIG,uBAAE,eAAF;AAJH,SADD;AAlBH,OADF;AA6BD;;;;;;IAGG4C,wB;;;AACJ,oCAAYjB,KAAZ,EAAmB;AAAA;;AAAA;;AAAA,qJACXA,KADW;;AAGjB,QAAIkB,yBAAJ;AACA,QAAMC,kBAAkB,sBAAYC,GAAZ,CACtB,uCADsB,CAAxB;AAGA,QAAID,oBAAoB,EAAxB,EAA4B;AAC1BD,yBAAmB3C,YAAYG,YAA/B;AACD,KAFD,MAEO;AACLwC,yBAAmB3C,YAAYC,MAA/B;AACD;;AAED,WAAKyB,KAAL,GAAa;AACXoB,iBAAWH,gBADA;;AAGX;;;;AAIAI,sDACG/C,YAAYC,MADf,EACwB,IADxB,4BAEGD,YAAYE,aAFf,EAE+B,IAF/B,4BAGGF,YAAYG,YAHf,EAG8B,IAH9B,4BAIGH,YAAYI,IAJf,EAIsB,IAJtB,WAPW;AAaX4C,cAAQ3C,OAAOE,KAbJ;AAcX6B,aAAO,IAdI;AAeXa,qBAAeL;AAfJ,KAAb;;AAkBA,WAAKM,eAAL,GAAuB,OAAKA,eAAL,CAAqBrB,IAArB,QAAvB;AACA,WAAKsB,QAAL,GAAgB,OAAKA,QAAL,CAActB,IAAd,QAAhB;AACA,WAAKuB,UAAL,GAAkB,OAAKA,UAAL,CAAgBvB,IAAhB,QAAlB;AACA,WAAKwB,WAAL,GAAmB,OAAKA,WAAL,CAAiBxB,IAAjB,QAAnB;AACA,WAAKyB,iBAAL,GAAyB,OAAKA,iBAAL,CAAuBzB,IAAvB,QAAzB;AACA,WAAK0B,QAAL,GAAgB,OAAKA,QAAL,CAAc1B,IAAd,QAAhB;AApCiB;AAqClB;;;;yCAEoB;AACnB,WAAK2B,iBAAL,CAAuB,KAAK/B,KAA5B;AACD;;;8CAEyBM,S,EAAW;AAAA,mBACL,KAAKL,KADA;AAAA,UAC3BqB,MAD2B,UAC3BA,MAD2B;AAAA,UACnBD,SADmB,UACnBA,SADmB;;AAEnC,UACE,CAACC,OAAOD,SAAP,CAAD,IACA,KAAKrB,KAAL,CAAW3B,KAAX,CAAiB2D,KAAjB,KAA2B1B,UAAUjC,KAAV,CAAgB2D,KAF7C,EAGE;AACA,aAAKD,iBAAL,CAAuBzB,SAAvB;AACD;AACF;;;sCAEiBN,K,EAAO;AACvB,UAAM3B,QAAQ,KAAK2B,KAAL,CAAW3B,KAAX,CAAiB2D,KAA/B;AADuB,UAEfV,MAFe,GAEJ,KAAKrB,KAFD,CAEfqB,MAFe;;AAGvB,UAAID,kBAAJ;AACA,UAAIlD,cAAc8D,IAAd,CAAmB;AAAA,eAAUC,OAAO7D,KAAP,KAAiBA,KAA3B;AAAA,OAAnB,CAAJ,EAA0D;AACxDiD,eAAO/C,YAAYC,MAAnB,IAA6BH,KAA7B;AACAgD,oBAAY9C,YAAYC,MAAxB;AACD,OAHD,MAGO,IAAI,OAAOH,KAAP,KAAiB,QAArB,EAA+B;AACpC;;;;AAIAiD,eAAO/C,YAAYE,aAAnB,IAAoCJ,KAApC;AACAgD,oBAAY9C,YAAYE,aAAxB;AACD,OAPM,MAOA,IACL,gBAAE0D,KAAF,CAAQ9D,KAAR,KACA,sBAAY+C,GAAZ,CAAgB,uCAAhB,CAFK,EAGL;AACA;;;;;;;AAOAC,oBAAY9C,YAAYG,YAAxB;AACD,OAZM,MAYA;AACL;;;AAGA2C,oBAAY9C,YAAYI,IAAxB;AACA2C,eAAO/C,YAAYI,IAAnB,IAA2B2C,OAAO/C,YAAYG,YAAnB,IAAmCL,KAA9D;AACD;;AAED,WAAKgC,QAAL,CAAc,EAAEgB,oBAAF,EAAaC,cAAb,EAAd;AACD;;;oCAEec,Y,EAAc;AAAA,oBACE,KAAKnC,KADP;AAAA,UACpBqB,MADoB,WACpBA,MADoB;AAAA,UACZD,SADY,WACZA,SADY;;AAE5B,WAAKhB,QAAL,CAAc,EAAEgB,WAAWe,YAAb,EAAd;AACA,UAAId,OAAOc,YAAP,KAAwBd,OAAOc,YAAP,MAAyBd,OAAOD,SAAP,CAArD,EAAwE;AACtE,aAAKrB,KAAL,CAAW2B,UAAX,CAAsBK,KAAtB,CAA4BV,OAAOc,YAAP,CAA5B;AACD;AACF;;;6BAEQ/D,K,EAAO;AAAA,oBACgB,KAAK4B,KADrB;AAAA,UACNqB,MADM,WACNA,MADM;AAAA,UACED,SADF,WACEA,SADF;;AAEd,WAAKhB,QAAL,CAAc;AACZiB,gBAAQe,OAAOC,MAAP,CAAchB,MAAd,sBAAyBD,SAAzB,EAAqChD,KAArC,EADI;AAEZsC,eAAO;AAFK,OAAd;AAID;;;iCAEY;AAAA,oBACmB,KAAKV,KADxB;AAAA,UACHqB,MADG,WACHA,MADG;AAAA,UACKD,SADL,WACKA,SADL;;AAEX,WAAKrB,KAAL,CAAW2B,UAAX,CAAsBK,KAAtB,CAA4BV,OAAOD,SAAP,CAA5B;AACD;;;gCAEWG,a,EAAe;AACzB,WAAKnB,QAAL,CAAc,EAAEmB,4BAAF,EAAiBb,OAAO,IAAxB,EAAd;AACD;;;wCAEmB;AAAA;;AAAA,UACVa,aADU,GACQ,KAAKvB,KADb,CACVuB,aADU;;AAElB,UAAMG,aAAa,KAAK3B,KAAL,CAAW2B,UAAX,CAAsBK,KAAzC;AACA,WAAK3B,QAAL,CAAc;AACZkB,gBAAQ3C,OAAOC,OADH;AAEZ8B,eAAO;AAFK,OAAd;;AAKA,aAAO,oCAAuBa,aAAvB,EACJe,IADI,CACC,qBAAa;AACjB,YAAMC,cAAc,OAAKvC,KAAzB;AACAuC,oBAAYjB,MAAZ,GAAqB3C,OAAOI,IAA5B;AACAwD,oBAAYlB,MAAZ,CAAmB/C,YAAYG,YAA/B,IAA+C+D,SAA/C;AACAD,oBAAYlB,MAAZ,CAAmB/C,YAAYI,IAA/B,IAAuC8D,SAAvC;AACA,eAAKpC,QAAL,CAAcmC,WAAd;;AAEAb,mBAAWc,SAAX;AACD,OATI,EAUJC,KAVI,CAUE,iBAAS;AACd,YAAMF,cAAc,OAAKvC,KAAzB;AACAuC,oBAAYjB,MAAZ,GAAqB3C,OAAO+D,KAA5B;AACA,YAAI,CAAC,gBAAEC,QAAF,CAAWjC,MAAMkC,OAAjB,EAA0BR,OAAOS,IAAP,+BAA1B,CAAL,EAAiE;AAC/DpC,kBAAQC,KAAR,CAAcA,KAAd;AACA6B,sBAAY7B,KAAZ,GAAoB,8BAAmBb,OAAvC;AACD,SAHD,MAGO;AACL0C,sBAAY7B,KAAZ,GAAoBA,MAAMkC,OAA1B;;AAEA,cAAIlC,MAAM8B,SAAV,EAAqB;AACnBD,wBAAYlB,MAAZ,CAAmB/C,YAAYG,YAA/B,IAA+CiC,MAAM8B,SAArD;AACAD,wBAAYlB,MAAZ,CAAmB/C,YAAYI,IAA/B,IAAuCgC,MAAM8B,SAA7C;AACD;AACF;AACD,eAAKpC,QAAL,CAAcmC,WAAd;AACD,OAzBI,CAAP;AA0BD;;;+BAEU;AACT,WAAKxC,KAAL,CAAW+C,QAAX,CAAoB,gCAAe,qBAAUpE,IAAzB,CAApB;AACD;;;6BAEQ;AACP,aACE,8BAAC,cAAD;AACE,mBAAW,KAAKsB,KAAL,CAAWoB,SADxB;AAEE,gBAAQ,KAAKpB,KAAL,CAAWqB,MAFrB;AAGE,gBAAQ,KAAKrB,KAAL,CAAWsB,MAHrB;AAIE,eAAO,KAAKtB,KAAL,CAAWU,KAJpB;AAKE,uBAAe,KAAKV,KAAL,CAAWuB,aAL5B;AAME,yBAAiB,KAAKC,eANxB;AAOE,kBAAU,KAAKC,QAPjB;AAQE,oBAAY,KAAKC,UARnB;AASE,qBAAa,KAAKC,WATpB;AAUE,2BAAmB,KAAKC,iBAV1B;AAWE,kBAAU,KAAKC,QAXjB;AAYE,uBAAe,KAAK9B,KAAL,CAAW3B,KAAX,CAAiB2E,WAZlC;AAaE,uBAAe,KAAKhD,KAAL,CAAW2B,UAAX,CAAsBqB;AAbvC,QADF;AAiBD;;;;;;AAGH/B,yBAAyBgC,SAAzB,GAAqC;AACnC5E,SAAO,oBAAU6E,MAAV,CAAiBC,UADW;AAEnCxB,cAAY,oBAAUuB,MAAV,CAAiBC,UAFM;AAGnCJ,YAAU,oBAAUK;AAHe,CAArC;;AAMA,IAAMC,iBAAiB,SAAjBA,cAAiB,QAAS;AAAA,MAE5BhC,SAF4B,GAgB1BrB,KAhB0B,CAE5BqB,SAF4B;AAAA,MAG5BC,MAH4B,GAgB1BtB,KAhB0B,CAG5BsB,MAH4B;AAAA,MAI5BC,MAJ4B,GAgB1BvB,KAhB0B,CAI5BuB,MAJ4B;AAAA,MAK5BZ,KAL4B,GAgB1BX,KAhB0B,CAK5BW,KAL4B;AAAA,MAM5Ba,aAN4B,GAgB1BxB,KAhB0B,CAM5BwB,aAN4B;AAAA,MAQ5BC,eAR4B,GAgB1BzB,KAhB0B,CAQ5ByB,eAR4B;AAAA,MAS5BC,QAT4B,GAgB1B1B,KAhB0B,CAS5B0B,QAT4B;AAAA,MAU5BC,UAV4B,GAgB1B3B,KAhB0B,CAU5B2B,UAV4B;AAAA,MAW5BC,WAX4B,GAgB1B5B,KAhB0B,CAW5B4B,WAX4B;AAAA,MAY5BC,iBAZ4B,GAgB1B7B,KAhB0B,CAY5B6B,iBAZ4B;AAAA,MAa5BC,QAb4B,GAgB1B9B,KAhB0B,CAa5B8B,QAb4B;AAAA,MAc5BwB,aAd4B,GAgB1BtD,KAhB0B,CAc5BsD,aAd4B;AAAA,MAe5BC,aAf4B,GAgB1BvD,KAhB0B,CAe5BuD,aAf4B;;;AAkB9B,WAASC,aAAT,GAAyB;AACvB,QAAMnF,QAAQiD,OAAOD,SAAP,CAAd;;AAEA,QAAMoC,OACJ;AAAA;AAAA,QAAK,WAAU,WAAf;AACE;AAAA;AAAA,UAAK,WAAU,kCAAf;AAEE;AAAA;AAAA,YAAG,MAAK,mCAAR,EAA4C,QAAO,QAAnD;AACG,uBAAE,WAAF;AADH;AAFF;AADF,KADF;;AAWA,aAASC,MAAT,CAAgBC,KAAhB,EAAuBC,OAAvB,EAAgC;AAC9B,aACE;AAAA;AAAA,UAAK,WAAU,qBAAf;AACGD,aADH;AAEE;AAAA;AAAA;AACE,uBAAU,qCADZ;AAEE,yBAAWC;AAFb;AAIE,+CAAG,WAAU,eAAb;AAJF;AAFF,OADF;AAWD;;AAED,QAAIC,iBAAiB,IAArB;AACA,QACE,gBAAEjB,QAAF,CAAWvB,SAAX,EAAsB,CAAC9C,YAAYG,YAAb,EAA2BH,YAAYI,IAAvC,CAAtB,KACAN,KAFF,EAGE;AACA,UAAIyF,mBAAJ;AACA,UAAIzC,cAAc9C,YAAYG,YAA9B,EAA4C;AAC1CoF,qBAAa,wBAAb;AACD,OAFD,MAEO;AACLA,qBAAa,kBAAb;AACD;;AAEDD,uBAAiB5E,SACf;AAAA;AAAA,UAAK,WAAU,gBAAf,EAAgC,SAAS6C,QAAzC;AACGgC;AADH,OADe,CAAjB;AAKD;;AAED,QAAIzC,cAAc9C,YAAYC,MAA9B,EAAsC;AACpC,UAAMuF,WAAW,SAAXA,QAAW,WAAY;AAC3BrC,iBAASsC,QAAT;AACArC;AACD,OAHD;AAIA,aAAO1C,SACL;AAAA;AAAA,UAAM,WAAU,iBAAhB;AACE;AACE,mBAASd,aADX;AAEE,oBAAU4F,QAFZ;AAGE,iBAAO1F,KAHT;AAIE,qBAAW;AAJb;AADF,OADK,CAAP;AAUD,KAfD,MAeO,IACL,gBAAEuE,QAAF,CAAWvB,SAAX,EAAsB,CACpB9C,YAAYE,aADQ,EAEpBF,YAAYG,YAFQ,CAAtB,CADK,EAKL;AACA,UAAIkF,gBAAJ;AAAA,UACEK,mBADF;AAAA,UAEEC,oBAFF;AAAA,UAGEC,iBAHF;AAAA,UAIEJ,kBAJF;AAAA,UAKEK,sBALF;AAAA,UAME5E,qBANF;;AAQA,UAAI6B,cAAc9C,YAAYE,aAA9B,EAA6C;AAC3CmF,kBAAU,aAAE,8CAAF,CAAV;AACAK,qBAAa,aAAE,mBAAF,CAAb;AACAC,sBAAc,aACZ,2DADY,CAAd;AAGAC,mBAAWxC,UAAX;AACAoC,oBAAWrC,QAAX;AACA0C,wBAAgB/F,UAAU,IAAV,GAAiB6F,WAAjB,GAA+B7F,KAA/C;AACAmB,uBAAe,IAAf;AACD,OAVD,MAUO;AACLoE,kBAAU,aACR,8DADQ,CAAV;AAGAK,qBAAa,aAAE,kBAAF,CAAb;AACAC,sBAAc,aACZ,iEADY,CAAd;AAGAC,mBAAWtC,iBAAX;AACAkC,oBAAWnC,WAAX;AACAwC,wBAAgB5C,kBAAkB,IAAlB,GAAyB0C,WAAzB,GAAuC1C,aAAvD;AACAhC,uBAAemB,QACXvB,4BAA4BuB,KAA5B,EAAmCa,aAAnC,CADW,GAEX,IAFJ;AAGD;;AAED,UAAMsC,cACJvC,WAAW3C,OAAOC,OAAlB,GAA4B,aAAE,YAAF,CAA5B,GAA8C,aAAE,YAAF,CADhD;;AAGA,UAAMwF,cAAc,0BAClB,KADkB,EAElB,SAFkB,EAGlB,aAHkB,EAIlB,cAJkB,EAKlB,cALkB,EAMlB,EAAE,0BAA0B9C,WAAW3C,OAAOC,OAA9C,EANkB,CAApB;;AASA,aACE;AAAA;AAAA;AACG6E,eAAOO,UAAP,EAAmBL,OAAnB,CADH;AAGG3E,iBACC;AACE,qBAAU,WADZ;AAEE,uBAAaiF,WAFf;AAGE,oBAAU;AAAA,mBAAKH,UAAStD,EAAEO,MAAF,CAAS3C,KAAlB,CAAL;AAAA,WAHZ;AAIE,iBAAO+F;AAJT,UADD,CAHH;AAYGnF,iBACC;AAAA;AAAA,YAAK,WAAWoF,WAAhB,EAA6B,SAASF,QAAtC;AACGL;AADH,SADD,CAZH;AAkBGtE,oBAlBH;AAoBGqE,sBApBH;AAsBGJ;AAtBH,OADF;AA0BD,KA9EM,MA8EA,IAAIpC,cAAc9C,YAAYI,IAA9B,EAAoC;AACzC,UAAMiF,WAAU,qPAAhB;AAKA,UAAMM,eAAc,CAClB,GADkB,EAElB,mBAFkB,EAGlB,+BAHkB,EAIlB,qDAJkB,EAKlB,gEALkB,EAMlB,uBANkB,EAOlB,qBAPkB,EAQlBI,IARkB,CAQb,IARa,CAApB;;AAUA,UAAM1D,eAAe,SAAfA,YAAe,WAAY;AAC/Bc,iBAASsC,QAAT;AACArC;AACD,OAHD;;AAKA,aACE;AAAA;AAAA;AACG+B,eAAO,aAAE,mBAAF,CAAP,EAA+BE,QAA/B,CADH;AAGE,sCAAC,UAAD;AACE,yBAAe,WADjB;AAEE,iBAAOvF,KAFT;AAGE,wBAAcuC;AAHhB,UAHF;AASGiD,sBATH;AAWGJ;AAXH,OADF;AAeD;AACF;;AAED,MAAMc,QACJlD,cAAc9C,YAAYE,aAA1B,GACE;AACE,mBAAe6E,aADjB;AAEE,cAAUC;AAFZ,IADF,GAKI,IANN;;AAQA,SACE;AAAA;AAAA,MAAK,WAAU,kBAAf;AACE;AAAA;AAAA,QAAK,WAAU,WAAf;AACE;AAAA;AAAA,UAAK,WAAU,kBAAf;AAAmC,qBAAE,cAAF;AAAnC,OADF;AAEE;AAAA;AAAA,UAAK,WAAU,mBAAf;AACE;AAAA;AAAA,YAAM,WAAU,iBAAhB;AACE;AACE,qBAASjF,aADX;AAEE,sBAAUmD,eAFZ;AAGE,mBAAOJ,SAHT;AAIE,uBAAW;AAJb;AADF;AADF;AAFF,KADF;AAeGkD,SAfH;AAiBGf;AAjBH,GADF;AAqBD,CAlOD;;AAoOAH,eAAeJ,SAAf,GAA2B;AACzB5B,aAAW,oBAAUmD,KAAV,CAAgBnC,OAAOS,IAAP,CAAYvE,WAAZ,CAAhB,EAA0C4E,UAD5B;AAEzB7B,UAAQ,oBAAUmD,KAAV,2DACLlG,YAAYC,MADP,EACgB,oBAAUgG,KAAV,CAAgB,CACpC,OADoC,EAEpC,UAFoC,EAGpC,OAHoC,EAIpC,MAJoC,EAKpC,WALoC,EAMpC,mBANoC,CAAhB,CADhB,qCASLjG,YAAYE,aATP,EASuB,oBAAUiG,MATjC,qCAULnG,YAAYG,YAVP,EAUsB,oBAAUwE,MAVhC,qCAWL3E,YAAYI,IAXP,EAWc,oBAAUuE,MAXxB,sBAYLC,UAdsB;AAezB5B,UAAQ,oBAAUiD,KAAV,CAAgBnC,OAAOS,IAAP,CAAYlE,MAAZ,CAAhB,EAAqCuE,UAfpB;AAgBzBxC,SAAO,oBAAUuC,MAhBQ;AAiBzB1B,iBAAe,oBAAUkD,MAjBA;;AAmBzBjD,mBAAiB,oBAAU2B,IAnBF;AAoBzB1B,YAAU,oBAAU0B,IApBK;AAqBzBzB,cAAY,oBAAUyB,IArBG;AAsBzBxB,eAAa,oBAAUwB,IAtBE;AAuBzBvB,qBAAmB,oBAAUuB,IAvBJ;AAwBzBtB,YAAU,oBAAUsB,IAxBK;AAyBzBE,iBAAe,oBAAUoB,MAzBA;AA0BzBnB,iBAAe,oBAAUH;AA1BA,CAA3B;;AA6BAuB,OAAOC,OAAP,GAAiB3D,wBAAjB","file":"MapboxStyleUrlController.js","sourcesContent":["import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport Dropdown from \"./Dropdown\";\nimport R from \"ramda\";\nimport { _ } from \"@common/utils/i18n\";\nimport UncontrolledTextarea from \"./UncontrolledTextarea\";\nimport { fetchAndParseStyleJSON } from \"@workspace/utils/mapbox\";\nimport { MAPBOX_ATLAS_MESSAGES } from \"@workspace/constants/errorMessages\";\nimport Environment from \"@common/utils/environment\";\nimport classnames from \"classnames\";\nimport URL from \"url\";\nimport { EDIT_MODE, MAPBOX_ERROR_TYPES } from \"@workspace/constants/workspace\";\nimport { selectEditMode } from \"@workspace/actions/workspace\";\nimport MapboxTokenDropdown from \"./MapboxTokenDropdown\";\n\nconst PRESET_STYLES = [\n  { label: \"Basic\", value: \"basic\" },\n  { label: \"Outdoors\", value: \"outdoors\" },\n  { label: \"Light\", value: \"light\" },\n  { label: \"Dark\", value: \"dark\" },\n  { label: \"Satellite\", value: \"satellite\" },\n  { label: \"Satellite with Streets\", value: \"satellite-streets\" },\n];\n\nconst STYLE_OPTIONS = [\n  { label: \"Preset Styles\", value: \"PRESET\" },\n  { label: \"Mapbox Studio Style\", value: \"MAPBOX_STUDIO\" },\n  { label: \"Mapbox Atlas Style\", value: \"MAPBOX_ATLAS\" },\n  { label: \"Custom JSON\", value: \"JSON\" },\n];\n\nconst VALUE_TYPES = {\n  PRESET: \"PRESET\",\n  MAPBOX_STUDIO: \"MAPBOX_STUDIO\",\n  MAPBOX_ATLAS: \"MAPBOX_ATLAS\",\n  JSON: \"JSON\",\n};\n\nconst STATUS = {\n  LOADING: \"LOADING\",\n  BLANK: \"BLANK\",\n  WARNING: \"WARNING\",\n  DONE: \"DONE\",\n};\n\nconst menuItem = content => {\n  return (\n    <div className=\"menu-item\">\n      <div className=\"menu-item__no-title\">{content}</div>\n    </div>\n  );\n};\n\nconst menuItemWarning = content => {\n  return (\n    <div className=\"menu-item\">\n      <div className=\"menu-item__no-title\">\n        <span className=\"menu-item__multiple +red-imp\">{content}</span>\n      </div>\n    </div>\n  );\n};\n\nconst MAPBOX_ATLAS_ERROR_MESSAGES = {\n  INVALID_JSON: url =>\n    menuItemWarning(\n      <span>\n        {MAPBOX_ATLAS_MESSAGES.INVALID_JSON}\n        <a href={url} target=\"_blank\">\n          {url}\n        </a>\n      </span>\n    ),\n\n  FAILED_REQUEST: url => {\n    let errorMessage;\n    if (URL.parse(url).protocol === \"http:\") {\n      errorMessage = menuItemWarning(\n        <span>\n          {MAPBOX_ATLAS_MESSAGES.FAILED_REQUEST}\n          <a href=\"http://help.plot.ly/mapbox-atlas\" target=\"_blank\">\n            http://help.plot.ly/mapbox-atlas\n          </a>.\n        </span>\n      );\n    } else {\n      errorMessage = menuItemWarning(\n        <span>\n          {MAPBOX_ATLAS_MESSAGES.DOWNLOAD}\n          <a href={url} target=\"_blank\">\n            {url}\n          </a>\n          {_(\" in your browser to verify that the URL works?\")}\n        </span>\n      );\n    }\n    return errorMessage;\n  },\n\n  FAILED_PARSING: url =>\n    menuItemWarning(\n      <span>\n        {MAPBOX_ATLAS_MESSAGES.FAILED_PARSING}\n        <a href={url} target=\"_blank\">\n          {url}\n        </a>.\n        {MAPBOX_ATLAS_MESSAGES.EXPECTED_URL}\n        http://my-atlas-server:2999/pages/light-v6/cilo6dghg0008a2kqgq9dnsug.json\n      </span>\n    ),\n\n  UNKNOWN: () => menuItemWarning(<span>{MAPBOX_ATLAS_MESSAGES.UNKNOWN}</span>),\n};\n\n// TODO: Try replacing this with our new jsoneditor component\nclass JsonEditor extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: null,\n      invalidJSON: false,\n    };\n    this.setValidJSON = this.setValidJSON.bind(this);\n  }\n\n  componentWillMount() {\n    this.setState({ value: this.props.value });\n  }\n\n  componentWillReceiveProps(nextProps) {\n    this.setState({ value: nextProps.value });\n  }\n\n  setValidJSON(jsonString) {\n    this.setState({ invalidJSON: false });\n    try {\n      const jsonObject = JSON.parse(jsonString);\n      this.setState({ value: jsonObject });\n    } catch (e) {\n      console.error(e);\n      this.setState({ invalidJSON: true });\n    }\n  }\n\n  render() {\n    const { applyChanges, textareaStyle, textareaClass } = this.props;\n    const { value } = this.state;\n\n    return (\n      <div>\n        {menuItem(\n          <UncontrolledTextarea\n            style={textareaStyle}\n            className={textareaClass}\n            value={JSON.stringify(value, null, 2)}\n            onBlur={e => this.setValidJSON(e.target.value)}\n          />\n        )}\n\n        {this.state.invalidJSON ? (\n          menuItem(\n            <span className=\"menu-item__multiple +red-imp +text-center\">\n              {_(\"Invalid JSON\")}\n            </span>\n          )\n        ) : null}\n\n        {menuItem(\n          <div\n            className=\"btn --small --secondary +text-center --full-width\"\n            onClick={() => applyChanges(this.state.value)}\n          >\n            {_(\"Apply Changes\")}\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nclass MapboxStyleUrlController extends Component {\n  constructor(props) {\n    super(props);\n\n    let defaultValueType;\n    const defaultAtlasUrl = Environment.get(\n      \"PLOTLY_MAPBOX_ATLAS_DEFAULT_STYLE_URL\"\n    );\n    if (defaultAtlasUrl !== \"\") {\n      defaultValueType = VALUE_TYPES.MAPBOX_ATLAS;\n    } else {\n      defaultValueType = VALUE_TYPES.PRESET;\n    }\n\n    this.state = {\n      valueType: defaultValueType,\n\n      /*\n             * each of these values can get set to plotly.js's\n             * layout.mapbox.source value\n             */\n      values: {\n        [VALUE_TYPES.PRESET]: null,\n        [VALUE_TYPES.MAPBOX_STUDIO]: null,\n        [VALUE_TYPES.MAPBOX_ATLAS]: null,\n        [VALUE_TYPES.JSON]: null,\n      },\n      status: STATUS.BLANK,\n      error: null,\n      atlasStyleURL: defaultAtlasUrl,\n    };\n\n    this.changeValueType = this.changeValueType.bind(this);\n    this.setValue = this.setValue.bind(this);\n    this.updatePlot = this.updatePlot.bind(this);\n    this.setAtlasURL = this.setAtlasURL.bind(this);\n    this.downloadAtlasJSON = this.downloadAtlasJSON.bind(this);\n    this.viewJson = this.viewJson.bind(this);\n  }\n\n  componentWillMount() {\n    this.setValueFromProps(this.props);\n  }\n\n  componentWillReceiveProps(nextProps) {\n    const { values, valueType } = this.state;\n    if (\n      !values[valueType] &&\n      this.props.value.style !== nextProps.value.style\n    ) {\n      this.setValueFromProps(nextProps);\n    }\n  }\n\n  setValueFromProps(props) {\n    const value = this.props.value.style;\n    const { values } = this.state;\n    let valueType;\n    if (PRESET_STYLES.find(option => option.value === value)) {\n      values[VALUE_TYPES.PRESET] = value;\n      valueType = VALUE_TYPES.PRESET;\n    } else if (typeof value === \"string\") {\n      /*\n         * If it's a string, it's likely a mapbox style url like\n         * mapbox://chriddyp/styles/my-style\n         */\n      values[VALUE_TYPES.MAPBOX_STUDIO] = value;\n      valueType = VALUE_TYPES.MAPBOX_STUDIO;\n    } else if (\n      R.isNil(value) &&\n      Environment.get(\"PLOTLY_MAPBOX_ATLAS_DEFAULT_STYLE_URL\")\n    ) {\n      /*\n         * When folks have Atlas set up without mapbox studio,\n         * nothing will work until they load up their style JSON.\n         * mapbox in the plotly.js figure won't be defined and so the `value`\n         * will be null. Display the Mapbox Atlas style URL input to prompt them\n         * to download their style data.\n         */\n      valueType = VALUE_TYPES.MAPBOX_ATLAS;\n    } else {\n      /*\n         * Otherwise, it's probably a style JSON object.\n         */\n      valueType = VALUE_TYPES.JSON;\n      values[VALUE_TYPES.JSON] = values[VALUE_TYPES.MAPBOX_ATLAS] = value;\n    }\n\n    this.setState({ valueType, values });\n  }\n\n  changeValueType(newValueType) {\n    const { values, valueType } = this.state;\n    this.setState({ valueType: newValueType });\n    if (values[newValueType] && values[newValueType] !== values[valueType]) {\n      this.props.updatePlot.style(values[newValueType]);\n    }\n  }\n\n  setValue(value) {\n    const { values, valueType } = this.state;\n    this.setState({\n      values: Object.assign(values, { [valueType]: value }),\n      error: null,\n    });\n  }\n\n  updatePlot() {\n    const { values, valueType } = this.state;\n    this.props.updatePlot.style(values[valueType]);\n  }\n\n  setAtlasURL(atlasStyleURL) {\n    this.setState({ atlasStyleURL, error: null });\n  }\n\n  downloadAtlasJSON() {\n    const { atlasStyleURL } = this.state;\n    const updatePlot = this.props.updatePlot.style;\n    this.setState({\n      status: STATUS.LOADING,\n      error: null,\n    });\n\n    return fetchAndParseStyleJSON(atlasStyleURL)\n      .then(styleJSON => {\n        const stateUpdate = this.state;\n        stateUpdate.status = STATUS.DONE;\n        stateUpdate.values[VALUE_TYPES.MAPBOX_ATLAS] = styleJSON;\n        stateUpdate.values[VALUE_TYPES.JSON] = styleJSON;\n        this.setState(stateUpdate);\n\n        updatePlot(styleJSON);\n      })\n      .catch(error => {\n        const stateUpdate = this.state;\n        stateUpdate.status = STATUS.ERROR;\n        if (!R.contains(error.message, Object.keys(MAPBOX_ERROR_TYPES))) {\n          console.error(error);\n          stateUpdate.error = MAPBOX_ERROR_TYPES.UNKNOWN;\n        } else {\n          stateUpdate.error = error.message;\n\n          if (error.styleJSON) {\n            stateUpdate.values[VALUE_TYPES.MAPBOX_ATLAS] = error.styleJSON;\n            stateUpdate.values[VALUE_TYPES.JSON] = error.styleJSON;\n          }\n        }\n        this.setState(stateUpdate);\n      });\n  }\n\n  viewJson() {\n    this.props.dispatch(selectEditMode(EDIT_MODE.JSON));\n  }\n\n  render() {\n    return (\n      <MapboxStyleUrl\n        valueType={this.state.valueType}\n        values={this.state.values}\n        status={this.state.status}\n        error={this.state.error}\n        atlasStyleURL={this.state.atlasStyleURL}\n        changeValueType={this.changeValueType}\n        setValue={this.setValue}\n        updatePlot={this.updatePlot}\n        setAtlasURL={this.setAtlasURL}\n        downloadAtlasJSON={this.downloadAtlasJSON}\n        viewJson={this.viewJson}\n        selectedToken={this.props.value.accesstoken}\n        onTokenChange={this.props.updatePlot.accesstoken}\n      />\n    );\n  }\n}\n\nMapboxStyleUrlController.propTypes = {\n  value: PropTypes.object.isRequired,\n  updatePlot: PropTypes.object.isRequired,\n  dispatch: PropTypes.func,\n};\n\nconst MapboxStyleUrl = props => {\n  const {\n    valueType,\n    values,\n    status,\n    error,\n    atlasStyleURL,\n\n    changeValueType,\n    setValue,\n    updatePlot,\n    setAtlasURL,\n    downloadAtlasJSON,\n    viewJson,\n    selectedToken,\n    onTokenChange,\n  } = props;\n\n  function renderOptions() {\n    const value = values[valueType];\n\n    const help = (\n      <div className=\"menu-item\">\n        <div className=\"menu-item__no-title +text-center\">\n          {/* TODO: fill in this help url */}\n          <a href=\"http://help.plot.ly/mapbox-atlas/\" target=\"_blank\">\n            {_(\"Help Page\")}\n          </a>\n        </div>\n      </div>\n    );\n\n    function header(title, tooltip) {\n      return (\n        <div className=\"style-block__header\">\n          {title}\n          <span\n            className=\"hint--left hint--small +float-right\"\n            data-hint={tooltip}\n          >\n            <i className=\"icon-question\" />\n          </span>\n        </div>\n      );\n    }\n\n    let viewJsonButton = null;\n    if (\n      R.contains(valueType, [VALUE_TYPES.MAPBOX_ATLAS, VALUE_TYPES.JSON]) &&\n      value\n    ) {\n      let buttonText;\n      if (valueType === VALUE_TYPES.MAPBOX_ATLAS) {\n        buttonText = \"View Mapbox Style JSON\";\n      } else {\n        buttonText = \"Rich JSON Editor\";\n      }\n\n      viewJsonButton = menuItem(\n        <div className=\"button-control\" onClick={viewJson}>\n          {buttonText}\n        </div>\n      );\n    }\n\n    if (valueType === VALUE_TYPES.PRESET) {\n      const onChange = newValue => {\n        setValue(newValue);\n        updatePlot();\n      };\n      return menuItem(\n        <span className=\"widget-dropdown\">\n          <Dropdown\n            options={PRESET_STYLES}\n            onChange={onChange}\n            value={value}\n            clearable={false}\n          />\n        </span>\n      );\n    } else if (\n      R.contains(valueType, [\n        VALUE_TYPES.MAPBOX_STUDIO,\n        VALUE_TYPES.MAPBOX_ATLAS,\n      ])\n    ) {\n      let tooltip,\n        headerText,\n        placeholder,\n        onSubmit,\n        onChange,\n        textAreaValue,\n        errorMessage;\n\n      if (valueType === VALUE_TYPES.MAPBOX_STUDIO) {\n        tooltip = _(\"Import custom map styles from Mapbox Studio.\");\n        headerText = _(\"Mapbox Studio URL\");\n        placeholder = _(\n          \"mapbox://styles/your-mapbox-username/your-mapbox-style-id\"\n        );\n        onSubmit = updatePlot;\n        onChange = setValue;\n        textAreaValue = value === null ? placeholder : value;\n        errorMessage = null;\n      } else {\n        tooltip = _(\n          \"Download map styles from Mapbox Atlas enterprise map server.\"\n        );\n        headerText = _(\"Mapbox Atlas URL\");\n        placeholder = _(\n          \"https://<your-atlas-server>:2999/pages/light-v6/<style-id>.json\"\n        );\n        onSubmit = downloadAtlasJSON;\n        onChange = setAtlasURL;\n        textAreaValue = atlasStyleURL === null ? placeholder : atlasStyleURL;\n        errorMessage = error\n          ? MAPBOX_ATLAS_ERROR_MESSAGES[error](atlasStyleURL)\n          : null;\n      }\n\n      const buttonText =\n        status === STATUS.LOADING ? _(\"Loading...\") : _(\"Load Style\");\n\n      const buttonClass = classnames(\n        \"btn\",\n        \"--small\",\n        \"--secondary\",\n        \"+text-center\",\n        \"--full-width\",\n        { \"+cursor-wait-important\": status === STATUS.LOADING }\n      );\n\n      return (\n        <div>\n          {header(headerText, tooltip)}\n\n          {menuItem(\n            <textarea\n              className=\"url-input\"\n              placeholder={placeholder}\n              onChange={e => onChange(e.target.value)}\n              value={textAreaValue}\n            />\n          )}\n\n          {menuItem(\n            <div className={buttonClass} onClick={onSubmit}>\n              {buttonText}\n            </div>\n          )}\n\n          {errorMessage}\n\n          {viewJsonButton}\n\n          {help}\n        </div>\n      );\n    } else if (valueType === VALUE_TYPES.JSON) {\n      const tooltip = _(`\n                A Mapbox style is a JSON object that defines the visual appearance of a map:\n                what data to draw, the order to draw it in, and how to style the data when\n                drawing it.\n            `);\n      const placeholder = [\n        \"{\",\n        '    \"version\": 8,',\n        '    \"name\": \"Mapbox Streets\",',\n        '    \"sprite\": \"mapbox://sprites/mapbox/streets-v8\",',\n        '    \"glyphs\": \"mapbox://fonts/mapbox/{fontstack}/{range}.pbf\",',\n        '    \"sources\": {...},',\n        '    \"layers\": [...]',\n      ].join(\"\\n\");\n\n      const applyChanges = newValue => {\n        setValue(newValue);\n        updatePlot();\n      };\n\n      return (\n        <div>\n          {header(_(\"Mapbox Style JSON\"), tooltip)}\n\n          <JsonEditor\n            textareaClass={\"json-view\"}\n            value={value}\n            applyChanges={applyChanges}\n          />\n\n          {viewJsonButton}\n\n          {help}\n        </div>\n      );\n    }\n  }\n\n  const token =\n    valueType === VALUE_TYPES.MAPBOX_STUDIO ? (\n      <MapboxTokenDropdown\n        selectedToken={selectedToken}\n        onChange={onTokenChange}\n      />\n    ) : null;\n\n  return (\n    <div className=\"mapbox-style-url\">\n      <div className=\"menu-item\">\n        <div className=\"menu-item__title\">{_(\"Mapbox Style\")}</div>\n        <div className=\"menu-item__widget\">\n          <span className=\"widget-dropdown\">\n            <Dropdown\n              options={STYLE_OPTIONS}\n              onChange={changeValueType}\n              value={valueType}\n              clearable={false}\n            />\n          </span>\n        </div>\n      </div>\n\n      {token}\n\n      {renderOptions()}\n    </div>\n  );\n};\n\nMapboxStyleUrl.propTypes = {\n  valueType: PropTypes.oneOf(Object.keys(VALUE_TYPES)).isRequired,\n  values: PropTypes.shape({\n    [VALUE_TYPES.PRESET]: PropTypes.oneOf([\n      \"basic\",\n      \"outdoors\",\n      \"light\",\n      \"dark\",\n      \"satellite\",\n      \"satellite-streets\",\n    ]),\n    [VALUE_TYPES.MAPBOX_STUDIO]: PropTypes.string,\n    [VALUE_TYPES.MAPBOX_ATLAS]: PropTypes.object,\n    [VALUE_TYPES.JSON]: PropTypes.object,\n  }).isRequired,\n  status: PropTypes.oneOf(Object.keys(STATUS)).isRequired,\n  error: PropTypes.object,\n  atlasStyleURL: PropTypes.string,\n\n  changeValueType: PropTypes.func,\n  setValue: PropTypes.func,\n  updatePlot: PropTypes.func,\n  setAtlasURL: PropTypes.func,\n  downloadAtlasJSON: PropTypes.func,\n  viewJson: PropTypes.func,\n  selectedToken: PropTypes.string,\n  onTokenChange: PropTypes.func,\n};\n\nmodule.exports = MapboxStyleUrlController;\n"]}