{"version":3,"sources":["../../../src/components/widgets/DashSelector.js"],"names":["customPropTypes","DashSelector","createClass","propTypes","activeOption","customOneOfType","PropTypes","oneOf","isNull","isDefined","onChange","func","isRequired","lineColor","string","getInitialState","props","componentWillReceiveProps","nextProps","state","setState","onSelect","chosenDash","renderOption","option","label","renderValue","renderDashList","fill","stroke","strokeOpacity","strokeWidth","value","strokeDasharray","render","module","exports"],"mappings":"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","file":"DashSelector.js","sourcesContent":["import React from 'react';\nimport Dropdown from './Dropdown';\nimport * as customPropTypes from '@workspace/utils/customPropTypes';\n\nconst DashSelector = React.createClass({\n\n    propTypes: {\n        activeOption: customPropTypes.customOneOfType([\n            React.PropTypes.oneOf([\n                'solid',\n                'dot',\n                'dash',\n                'longdash',\n                'dashdot',\n                'longdashdot'\n            ]),\n            customPropTypes.isNull\n        ]).isDefined,\n        onChange: React.PropTypes.func.isRequired,\n        lineColor: React.PropTypes.string\n    },\n\n    // Set the initial state\n    getInitialState() {\n        return {\n            activeOption: this.props.activeOption,\n            lineColor: this.props.lineColor\n        };\n    },\n\n    componentWillReceiveProps(nextProps) {\n        // Reset the value to the graph's actual value\n        if (nextProps.activeOption !== this.state.activeOption || nextProps.lineColor !== this.state.lineColor ) {\n            this.setState({\n                activeOption: nextProps.activeOption,\n                lineColor: nextProps.lineColor\n            });\n        }\n    },\n\n    onSelect(chosenDash) {\n        this.props.onChange(chosenDash);\n    },\n\n    renderOption(option) {\n        return (\n            <li className=\"+ls-none\">\n                <div>\n                    <span className=\"+push-quarter-left\">\n                        <svg width=\"100\" height=\"4\">\n                            <g>\n                                {option.label}\n                            </g>\n                        </svg>\n                    </span>\n                </div>\n            </li>\n        );\n    },\n\n    renderValue(option) {\n        return (\n            <span>\n                <svg width=\"100\" height=\"4\">\n                    <g>\n                        {option.label}\n                    </g>\n                </svg>\n            </span>\n        );\n    },\n\n    renderDashList(lineColor) {\n        return (\n            [\n                {\n                    label: <path\n                    d=\"M5,0h100\"\n                    style={{fill: 'none', stroke: lineColor, strokeOpacity: 1, strokeWidth: '4px'}}>\n                    </path>,\n                    value: 'solid'\n                }, {\n                    label: <path\n                    d=\"M5,0h100\"\n                    style={{fill: 'none', stroke: lineColor, strokeOpacity: 1, strokeDasharray: '3px, 3px', strokeWidth: '4px'}}>\n                    </path>,\n                    value: 'dot'\n                }, {\n                    label: <path\n                    d=\"M5,0h100\"\n                    style={{fill: 'none', stroke: lineColor, strokeOpacity: 1, strokeDasharray: '9px, 9px', strokeWidth: '4px'}}>\n                    </path>,\n                    value: 'dash'\n                }, {\n                    label: <path\n                    d=\"M5,0h100\"\n                    style={{fill: 'none', stroke: lineColor, strokeOpacity: 1, strokeDasharray: '15px, 15px', strokeWidth: '4px'}}>\n                    </path>,\n                    value: 'longdash'\n                }, {\n                    label: <path\n                    d=\"M5,0h100\"\n                    style={{fill: 'none', stroke: lineColor, strokeOpacity: 1, strokeDasharray: '9px, 3px, 3px, 3px', strokeWidth: '4px'}}>\n                    </path>,\n                    value: 'dashdot'\n                }, {\n                    label: <path\n                    d=\"M5,0h100\"\n                    style={{fill: 'none', stroke: lineColor, strokeOpacity: 1, strokeDasharray: '15px, 6px, 3px, 6px', strokeWidth: '4px'}}>\n                    </path>,\n                    value: 'longdashdot'\n                }, {\n                    label: '',\n                    value: null\n                }\n            ]\n        );\n    },\n\n    render() {\n        return (\n            <span className=\"widget-dropdown\">\n                <Dropdown ref=\"dropdown\"\n                    value={this.state.activeOption}\n                    options={this.renderDashList(this.state.lineColor)}\n                    onChange={this.onSelect}\n                    clearable={false}\n                    optionRenderer={this.renderOption}\n                    valueRenderer={this.renderValue}\n                    valueKey={'value'}\n                    minWidth={'100%'}\n                />\n            </span>\n        );\n    }\n\n});\n\nmodule.exports = DashSelector;\n"]}