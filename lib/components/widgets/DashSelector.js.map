{"version":3,"sources":["../../../src/components/widgets/DashSelector.js"],"names":["customPropTypes","DashSelector","createClass","propTypes","activeOption","customOneOfType","PropTypes","oneOf","isNull","isDefined","onChange","func","isRequired","lineColor","string","getInitialState","props","componentWillReceiveProps","nextProps","state","setState","onSelect","chosenDash","renderOption","option","label","renderValue","renderDashList","fill","stroke","strokeOpacity","strokeWidth","value","strokeDasharray","render","module","exports"],"mappings":"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","file":"DashSelector.js","sourcesContent":["import React from \"react\";\nimport Dropdown from \"./Dropdown\";\nimport * as customPropTypes from \"@workspace/utils/customPropTypes\";\n\nconst DashSelector = React.createClass({\n  propTypes: {\n    activeOption: customPropTypes.customOneOfType([\n      PropTypes.oneOf([\n        \"solid\",\n        \"dot\",\n        \"dash\",\n        \"longdash\",\n        \"dashdot\",\n        \"longdashdot\",\n      ]),\n      customPropTypes.isNull,\n    ]).isDefined,\n    onChange: PropTypes.func.isRequired,\n    lineColor: PropTypes.string,\n  },\n\n  // Set the initial state\n  getInitialState() {\n    return {\n      activeOption: this.props.activeOption,\n      lineColor: this.props.lineColor,\n    };\n  },\n\n  componentWillReceiveProps(nextProps) {\n    // Reset the value to the graph's actual value\n    if (\n      nextProps.activeOption !== this.state.activeOption ||\n      nextProps.lineColor !== this.state.lineColor\n    ) {\n      this.setState({\n        activeOption: nextProps.activeOption,\n        lineColor: nextProps.lineColor,\n      });\n    }\n  },\n\n  onSelect(chosenDash) {\n    this.props.onChange(chosenDash);\n  },\n\n  renderOption(option) {\n    return (\n      <li className=\"+ls-none\">\n        <div>\n          <span className=\"+push-quarter-left\">\n            <svg width=\"100\" height=\"4\">\n              <g>{option.label}</g>\n            </svg>\n          </span>\n        </div>\n      </li>\n    );\n  },\n\n  renderValue(option) {\n    return (\n      <span>\n        <svg width=\"100\" height=\"4\">\n          <g>{option.label}</g>\n        </svg>\n      </span>\n    );\n  },\n\n  renderDashList(lineColor) {\n    return [\n      {\n        label: (\n          <path\n            d=\"M5,0h100\"\n            style={{\n              fill: \"none\",\n              stroke: lineColor,\n              strokeOpacity: 1,\n              strokeWidth: \"4px\",\n            }}\n          />\n        ),\n        value: \"solid\",\n      },\n      {\n        label: (\n          <path\n            d=\"M5,0h100\"\n            style={{\n              fill: \"none\",\n              stroke: lineColor,\n              strokeOpacity: 1,\n              strokeDasharray: \"3px, 3px\",\n              strokeWidth: \"4px\",\n            }}\n          />\n        ),\n        value: \"dot\",\n      },\n      {\n        label: (\n          <path\n            d=\"M5,0h100\"\n            style={{\n              fill: \"none\",\n              stroke: lineColor,\n              strokeOpacity: 1,\n              strokeDasharray: \"9px, 9px\",\n              strokeWidth: \"4px\",\n            }}\n          />\n        ),\n        value: \"dash\",\n      },\n      {\n        label: (\n          <path\n            d=\"M5,0h100\"\n            style={{\n              fill: \"none\",\n              stroke: lineColor,\n              strokeOpacity: 1,\n              strokeDasharray: \"15px, 15px\",\n              strokeWidth: \"4px\",\n            }}\n          />\n        ),\n        value: \"longdash\",\n      },\n      {\n        label: (\n          <path\n            d=\"M5,0h100\"\n            style={{\n              fill: \"none\",\n              stroke: lineColor,\n              strokeOpacity: 1,\n              strokeDasharray: \"9px, 3px, 3px, 3px\",\n              strokeWidth: \"4px\",\n            }}\n          />\n        ),\n        value: \"dashdot\",\n      },\n      {\n        label: (\n          <path\n            d=\"M5,0h100\"\n            style={{\n              fill: \"none\",\n              stroke: lineColor,\n              strokeOpacity: 1,\n              strokeDasharray: \"15px, 6px, 3px, 6px\",\n              strokeWidth: \"4px\",\n            }}\n          />\n        ),\n        value: \"longdashdot\",\n      },\n      {\n        label: \"\",\n        value: null,\n      },\n    ];\n  },\n\n  render() {\n    return (\n      <span className=\"widget-dropdown\">\n        <Dropdown\n          value={this.state.activeOption}\n          options={this.renderDashList(this.state.lineColor)}\n          onChange={this.onSelect}\n          clearable={false}\n          optionRenderer={this.renderOption}\n          valueRenderer={this.renderValue}\n          valueKey={\"value\"}\n          minWidth={\"100%\"}\n        />\n      </span>\n    );\n  },\n});\n\nmodule.exports = DashSelector;\n"]}