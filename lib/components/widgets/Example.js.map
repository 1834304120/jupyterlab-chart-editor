{"version":3,"sources":["../../../src/components/widgets/Example.js"],"names":["WorkspaceActions","EXAMPLES","scatter","line","bar","pie","errorbars","heatmap","contour","histogram","box","histogram2d","histogram2dcontour","scattergeo","choropleth","surface","scatter3d","STATUS","LOADING","ERROR","SUCCESS","LoadExampleButton","props","loadExample","bind","state","status","chartType","setState","fetch","method","headers","Headers","then","response","ok","json","Error","statusText","dispatch","loadFigure","figure","catch","window","Raven","captureException","err","console","error","has","propTypes","oneOf","Object","keys","func","isRequired","ExampleButton","buttonClass","loadingButtonclass"],"mappings":"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","file":"Example.js","sourcesContent":["import R from \"ramda\";\nimport React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport classnames from \"classnames\";\nimport { _ } from \"@common/utils/i18n\";\nimport * as WorkspaceActions from \"@workspace/actions/workspace\";\nimport { GET_ENCODING_SCHEMA } from \"@workspace/constants/graphTable\";\n\n// Some of these have hardcoded splinter tests. Change them with this in mind\nexport const EXAMPLES = {\n  scatter: \"https://plot.ly/~chris/17604\", // Splinter tested\n  line: \"https://plot.ly/~chris/17606\", // Splinter tested\n  bar: \"https://plot.ly/~PlotBot/41\",\n  pie: \"https://plot.ly/~stacyannj/2145\", // Splinter tested\n  errorbars: \"https://plot.ly/~etpinard/267\", // Splinter tested\n  heatmap: \"https://plot.ly/~chris/17615\", // Splinter tested\n  contour: \"https://plot.ly/~chris/17618\", // Splinter tested\n  histogram: \"https://plot.ly/~chris/17610\",\n  box: \"https://plot.ly/~PlotBot/32\",\n  histogram2d: \"https://plot.ly/~chris/17612\",\n  histogram2dcontour: \"https://plot.ly/~chris/17600\", // Splinter tested\n  scattergeo: \"https://plot.ly/~chris/17602\", // Splinter tested\n  choropleth: \"https://plot.ly/~chris/17624\",\n  surface: \"https://plot.ly/~chris/17620\", // Splinter tested\n  scatter3d: \"https://plot.ly/~chelsea_lyn/8794\",\n  // mesh3d: 'https://plot.ly/~chris/17628' // TODO: add once validation passes\n  // scattermapbox: 'https://plot.ly/~chris/17622' // TODO: add once validation passes\n};\n\nexport const STATUS = {\n  LOADING: \"LOADING\",\n  ERROR: \"ERROR\",\n  SUCCESS: \"SUCCESS\",\n};\n\nexport class LoadExampleButton extends Component {\n  constructor(props) {\n    super(props);\n    this.loadExample = this.loadExample.bind(this);\n    this.state = { status: STATUS.SUCCESS };\n  }\n\n  /*\n     * Download the JSON of the figure and\n     * 1 - Convert the data from the figure into our column state\n     * 2 - Create a new table with that data\n     * 3 - Re-create the graph by assigning these columns to graph attributes\n     */\n  loadExample() {\n    const { chartType } = this.props;\n    this.setState({ status: STATUS.LOADING });\n\n    fetch(`${EXAMPLES[chartType]}.json`, {\n      method: \"GET\",\n      headers: new Headers({\n        \"Content-Type\": \"application/json\",\n      }),\n    })\n      .then(response => {\n        if (response.ok) {\n          return response.json();\n        }\n        throw new Error(response.statusText);\n      })\n      .then(figure => {\n        const { dispatch, chartType } = this.props;\n\n        dispatch(WorkspaceActions.loadFigure(figure, chartType));\n        this.setState({ status: STATUS.SUCCESS });\n      })\n      .catch(err => {\n        window.Raven.captureException(err);\n        console.error(err);\n\n        this.setState({ status: STATUS.ERROR });\n        return;\n      });\n  }\n\n  render() {\n    if (!R.has(this.props.chartType, EXAMPLES)) {\n      return null;\n    }\n\n    return (\n      <ExampleButton\n        loadExample={this.loadExample}\n        status={this.state.status}\n      />\n    );\n  }\n}\nLoadExampleButton.propTypes = {\n  chartType: PropTypes.oneOf(Object.keys(GET_ENCODING_SCHEMA())),\n  dispatch: PropTypes.func.isRequired,\n};\n\nconst ExampleButton = props => {\n  const buttonClass = classnames(\"plot-example-button\", \"js-example-button\");\n\n  const loadingButtonclass = classnames(\n    \"plot-example-button\",\n    \"js-example-button\",\n    \"plot-example-loading\"\n  );\n\n  if (props.status === STATUS.LOADING) {\n    return <div className={loadingButtonclass}>{_(\"Loading...\")}</div>;\n  }\n\n  if (props.status === STATUS.ERROR) {\n    return (\n      <div className={buttonClass} onClick={props.loadExample}>\n        {_(\"Hm... error occurred. Click to try again.\")}\n      </div>\n    );\n  }\n\n  return (\n    <div className={buttonClass} onClick={props.loadExample}>\n      <i className=\"icon-arrow +soft-quarter-right\" />\n      {_(\"Try an example\")}\n    </div>\n  );\n};\n\nExampleButton.propTypes = {\n  loadExample: PropTypes.func.isRequired,\n  status: PropTypes.oneOf(Object.keys(STATUS)),\n};\n"]}