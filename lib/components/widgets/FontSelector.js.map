{"version":3,"sources":["../../../src/components/widgets/FontSelector.js"],"names":["FontSelector","createClass","propTypes","activeOption","string","onChange","func","dispatch","isRequired","contextTypes","currentUser","isDefined","prettifyFontLabel","fontLabel","replace","split","isAccessible","font","user","context","feature_set","feature_set_id","featureName","validations","allowedFonts","getInitialState","props","fontList","label","value","key","addFontOptionIfNotAvailable","fontStringValue","find","o","unshift","componentWillReceiveProps","nextProps","setState","state","onSelect","chosenFont","newActiveFont","getBasicFontOptions","renderOption","fontStyle","fontFamily","renderValue","hidePropBadge","labelClass","render","tieredOnSelect","module","exports"],"mappings":"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","file":"FontSelector.js","sourcesContent":["import Dropdown from './Dropdown';\nimport ProBadge from './ProBadge';\nimport R from 'ramda';\nimport React, {PropTypes} from 'react';\nimport getFeatureValue from '@common/utils/features';\nimport tieredDecorator from '@workspace/utils/tieredDecorator';\nimport {MIXED_VALUES} from '@workspace/constants/workspace';\nimport {currentUserOrNull} from '@workspace/utils/customPropTypes';\nimport {\n    tierFontFamilies, hasInaccessibleFeature\n} from '@workspace/utils/checkFigureFeatureAccess';\n\n/*\n * TODO: expand to accept custom fonts #5718\n */\n\nconst FontSelector = React.createClass({\n\n  propTypes: {\n      activeOption: PropTypes.string,\n      onChange: PropTypes.func,\n      dispatch: PropTypes.func.isRequired\n  },\n\n  contextTypes: {\n      currentUser: currentUserOrNull.isDefined\n  },\n\n  // Prettify the font labels\n  prettifyFontLabel(fontLabel) {\n      // Take the first font-family and remove all the quotes\n      if (fontLabel) {\n          return R.replace(/\"/g, '', fontLabel.split(',')[0]);\n      }\n\n      // if there is no font label return empty\n      return '';\n  },\n\n  /**\n   * Determine if the font is accessible\n   * @param {String} font label specifying the font family\n   * @returns {bool} if the font is accessible or not\n   */\n  isAccessible(font) {\n      const user = this.context.currentUser;\n      const feature_set = user ? user.feature_set_id : null;\n      const {featureName, validations} = tierFontFamilies;\n\n      const allowedFonts = getFeatureValue(feature_set, featureName);\n\n      return !hasInaccessibleFeature(\n          font,\n          allowedFonts,\n          validations\n      );\n  },\n\n  // Set the initial state\n  getInitialState() {\n      const activeOption = this.props.activeOption || 'Open Sans';\n      const fontList = [\n          {\n              label: 'Arial',\n              value: 'Arial',\n              key: 'Arial'\n          },\n          {\n              label: 'Balto',\n              value: 'Balto',\n              key: 'Balto'\n          },\n          {\n              label: 'Courier New',\n              value: 'Courier New',\n              key: 'Courier New'\n          },\n          {\n              label: 'Droid Sans',\n              value: 'Droid Sans',\n              key: 'Droid Sans'\n          },\n          {\n              label: 'Droid Serif',\n              value: 'Droid Serif',\n              key: 'Droid Serif'\n          },\n          {\n              label: 'Droid Sans Mono',\n              value: 'Droid Sans Mono',\n              key: 'Droid Sans Mono'\n          },\n          {\n              label: 'Gravitas One',\n              value: 'Gravitas One',\n              key: 'Gravitas One'\n          },\n          {\n              label: 'Liberation Sans',\n              value: 'Liberation Sans',\n              key: 'Liberation Sans'\n          },\n          {\n              label: 'Old Standard TT',\n              value: 'Old Standard TT',\n              key: 'Old Standard TT'\n          },\n          {\n              label: 'Open Sans',\n              value: '\"Open Sans\", verdana, arial, sans-serif',\n              key: 'Open Sans'\n          },\n          {\n              label: 'Overpass',\n              value: 'Overpass',\n              key: 'Overpass'\n          },\n          {\n              label: 'PT Sans Narrow',\n              value: 'PT Sans Narrow',\n              key: 'PT Sans Narrow'\n          },\n          {\n              label: 'Raleway',\n              value: 'Raleway',\n              key: 'Raleway'\n          },\n          {\n              label: 'Roboto',\n              value: 'Roboto',\n              key: 'Roboto'\n          },\n          {\n              label: 'Times New Roman',\n              value: 'Times New Roman',\n              key: 'Times New Roman'\n          }\n      ];\n\n      this.addFontOptionIfNotAvailable(activeOption, fontList);\n\n      return {activeOption, fontList};\n  },\n\n  // if the font-string isn't available then add it to our list of options.\n  addFontOptionIfNotAvailable (fontStringValue, fontList) {\n\n      if (!fontList.find(o => o.value === fontStringValue)) {\n          fontList.unshift({\n              label: this.prettifyFontLabel(fontStringValue),\n              value: fontStringValue,\n              key: fontStringValue\n          });\n      }\n  },\n\n  componentWillReceiveProps(nextProps) {\n\n      // Skip addFontOption operation if value passed in is MIXED_VALUE\n      if (nextProps.activeOption === MIXED_VALUES) {\n\n          // set the active option empty if it is MIXED_VALUES\n          this.setState({\n              activeOption: ''\n          });\n\n          return;\n      }\n\n      // Reset the value to the graph's actual value\n      if (nextProps.activeOption !== this.state.activeOption) {\n          this.addFontOptionIfNotAvailable(\n              nextProps.activeOption, this.state.fontList\n          );\n          this.setState({\n              activeOption: nextProps.activeOption\n          });\n      }\n  },\n\n  onSelect(chosenFont) {\n      const newActiveFont = chosenFont;\n      const {onChange} = this.props;\n\n      this.setState({\n          activeOption: newActiveFont\n      });\n\n      onChange(newActiveFont);\n  },\n\n  getBasicFontOptions() {\n      return this.state.fontList;\n  },\n\n  renderOption({label}) {\n\n      const fontStyle = {\n          fontFamily: label\n      };\n\n      return (\n          <li className=\"block-group\">\n              <div className=\"block grid-30\">\n                  <ProBadge\n                      hide={this.isAccessible(label)}\n                      className=\"--dropdown\"\n                  />\n              </div>\n              <div className=\"block grid-70 font-size-xs\">\n                  <span style={fontStyle}>\n                      {label}\n                  </span>\n              </div>\n          </li>\n      );\n  },\n\n\n  renderValue({label}) {\n      const hidePropBadge = this.isAccessible(label);\n\n      let labelClass = '';\n      if (!hidePropBadge) { labelClass = 'Select-font-with-pro-badge'; }\n\n      const fontStyle = {\n          fontFamily: label\n      };\n\n      return (\n          <div className={'Select-value-with-arrow'}>\n              <span style={fontStyle} className={labelClass}>\n                  {label}\n              </span>\n              <ProBadge\n                  hide={hidePropBadge}\n                  className=\"--font-dropdown\"\n              />\n          </div>\n      );\n  },\n\n  render() {\n      const {dispatch} = this.props;\n      const {featureName} = tierFontFamilies;\n\n      const tieredOnSelect = tieredDecorator(\n          this.onSelect,\n          this.isAccessible,\n          featureName,\n          dispatch,\n          this.prettifyFontLabel\n      );\n\n      return (\n          <span className=\"font-dropdown widget-dropdown\">\n              <Dropdown ref=\"dropdown\"\n                        value={this.state.activeOption}\n                        options={this.getBasicFontOptions()}\n                        onChange={tieredOnSelect}\n                        clearable={false}\n                        optionRenderer={this.renderOption}\n                        valueRenderer={this.renderValue}\n                        placeholder={this.state.activeOption}\n                        minWidth={'100%'}\n              />\n          </span>\n      );\n  }\n\n});\n\nmodule.exports = FontSelector;\n"]}