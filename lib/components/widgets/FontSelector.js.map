{"version":3,"sources":["../../../src/components/widgets/FontSelector.js"],"names":["FontSelector","createClass","propTypes","activeOption","string","onChange","func","dispatch","isRequired","contextTypes","currentUser","isDefined","prettifyFontLabel","fontLabel","replace","split","isAccessible","font","user","context","feature_set","feature_set_id","featureName","validations","allowedFonts","getInitialState","props","fontList","label","value","key","addFontOptionIfNotAvailable","fontStringValue","find","o","unshift","componentWillReceiveProps","nextProps","setState","state","onSelect","chosenFont","newActiveFont","getBasicFontOptions","renderOption","fontStyle","fontFamily","renderValue","hidePropBadge","labelClass","render","tieredOnSelect","module","exports"],"mappings":";;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;AACA;;AACA;;;;AAKA;;;;AAIA,IAAMA,eAAe,gBAAMC,WAAN,CAAkB;AAAA;;AACrCC,aAAW;AACTC,kBAAc,oBAAUC,MADf;AAETC,cAAU,oBAAUC,IAFX;AAGTC,cAAU,oBAAUD,IAAV,CAAeE;AAHhB,GAD0B;;AAOrCC,gBAAc;AACZC,iBAAa,mCAAkBC;AADnB,GAPuB;;AAWrC;AACAC,mBAZqC,6BAYnBC,SAZmB,EAYR;AAC3B;AACA,QAAIA,SAAJ,EAAe;AACb,aAAO,gBAAEC,OAAF,CAAU,IAAV,EAAgB,EAAhB,EAAoBD,UAAUE,KAAV,CAAgB,GAAhB,EAAqB,CAArB,CAApB,CAAP;AACD;;AAED;AACA,WAAO,EAAP;AACD,GApBoC;;;AAsBrC;;;;;AAKAC,cA3BqC,wBA2BxBC,IA3BwB,EA2BlB;AACjB,QAAMC,OAAO,KAAKC,OAAL,CAAaT,WAA1B;AACA,QAAMU,cAAcF,OAAOA,KAAKG,cAAZ,GAA6B,IAAjD;AAFiB,QAGTC,WAHS,8CAGTA,WAHS;AAAA,QAGIC,WAHJ,8CAGIA,WAHJ;;;AAKjB,QAAMC,eAAe,wBAAgBJ,WAAhB,EAA6BE,WAA7B,CAArB;;AAEA,WAAO,CAAC,sDAAuBL,IAAvB,EAA6BO,YAA7B,EAA2CD,WAA3C,CAAR;AACD,GAnCoC;;;AAqCrC;AACAE,iBAtCqC,6BAsCnB;AAChB,QAAMtB,eAAe,KAAKuB,KAAL,CAAWvB,YAAX,IAA2B,WAAhD;AACA,QAAMwB,WAAW,CACf;AACEC,aAAO,OADT;AAEEC,aAAO,OAFT;AAGEC,WAAK;AAHP,KADe,EAMf;AACEF,aAAO,OADT;AAEEC,aAAO,OAFT;AAGEC,WAAK;AAHP,KANe,EAWf;AACEF,aAAO,aADT;AAEEC,aAAO,aAFT;AAGEC,WAAK;AAHP,KAXe,EAgBf;AACEF,aAAO,YADT;AAEEC,aAAO,YAFT;AAGEC,WAAK;AAHP,KAhBe,EAqBf;AACEF,aAAO,aADT;AAEEC,aAAO,aAFT;AAGEC,WAAK;AAHP,KArBe,EA0Bf;AACEF,aAAO,iBADT;AAEEC,aAAO,iBAFT;AAGEC,WAAK;AAHP,KA1Be,EA+Bf;AACEF,aAAO,cADT;AAEEC,aAAO,cAFT;AAGEC,WAAK;AAHP,KA/Be,EAoCf;AACEF,aAAO,iBADT;AAEEC,aAAO,iBAFT;AAGEC,WAAK;AAHP,KApCe,EAyCf;AACEF,aAAO,iBADT;AAEEC,aAAO,iBAFT;AAGEC,WAAK;AAHP,KAzCe,EA8Cf;AACEF,aAAO,WADT;AAEEC,aAAO,yCAFT;AAGEC,WAAK;AAHP,KA9Ce,EAmDf;AACEF,aAAO,UADT;AAEEC,aAAO,UAFT;AAGEC,WAAK;AAHP,KAnDe,EAwDf;AACEF,aAAO,gBADT;AAEEC,aAAO,gBAFT;AAGEC,WAAK;AAHP,KAxDe,EA6Df;AACEF,aAAO,SADT;AAEEC,aAAO,SAFT;AAGEC,WAAK;AAHP,KA7De,EAkEf;AACEF,aAAO,QADT;AAEEC,aAAO,QAFT;AAGEC,WAAK;AAHP,KAlEe,EAuEf;AACEF,aAAO,iBADT;AAEEC,aAAO,iBAFT;AAGEC,WAAK;AAHP,KAvEe,CAAjB;;AA8EA,SAAKC,2BAAL,CAAiC5B,YAAjC,EAA+CwB,QAA/C;;AAEA,WAAO,EAAExB,0BAAF,EAAgBwB,kBAAhB,EAAP;AACD,GAzHoC;;;AA2HrC;AACAI,6BA5HqC,uCA4HTC,eA5HS,EA4HQL,QA5HR,EA4HkB;AACrD,QAAI,CAACA,SAASM,IAAT,CAAc;AAAA,aAAKC,EAAEL,KAAF,KAAYG,eAAjB;AAAA,KAAd,CAAL,EAAsD;AACpDL,eAASQ,OAAT,CAAiB;AACfP,eAAO,KAAKhB,iBAAL,CAAuBoB,eAAvB,CADQ;AAEfH,eAAOG,eAFQ;AAGfF,aAAKE;AAHU,OAAjB;AAKD;AACF,GApIoC;AAsIrCI,2BAtIqC,qCAsIXC,SAtIW,EAsIA;AACnC;AACA,QAAIA,UAAUlC,YAAV,4BAAJ,EAA6C;AAC3C;AACA,WAAKmC,QAAL,CAAc;AACZnC,sBAAc;AADF,OAAd;;AAIA;AACD;;AAED;AACA,QAAIkC,UAAUlC,YAAV,KAA2B,KAAKoC,KAAL,CAAWpC,YAA1C,EAAwD;AACtD,WAAK4B,2BAAL,CACEM,UAAUlC,YADZ,EAEE,KAAKoC,KAAL,CAAWZ,QAFb;AAIA,WAAKW,QAAL,CAAc;AACZnC,sBAAckC,UAAUlC;AADZ,OAAd;AAGD;AACF,GA3JoC;AA6JrCqC,UA7JqC,oBA6J5BC,UA7J4B,EA6JhB;AACnB,QAAMC,gBAAgBD,UAAtB;AADmB,QAEXpC,QAFW,GAEE,KAAKqB,KAFP,CAEXrB,QAFW;;;AAInB,SAAKiC,QAAL,CAAc;AACZnC,oBAAcuC;AADF,KAAd;;AAIArC,aAASqC,aAAT;AACD,GAtKoC;AAwKrCC,qBAxKqC,iCAwKf;AACpB,WAAO,KAAKJ,KAAL,CAAWZ,QAAlB;AACD,GA1KoC;AA4KrCiB,cA5KqC,8BA4Kb;AAAA,QAAThB,KAAS,QAATA,KAAS;;AACtB,QAAMiB,YAAY;AAChBC,kBAAYlB;AADI,KAAlB;;AAIA,WACE;AAAA;AAAA,QAAI,WAAU,aAAd;AACE;AAAA;AAAA,UAAK,WAAU,eAAf;AACE,4DAAU,MAAM,KAAKZ,YAAL,CAAkBY,KAAlB,CAAhB,EAA0C,WAAU,YAApD;AADF,OADF;AAIE;AAAA;AAAA,UAAK,WAAU,4BAAf;AACE;AAAA;AAAA,YAAM,OAAOiB,SAAb;AAAyBjB;AAAzB;AADF;AAJF,KADF;AAUD,GA3LoC;AA6LrCmB,aA7LqC,8BA6Ld;AAAA,QAATnB,KAAS,SAATA,KAAS;;AACrB,QAAMoB,gBAAgB,KAAKhC,YAAL,CAAkBY,KAAlB,CAAtB;;AAEA,QAAIqB,aAAa,EAAjB;AACA,QAAI,CAACD,aAAL,EAAoB;AAClBC,mBAAa,4BAAb;AACD;;AAED,QAAMJ,YAAY;AAChBC,kBAAYlB;AADI,KAAlB;;AAIA,WACE;AAAA;AAAA,QAAK,WAAW,yBAAhB;AACE;AAAA;AAAA,UAAM,OAAOiB,SAAb,EAAwB,WAAWI,UAAnC;AACGrB;AADH,OADF;AAIE,0DAAU,MAAMoB,aAAhB,EAA+B,WAAU,iBAAzC;AAJF,KADF;AAQD,GAjNoC;AAmNrCE,QAnNqC,oBAmN5B;AAAA,QACC3C,QADD,GACc,KAAKmB,KADnB,CACCnB,QADD;AAAA,QAECe,WAFD,8CAECA,WAFD;;;AAIP,QAAM6B,iBAAiB,+BACrB,KAAKX,QADgB,EAErB,KAAKxB,YAFgB,EAGrBM,WAHqB,EAIrBf,QAJqB,EAKrB,KAAKK,iBALgB,CAAvB;;AAQA,WACE;AAAA;AAAA,QAAM,WAAU,+BAAhB;AACE;AACE,aAAI,UADN;AAEE,eAAO,KAAK2B,KAAL,CAAWpC,YAFpB;AAGE,iBAAS,KAAKwC,mBAAL,EAHX;AAIE,kBAAUQ,cAJZ;AAKE,mBAAW,KALb;AAME,wBAAgB,KAAKP,YANvB;AAOE,uBAAe,KAAKG,WAPtB;AAQE,qBAAa,KAAKR,KAAL,CAAWpC,YAR1B;AASE,kBAAU;AATZ;AADF,KADF;AAeD;AA9OoC,CAAlB,CAArB;;AAiPAiD,OAAOC,OAAP,GAAiBrD,YAAjB","file":"FontSelector.js","sourcesContent":["import Dropdown from \"./Dropdown\";\nimport ProBadge from \"./ProBadge\";\nimport R from \"ramda\";\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport getFeatureValue from \"@common/utils/features\";\nimport tieredDecorator from \"@workspace/utils/tieredDecorator\";\nimport { MIXED_VALUES } from \"@workspace/constants/workspace\";\nimport { currentUserOrNull } from \"@workspace/utils/customPropTypes\";\nimport {\n  tierFontFamilies,\n  hasInaccessibleFeature,\n} from \"@workspace/utils/checkFigureFeatureAccess\";\n\n/*\n * TODO: expand to accept custom fonts #5718\n */\n\nconst FontSelector = React.createClass({\n  propTypes: {\n    activeOption: PropTypes.string,\n    onChange: PropTypes.func,\n    dispatch: PropTypes.func.isRequired,\n  },\n\n  contextTypes: {\n    currentUser: currentUserOrNull.isDefined,\n  },\n\n  // Prettify the font labels\n  prettifyFontLabel(fontLabel) {\n    // Take the first font-family and remove all the quotes\n    if (fontLabel) {\n      return R.replace(/\"/g, \"\", fontLabel.split(\",\")[0]);\n    }\n\n    // if there is no font label return empty\n    return \"\";\n  },\n\n  /**\n   * Determine if the font is accessible\n   * @param {String} font label specifying the font family\n   * @returns {bool} if the font is accessible or not\n   */\n  isAccessible(font) {\n    const user = this.context.currentUser;\n    const feature_set = user ? user.feature_set_id : null;\n    const { featureName, validations } = tierFontFamilies;\n\n    const allowedFonts = getFeatureValue(feature_set, featureName);\n\n    return !hasInaccessibleFeature(font, allowedFonts, validations);\n  },\n\n  // Set the initial state\n  getInitialState() {\n    const activeOption = this.props.activeOption || \"Open Sans\";\n    const fontList = [\n      {\n        label: \"Arial\",\n        value: \"Arial\",\n        key: \"Arial\",\n      },\n      {\n        label: \"Balto\",\n        value: \"Balto\",\n        key: \"Balto\",\n      },\n      {\n        label: \"Courier New\",\n        value: \"Courier New\",\n        key: \"Courier New\",\n      },\n      {\n        label: \"Droid Sans\",\n        value: \"Droid Sans\",\n        key: \"Droid Sans\",\n      },\n      {\n        label: \"Droid Serif\",\n        value: \"Droid Serif\",\n        key: \"Droid Serif\",\n      },\n      {\n        label: \"Droid Sans Mono\",\n        value: \"Droid Sans Mono\",\n        key: \"Droid Sans Mono\",\n      },\n      {\n        label: \"Gravitas One\",\n        value: \"Gravitas One\",\n        key: \"Gravitas One\",\n      },\n      {\n        label: \"Liberation Sans\",\n        value: \"Liberation Sans\",\n        key: \"Liberation Sans\",\n      },\n      {\n        label: \"Old Standard TT\",\n        value: \"Old Standard TT\",\n        key: \"Old Standard TT\",\n      },\n      {\n        label: \"Open Sans\",\n        value: '\"Open Sans\", verdana, arial, sans-serif',\n        key: \"Open Sans\",\n      },\n      {\n        label: \"Overpass\",\n        value: \"Overpass\",\n        key: \"Overpass\",\n      },\n      {\n        label: \"PT Sans Narrow\",\n        value: \"PT Sans Narrow\",\n        key: \"PT Sans Narrow\",\n      },\n      {\n        label: \"Raleway\",\n        value: \"Raleway\",\n        key: \"Raleway\",\n      },\n      {\n        label: \"Roboto\",\n        value: \"Roboto\",\n        key: \"Roboto\",\n      },\n      {\n        label: \"Times New Roman\",\n        value: \"Times New Roman\",\n        key: \"Times New Roman\",\n      },\n    ];\n\n    this.addFontOptionIfNotAvailable(activeOption, fontList);\n\n    return { activeOption, fontList };\n  },\n\n  // if the font-string isn't available then add it to our list of options.\n  addFontOptionIfNotAvailable(fontStringValue, fontList) {\n    if (!fontList.find(o => o.value === fontStringValue)) {\n      fontList.unshift({\n        label: this.prettifyFontLabel(fontStringValue),\n        value: fontStringValue,\n        key: fontStringValue,\n      });\n    }\n  },\n\n  componentWillReceiveProps(nextProps) {\n    // Skip addFontOption operation if value passed in is MIXED_VALUE\n    if (nextProps.activeOption === MIXED_VALUES) {\n      // set the active option empty if it is MIXED_VALUES\n      this.setState({\n        activeOption: \"\",\n      });\n\n      return;\n    }\n\n    // Reset the value to the graph's actual value\n    if (nextProps.activeOption !== this.state.activeOption) {\n      this.addFontOptionIfNotAvailable(\n        nextProps.activeOption,\n        this.state.fontList\n      );\n      this.setState({\n        activeOption: nextProps.activeOption,\n      });\n    }\n  },\n\n  onSelect(chosenFont) {\n    const newActiveFont = chosenFont;\n    const { onChange } = this.props;\n\n    this.setState({\n      activeOption: newActiveFont,\n    });\n\n    onChange(newActiveFont);\n  },\n\n  getBasicFontOptions() {\n    return this.state.fontList;\n  },\n\n  renderOption({ label }) {\n    const fontStyle = {\n      fontFamily: label,\n    };\n\n    return (\n      <li className=\"block-group\">\n        <div className=\"block grid-30\">\n          <ProBadge hide={this.isAccessible(label)} className=\"--dropdown\" />\n        </div>\n        <div className=\"block grid-70 font-size-xs\">\n          <span style={fontStyle}>{label}</span>\n        </div>\n      </li>\n    );\n  },\n\n  renderValue({ label }) {\n    const hidePropBadge = this.isAccessible(label);\n\n    let labelClass = \"\";\n    if (!hidePropBadge) {\n      labelClass = \"Select-font-with-pro-badge\";\n    }\n\n    const fontStyle = {\n      fontFamily: label,\n    };\n\n    return (\n      <div className={\"Select-value-with-arrow\"}>\n        <span style={fontStyle} className={labelClass}>\n          {label}\n        </span>\n        <ProBadge hide={hidePropBadge} className=\"--font-dropdown\" />\n      </div>\n    );\n  },\n\n  render() {\n    const { dispatch } = this.props;\n    const { featureName } = tierFontFamilies;\n\n    const tieredOnSelect = tieredDecorator(\n      this.onSelect,\n      this.isAccessible,\n      featureName,\n      dispatch,\n      this.prettifyFontLabel\n    );\n\n    return (\n      <span className=\"font-dropdown widget-dropdown\">\n        <Dropdown\n          ref=\"dropdown\"\n          value={this.state.activeOption}\n          options={this.getBasicFontOptions()}\n          onChange={tieredOnSelect}\n          clearable={false}\n          optionRenderer={this.renderOption}\n          valueRenderer={this.renderValue}\n          placeholder={this.state.activeOption}\n          minWidth={\"100%\"}\n        />\n      </span>\n    );\n  },\n});\n\nmodule.exports = FontSelector;\n"]}