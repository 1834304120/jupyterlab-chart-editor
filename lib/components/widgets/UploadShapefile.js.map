{"version":3,"sources":["../../../src/components/widgets/UploadShapefile.js"],"names":["ErrorMessages","STATUS","LOADING","ERROR","SUCCESS","INITIAL","UploadShapefile","props","state","status","upload","bind","renderBlankState","renderFullState","renderErrorState","renderLoadingState","renderDropzone","getRef","c","_ref","nextProps","value","setState","files","reader","fileExtension","name","slice","toLowerCase","onload","contents","e","target","result","showErrorState","console","error","message","UPLOAD_SHAPE_FILE","PARSING_ERROR","onUpload","JSON","parse","then","geojson","catch","length","ONE_AT_A_TIME","readAsText","readAsArrayBuffer","content","this_ref","open","stringify","split","join","propTypes","func","isRequired","object","module","exports"],"mappings":"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","file":"UploadShapefile.js","sourcesContent":["import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport Dropzone from \"react-dropzone\";\nimport { _ } from \"@common/utils/i18n\";\n\nimport shp from \"shpjs\";\nimport CustomFileReader from \"@workspace/utils/CustomFileReader\";\nimport * as ErrorMessages from \"@workspace/constants/errorMessages\";\n\nconst STATUS = {\n  LOADING: \"LOADING\",\n  ERROR: \"ERROR\",\n  SUCCESS: \"SUCCESS\",\n  INITIAL: \"INITIAL\",\n};\n\nclass UploadShapefile extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      status: STATUS.INITIAL,\n    };\n\n    this.upload = this.upload.bind(this);\n    this.renderBlankState = this.renderBlankState.bind(this);\n    this.renderFullState = this.renderFullState.bind(this);\n    this.renderErrorState = this.renderErrorState.bind(this);\n    this.renderLoadingState = this.renderLoadingState.bind(this);\n    this.renderDropzone = this.renderDropzone.bind(this);\n    this.getRef = this.getRef.bind(this);\n  }\n\n  getRef(c) {\n    this._ref = c;\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.value && nextProps.value !== null) {\n      this.setState({ status: STATUS.SUCCESS });\n    }\n  }\n\n  upload(files) {\n    const reader = new CustomFileReader();\n    const fileExtension = files[0].name.slice(-4).toLowerCase();\n\n    reader.onload = e => {\n      const contents = e.target.result;\n      const showErrorState = error => {\n        console.error(error);\n\n        this.setState({\n          status: STATUS.ERROR,\n          message: ErrorMessages.UPLOAD_SHAPE_FILE.PARSING_ERROR,\n        });\n      };\n\n      if (fileExtension === \"json\") {\n        try {\n          this.props.onUpload(JSON.parse(contents));\n        } catch (error) {\n          showErrorState(error);\n        }\n      } else {\n        /* shp accepts shapefiles and GeoJSON zipped files:\n                 * https://github.com/calvinmetcalf/shapefile-js/blob/gh-pages/lib/index.js#L59\n                */\n\n        shp(contents)\n          .then(geojson => {\n            this.props.onUpload(geojson);\n            /*\n                     * remain in the \"loading\" state until the value comes\n                     * back to the component in componentWillReceiveProps\n                     */\n          })\n          .catch(showErrorState);\n      }\n    };\n\n    if (files.length > 1) {\n      this.setState({\n        status: STATUS.ERROR,\n        // TODO: move to constants\n        message: ErrorMessages.UPLOAD_SHAPE_FILE.ONE_AT_A_TIME,\n      });\n    } else if (files.length === 1) {\n      this.setState({ status: STATUS.LOADING });\n\n      if (fileExtension === \"json\") {\n        reader.readAsText(files[0]);\n      } else {\n        reader.readAsArrayBuffer(files[0]);\n      }\n    }\n  }\n\n  renderDropzone(content) {\n    return (\n      <Dropzone\n        ref={this.getRef}\n        onDrop={this.upload}\n        className=\"upload-shapefile upload-shapefile__inactive-dropzone\"\n        activeClassName=\"upload-shapefile upload-shapefile__active-dropzone\"\n        disableClick={true}\n      >\n        {content}\n      </Dropzone>\n    );\n  }\n\n  renderBlankState() {\n    // The clicking behaviour of 'react-dropzone' by default is already to open the browser's file picker\n    // We don't need an onClick handler because that duplicates the event:\n    // http://okonet.ru/react-dropzone/ Under the features section:\n    // disableClick - Clicking the <Dropzone> brings up the browser file picker. To disable, set to true.\n\n    return this.renderDropzone(\n      <span className=\"+vertically-horizontally-centered-content upload-shapefile__dropzone-content\">\n        <a onClick={() => this_ref.open()}>upload </a>\n        {_(\n          \"a GeoJSON file (.json or .geojson) or a .zip file containing a .shp, .shx, and .dbf file\"\n        )}\n      </span>\n    );\n  }\n\n  renderLoadingState() {\n    return (\n      <div className=\"upload-shapefile +cursor-loading\">\n        <div className=\"+vertically-horizontally-centered-content\">\n          {_(\"Loading...\")}\n        </div>\n      </div>\n    );\n  }\n\n  renderErrorState() {\n    return this.renderDropzone(\n      <div className=\"upload-shapefile__dropzone-content +vertically-horizontally-centered-content\">\n        <div className=\"+text-error\">{this.state.message}</div>\n        <a onClick={() => this._ref.open()}>{_(\"Upload again\")}</a>\n      </div>\n    );\n  }\n\n  renderFullState() {\n    // TODO: this will be hella slow for big JSON files..\n    return (\n      <div className=\"upload-shapefile upload-shapefile__geojson-container thin-scroll\">\n        GeoJSON:\n        <pre className=\"upload-shapefile__geojson\">\n          {JSON.stringify(this.props.value, null, 2)\n            .split(\"\\n\")\n            .slice(0, 100)\n            .join(\"\\n\")}\n          ...\n        </pre>\n      </div>\n    );\n  }\n\n  render() {\n    let content;\n    if (this.state.status === STATUS.LOADING) {\n      content = this.renderLoadingState();\n    } else if (this.state.status === STATUS.INITIAL) {\n      content = this.renderBlankState();\n    } else if (this.state.status === STATUS.SUCCESS) {\n      content = this.renderFullState();\n    } else if (this.state.status === STATUS.ERROR) {\n      content = this.renderErrorState();\n    }\n\n    return <div>{content}</div>;\n  }\n}\n\nUploadShapefile.propTypes = {\n  onUpload: PropTypes.func.isRequired,\n\n  // geojson\n  value: PropTypes.object.isRequired,\n};\n\nmodule.exports = UploadShapefile;\n"]}