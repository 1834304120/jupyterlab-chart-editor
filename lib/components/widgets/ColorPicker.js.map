{"version":3,"sources":["../../../src/components/widgets/ColorPicker.js"],"names":["ColorPicker","props","state","selectedColor","isVisible","onSelectedColorChange","bind","toColorBuffer","toggleVisible","nextProps","newColor","toRgbString","setState","color","extractRGB","c","rgb","getColorSource","source","hex","onColorChange","colorText","toHexString","swatchStyle","backgroundColor","propTypes","func","isRequired","string","module","exports"],"mappings":";;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;;;;;IAEMA,W;;;AACJ,uBAAYC,KAAZ,EAAmB;AAAA;;AAAA,0HACXA,KADW;;AAGjB,UAAKC,KAAL,GAAa;AACXC,qBAAe,yBAAUF,MAAME,aAAhB,CADJ;AAEXC,iBAAW;AAFA,KAAb;;AAKA,UAAKC,qBAAL,GAA6B,MAAKA,qBAAL,CAA2BC,IAA3B,OAA7B;AACA,UAAKC,aAAL,GAAqB,MAAKA,aAAL,CAAmBD,IAAnB,OAArB;AACA,UAAKE,aAAL,GAAqB,MAAKA,aAAL,CAAmBF,IAAnB,OAArB;AAViB;AAWlB;;;;8CAEyBG,S,EAAW;AACnC,UAAMC,WAAW,yBAAUD,UAAUN,aAApB,CAAjB;AADmC,UAE3BA,aAF2B,GAET,KAAKD,KAFI,CAE3BC,aAF2B;;;AAInC,UAAIO,SAASC,WAAT,OAA2BR,cAAcQ,WAAd,EAA/B,EAA4D;AAC1D,aAAKC,QAAL,CAAc,EAAET,eAAeO,QAAjB,EAAd;AACD;AACF;;;kCAEaG,K,EAAO;AACnB;AACA;AACA;AACA;AACA;AACA;AACA,UAAMC,aAAa,SAAbA,UAAa;AAAA,eAAKC,EAAEC,GAAF,IAASD,CAAd;AAAA,OAAnB;;AAEA;AACA;AACA,UAAME,iBAAiB,SAAjBA,cAAiB;AAAA,eAAMF,EAAEG,MAAF,KAAa,KAAb,GAAqBJ,WAAWC,CAAX,CAArB,GAAqCA,EAAEI,GAA7C;AAAA,OAAvB;;AAEA,aAAO,yBAAUF,eAAeJ,KAAf,CAAV,CAAP;AACD;;AAED;AACA;AACA;AACA;AACA;AACA;;;;0CACsBA,K,EAAO;AAC3B,WAAKD,QAAL,CAAc,EAAET,eAAeU,KAAjB,EAAd;;AAEA,UAAMH,WAAWG,MAAMF,WAAN,EAAjB;;AAEA;AACA;AACA,WAAKV,KAAL,CAAWmB,aAAX,CAAyBV,QAAzB;AACD;;;oCAEe;AACd,WAAKE,QAAL,CAAc,EAAER,WAAW,CAAC,KAAKF,KAAL,CAAWE,SAAzB,EAAd;AACD;;;6BAEQ;AAAA,UACCD,aADD,GACmB,KAAKD,KADxB,CACCC,aADD;;;AAGP,UAAMkB,YAAYlB,cAAcmB,WAAd,EAAlB;;AAEA;AACA;AACA,UAAMC,cAAc;AAClBC,yBAAiBrB,cAAcQ,WAAd;AADC,OAApB;;AAIA,aACE;AAAA;AAAA,UAAK,WAAU,gDAAf;AACE;AAAA;AAAA,YAAK,WAAU,aAAf;AACE;AACE,iBAAI,QADN;AAEE,uBAAU,4DAFZ;AAGE,mBAAOY,WAHT;AAIE,qBAAS,KAAKf;AAJhB;AADF,SADF;AAUE;AAAA;AAAA;AACE,iBAAI,mBADN;AAEE,uBAAU,wCAFZ;AAGE,qBAAS,KAAKA;AAHhB;AAKGa;AALH,SAVF;AAkBG,aAAKnB,KAAL,CAAWE,SAAX,GACC;AAAA;AAAA,YAAK,WAAU,+CAAf;AACE,iDAAK,WAAU,qBAAf,EAAqC,SAAS,KAAKI,aAAnD,GADF;AAEE;AACE,iBAAI,aADN;AAEE,mBAAOL,cAAcQ,WAAd,EAFT;AAGE,8BAAkB,KAAKN;AAHzB;AAFF,SADD,GASG;AA3BN,OADF;AA+BD;;;;;;AAGHL,YAAYyB,SAAZ,GAAwB;AACtBL,iBAAe,oBAAUM,IAAV,CAAeC,UADR;AAEtBxB,iBAAe,oBAAUyB;AAFH,CAAxB;;AAKAC,OAAOC,OAAP,GAAiB9B,WAAjB","file":"ColorPicker.js","sourcesContent":["import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport TieredColorPicker from \"./TieredColorPicker\";\nimport tinycolor from \"tinycolor2\";\n\nclass ColorPicker extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      selectedColor: tinycolor(props.selectedColor),\n      isVisible: false,\n    };\n\n    this.onSelectedColorChange = this.onSelectedColorChange.bind(this);\n    this.toColorBuffer = this.toColorBuffer.bind(this);\n    this.toggleVisible = this.toggleVisible.bind(this);\n  }\n\n  componentWillReceiveProps(nextProps) {\n    const newColor = tinycolor(nextProps.selectedColor);\n    const { selectedColor } = this.state;\n\n    if (newColor.toRgbString() !== selectedColor.toRgbString()) {\n      this.setState({ selectedColor: newColor });\n    }\n  }\n\n  toColorBuffer(color) {\n    // @param {obj} c, an object that contains rgba field. Either it\n    // has a field called 'rgb' that contains a rgba object or it is a rgba\n    // object\n    //\n    // @returns {obj} returns c.rgb if it exits if it doesn't exist, it\n    // measn that the object itself is a rgba object\n    const extractRGB = c => c.rgb || c;\n\n    // If it contains rgb info, we extract its rgb object, else we return\n    // its hex\n    const getColorSource = c => (c.source === \"rgb\" ? extractRGB(c) : c.hex);\n\n    return tinycolor(getColorSource(color));\n  }\n\n  // Note: this handler cannot be used alone without being decorated by tiered\n  // decorator\n  //\n  // @param {obj} color, object from tinycolor\n  //\n  // @returns {void} calls restyle\n  onSelectedColorChange(color) {\n    this.setState({ selectedColor: color });\n\n    const newColor = color.toRgbString();\n\n    // Call whatever onColorChange was passed in with the same value!\n    // relayout call only wants a RGB String\n    this.props.onColorChange(newColor);\n  }\n\n  toggleVisible() {\n    this.setState({ isVisible: !this.state.isVisible });\n  }\n\n  render() {\n    const { selectedColor } = this.state;\n\n    const colorText = selectedColor.toHexString();\n\n    // We need inline style here to assign the background color\n    // dynamically.\n    const swatchStyle = {\n      backgroundColor: selectedColor.toRgbString(),\n    };\n\n    return (\n      <div className=\"colorpicker-container js-colorpicker-container\">\n        <div className=\"colorpicker\">\n          <div\n            ref=\"swatch\"\n            className=\"colorpicker-swatch +cursor-clickable js-colorpicker-swatch\"\n            style={swatchStyle}\n            onClick={this.toggleVisible}\n          />\n        </div>\n\n        <div\n          ref=\"selectedColorText\"\n          className=\"colorpicker-selected-color +hover-grey\"\n          onClick={this.toggleVisible}\n        >\n          {colorText}\n        </div>\n\n        {this.state.isVisible ? (\n          <div className=\"color-picker__popover js-color-picker-popover\">\n            <div className=\"color-picker__cover\" onClick={this.toggleVisible} />\n            <TieredColorPicker\n              ref=\"react-color\"\n              color={selectedColor.toRgbString()}\n              onChangeComplete={this.onSelectedColorChange}\n            />\n          </div>\n        ) : null}\n      </div>\n    );\n  }\n}\n\nColorPicker.propTypes = {\n  onColorChange: PropTypes.func.isRequired,\n  selectedColor: PropTypes.string,\n};\n\nmodule.exports = ColorPicker;\n"]}