{"version":3,"sources":["../../../src/components/widgets/ColorPicker.js"],"names":["defaultColors","extractRGB","c","rgb","getColorSource","source","hex","toTinyColor","CustomColorPicker","props","onChangeComplete","r","g","b","a","activeColor","backgroundColor","ColorPicker","state","isVisible","onSelectedColorChange","bind","toggleVisible","newColor","color","onColorChange","toRgbString","setState","selectedColor","colorText","toHexString","rgbString","swatchStyle","propTypes","func","isRequired","string","module","exports"],"mappings":"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","file":"ColorPicker.js","sourcesContent":["import Fields from \"react-color/lib/components/sketch/SketchFields\";\nimport PresetColors from \"react-color/lib/components/sketch/SketchPresetColors\";\nimport React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport tinycolor from \"tinycolor2\";\nimport {\n  Alpha,\n  Hue,\n  Saturation,\n  Checkboard,\n} from \"react-color/lib/components/common\";\nimport { CustomPicker as customPicker } from \"react-color\";\nimport { _ } from \"../../common\";\n\nconst defaultColors = [\n  \"#444444\",\n  \"#ffffff\",\n  \"#1f77b4\", // muted blue\n  \"#ff7f0e\", // safety orange\n  \"#2ca02c\", // cooked asparagus green\n  \"#d62728\", // brick red\n  \"#9467bd\", // muted purple\n  \"#8c564b\", // chestnut brown\n  \"#e377c2\", // raspberry yogurt pink\n  \"#7f7f7f\", // middle gray\n  \"#bcbd22\", // curry yellow-green\n  \"#17becf\", // blue-teal\n];\n\n// Utility functions for converting ColorPicker color objects or raw strings\n// into TinyColor objects.\nconst extractRGB = c => c.rgb || c;\nconst getColorSource = c => (c.source === \"hex\" ? c.hex : extractRGB(c));\nconst toTinyColor = c => tinycolor(getColorSource(c));\n\nconst CustomColorPicker = customPicker(function(props) {\n  const { rgb, onChangeComplete } = props;\n  const { r, g, b, a } = rgb;\n\n  const activeColor = {\n    backgroundColor: `rgba(${r}, ${g}, ${b}, ${a})`,\n  };\n\n  return (\n    <div>\n      <div>\n        <p className=\"color-picker-title\">{_(\"Custom colors\")}</p>\n        <div className=\"color-picker-saturation\">\n          <Saturation {...props} />\n        </div>\n        <div className=\"color-picker-controls +flex\">\n          <div className=\"color-picker-sliders\">\n            <div className=\"color-picker-slider\">\n              <Hue {...props} />\n            </div>\n            <div className=\"color-picker-slider\">\n              <Alpha {...props} />\n            </div>\n          </div>\n          <div className=\"color-picker-active\">\n            <Checkboard />\n            <div style={activeColor} className=\"color-picker-active-swatch\" />\n          </div>\n        </div>\n        <div className=\"color-picker-custom-input\">\n          <Fields {...props} onChange={onChangeComplete} />\n        </div>\n      </div>\n      <div>\n        <p className=\"color-picker-title\">{_(\"Default colors\")}</p>\n        <div className=\"color-picker-preset-colors js-color-picker-preset-colors\">\n          <PresetColors colors={defaultColors} onClick={onChangeComplete} />\n        </div>\n      </div>\n    </div>\n  );\n});\n\nclass ColorPicker extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      isVisible: false,\n    };\n\n    this.onSelectedColorChange = this.onSelectedColorChange.bind(this);\n    this.toggleVisible = this.toggleVisible.bind(this);\n  }\n\n  onSelectedColorChange(newColor) {\n    // We use our own toTinyColor because this value is a ColorPicker\n    // color value which is an object that needs unpacking. We also handle\n    // the case where a color string is passed in (just in case).\n\n    const color = toTinyColor(newColor);\n\n    // relayout call only wants a RGB String\n    this.props.onColorChange(color.toRgbString());\n  }\n\n  toggleVisible() {\n    this.setState({ isVisible: !this.state.isVisible });\n  }\n\n  render() {\n    // We use tinycolor here instead of our own toTinyColor as\n    // tinycolor handles `null` values and other weirdness we may\n    // expect from user data.\n    const selectedColor = tinycolor(this.props.selectedColor);\n    const colorText = selectedColor.toHexString();\n    const rgbString = selectedColor.toRgbString();\n\n    // We need inline style here to assign the background color\n    // dynamically.\n    const swatchStyle = { backgroundColor: rgbString };\n\n    return (\n      <div className=\"colorpicker-container js-colorpicker-container\">\n        <div className=\"colorpicker\">\n          <div\n            className=\"colorpicker-swatch +cursor-clickable js-colorpicker-swatch\"\n            style={swatchStyle}\n            onClick={this.toggleVisible}\n          />\n        </div>\n\n        <div\n          className=\"colorpicker-selected-color +hover-grey\"\n          onClick={this.toggleVisible}\n        >\n          {colorText}\n        </div>\n\n        {this.state.isVisible && (\n          <div className=\"color-picker__popover js-color-picker-popover\">\n            <div className=\"color-picker__cover\" onClick={this.toggleVisible} />\n            <CustomColorPicker\n              color={rgbString}\n              onChangeComplete={this.onSelectedColorChange}\n            />\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nColorPicker.propTypes = {\n  onColorChange: PropTypes.func.isRequired,\n  selectedColor: PropTypes.string,\n};\n\nmodule.exports = ColorPicker;\n"]}