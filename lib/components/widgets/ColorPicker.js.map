{"version":3,"sources":["../../../src/components/widgets/ColorPicker.js"],"names":["ColorPicker","props","state","selectedColor","isVisible","isAccessible","bind","onSelectedColorChange","toColorBuffer","toggleVisible","nextProps","newColor","toRgbString","setState","color","user","context","currentUser","feature_set","feature_set_id","featureName","validations","allowedColors","extractRGB","c","rgb","getColorSource","source","hex","onColorChange","tieredOnSelectedColorChange","dispatch","colorText","toHexString","swatchStyle","backgroundColor","propTypes","func","isRequired","string","contextTypes","isDefined","module","exports"],"mappings":"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","file":"ColorPicker.js","sourcesContent":["import ProBadge from \"./ProBadge\";\nimport React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport TieredColorPicker from \"./TieredColorPicker\";\nimport getFeatureValue from \"@common/utils/features\";\nimport tieredDecorator from \"@workspace/utils/tieredDecorator\";\nimport tinycolor from \"tinycolor2\";\nimport { currentUserOrNull } from \"@workspace/utils/customPropTypes\";\nimport {\n  tierColors,\n  hasInaccessibleFeature,\n} from \"@workspace/utils/checkFigureFeatureAccess\";\n\nclass ColorPicker extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      selectedColor: tinycolor(props.selectedColor),\n      isVisible: false,\n    };\n\n    this.isAccessible = this.isAccessible.bind(this);\n    this.onSelectedColorChange = this.onSelectedColorChange.bind(this);\n    this.toColorBuffer = this.toColorBuffer.bind(this);\n    this.toggleVisible = this.toggleVisible.bind(this);\n  }\n\n  componentWillReceiveProps(nextProps) {\n    const newColor = tinycolor(nextProps.selectedColor);\n    const { selectedColor } = this.state;\n\n    if (newColor.toRgbString() !== selectedColor.toRgbString()) {\n      this.setState({ selectedColor: newColor });\n    }\n  }\n\n  /**\n     * Determine if the color is accessible\n     * @param {obj} color object from tiny color\n     *\n     * @returns {bool} true if color is accessible, false otherwise\n     *\n     */\n  isAccessible(color) {\n    const user = this.context.currentUser;\n    const feature_set = user ? user.feature_set_id : null;\n    const { featureName, validations } = tierColors;\n\n    const allowedColors = getFeatureValue(feature_set, featureName);\n\n    return !hasInaccessibleFeature(color, allowedColors, validations);\n  }\n\n  toColorBuffer(color) {\n    /**\n         * @param {obj} c, an object that contains rgba field. Either it\n         * has a field called 'rgb' that contains a rgba object or it is a rgba\n         * object\n         *\n         * @returns {obj} returns c.rgb if it exits if it doesn't exist, it\n         * measn that the object itself is a rgba object\n         */\n    const extractRGB = c => c.rgb || c;\n\n    /*\n         * If it contains rgb info, we extract its rgb object, else we return\n         * its hex\n         */\n    const getColorSource = c => (c.source === \"rgb\" ? extractRGB(c) : c.hex);\n\n    return tinycolor(getColorSource(color));\n  }\n\n  /**\n     * Note: this handler cannot be used alone without being decorated by tiered\n     * decorator\n     *\n     * @param {obj} color, object from tinycolor\n     *\n     * @returns {void} calls restyle\n     */\n  onSelectedColorChange(color) {\n    this.setState({ selectedColor: color });\n\n    const newColor = color.toRgbString();\n\n    /*\n         * Call whatever onColorChange was passed in with the same value!\n         * relayout call only wants a RGB String\n         */\n    this.props.onColorChange(newColor);\n  }\n\n  toggleVisible() {\n    this.setState({ isVisible: !this.state.isVisible });\n  }\n\n  render() {\n    const { featureName } = tierColors;\n\n    const tieredOnSelectedColorChange = tieredDecorator(\n      this.onSelectedColorChange,\n      this.isAccessible,\n      featureName,\n      this.props.dispatch,\n      this.toColorBuffer\n    );\n\n    const { selectedColor } = this.state;\n\n    const colorText = selectedColor.toHexString();\n\n    /*\n         * We need inline style here to assign the background color\n         * dynamically.\n         */\n    const swatchStyle = {\n      backgroundColor: selectedColor.toRgbString(),\n    };\n\n    return (\n      <div className=\"colorpicker-container js-colorpicker-container\">\n        <div className=\"colorpicker\">\n          <div\n            ref=\"swatch\"\n            className=\"colorpicker-swatch +cursor-clickable js-colorpicker-swatch\"\n            style={swatchStyle}\n            onClick={this.toggleVisible}\n          />\n        </div>\n\n        <div\n          ref=\"selectedColorText\"\n          className=\"colorpicker-selected-color +hover-grey\"\n          onClick={this.toggleVisible}\n        >\n          {colorText}\n        </div>\n\n        <ProBadge\n          hide={this.isAccessible(selectedColor)}\n          className=\"--inline-margin\"\n        />\n\n        {this.state.isVisible ? (\n          <div className=\"color-picker__popover js-color-picker-popover\">\n            <div className=\"color-picker__cover\" onClick={this.toggleVisible} />\n            <TieredColorPicker\n              ref=\"react-color\"\n              color={selectedColor.toRgbString()}\n              onChangeComplete={tieredOnSelectedColorChange}\n            />\n          </div>\n        ) : null}\n      </div>\n    );\n  }\n}\n\nColorPicker.propTypes = {\n  onColorChange: PropTypes.func.isRequired,\n  selectedColor: PropTypes.string,\n  dispatch: PropTypes.func.isRequired,\n};\n\nColorPicker.contextTypes = {\n  currentUser: currentUserOrNull.isDefined,\n};\n\nmodule.exports = ColorPicker;\n"]}