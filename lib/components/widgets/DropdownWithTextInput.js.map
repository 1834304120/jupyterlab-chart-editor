{"version":3,"sources":["../../../src/components/widgets/DropdownWithTextInput.js"],"names":["DropdownWithTextInput","props","onSelect","bind","onUpdate","addOptionIfNotAvailable","newOptionList","options","value","state","list","intermediateTextValue","nextProps","item","customValue","setState","newValue","originalList","slice","find","o","unshift","label","clearable","minWidth","placeholder","editableClass","String","textValue","defaultProps","propTypes","array","isRequired","func","any","string","bool"],"mappings":"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","file":"DropdownWithTextInput.js","sourcesContent":["import EditableText from \"./EditableText\";\nimport React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport Dropdown from \"./Dropdown\";\nimport classnames from \"classnames\";\n\nexport default class DropdownWithTextInput extends Component {\n  constructor(props) {\n    super(props);\n    this.onSelect = this.onSelect.bind(this);\n    this.onUpdate = this.onUpdate.bind(this);\n    this.addOptionIfNotAvailable = this.addOptionIfNotAvailable.bind(this);\n    this.newOptionList = this.newOptionList.bind(this);\n\n    const { options, value } = this.props;\n\n    this.state = {\n      value,\n      list: this.newOptionList(options, value),\n      intermediateTextValue: \"\",\n    };\n  }\n\n  componentWillReceiveProps(nextProps) {\n    this.addOptionIfNotAvailable(nextProps.value);\n  }\n\n  onSelect(item) {\n    const { onUpdate, customValue } = this.props;\n    this.setState({\n      value: item,\n    });\n\n    /*\n         * Don't propagate the change when custom is selected.\n         * The text input will update propagate the change onBlur\n         */\n    if (item !== customValue) {\n      onUpdate(item);\n    } else {\n      /*\n             * Otherwise, we're in like a \"edit\" mode - user is\n             * prompted to fill in a custom value into a text box\n             */\n      this.setState({ intermediateTextValue: item });\n    }\n  }\n\n  onUpdate(newValue) {\n    this.setState({\n      value: newValue,\n    });\n    this.addOptionIfNotAvailable(newValue);\n\n    this.props.onUpdate(newValue);\n  }\n\n  // if the input doesn't exist already then add it to our list of options.\n  newOptionList(originalList, value) {\n    const list = originalList.slice();\n\n    if (!list.find(o => o.value === value)) {\n      list.unshift({\n        label: value,\n        value,\n      });\n    }\n\n    return list;\n  }\n\n  addOptionIfNotAvailable(value) {\n    this.setState({\n      list: this.newOptionList(this.state.list, value),\n    });\n  }\n\n  render() {\n    const { clearable, customValue, minWidth, placeholder } = this.props;\n    const { intermediateTextValue, value, list } = this.state;\n\n    const editableClass = classnames(\n      \"numeric-input-number\",\n      \"+editable\",\n      \"+float-left\"\n    );\n\n    if (value === customValue) {\n      return (\n        <span className=\"font-dropdown\">\n          <EditableText\n            className={editableClass}\n            text={String(intermediateTextValue)}\n            type=\"text\"\n            onChange={textValue =>\n              this.setState({ intermediateTextValue: textValue })}\n            onUpdate={this.onUpdate}\n            placeholder={placeholder}\n          />\n        </span>\n      );\n    }\n\n    return (\n      <span className=\"font-dropdown\">\n        <Dropdown\n          clearable={clearable}\n          value={value}\n          options={list}\n          onChange={this.onSelect}\n          minWidth={minWidth}\n        />\n      </span>\n    );\n  }\n}\n\nDropdownWithTextInput.defaultProps = {\n  customValue: \"custom\",\n  placeholder: \"\",\n};\n\nDropdownWithTextInput.propTypes = {\n  options: PropTypes.array.isRequired,\n  onUpdate: PropTypes.func.isRequired,\n  value: PropTypes.any,\n  minWidth: PropTypes.string,\n  clearable: PropTypes.bool,\n  customValue: PropTypes.string,\n  placeholder: PropTypes.string,\n};\n"]}