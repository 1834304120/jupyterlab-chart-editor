{"version":3,"sources":["../../../src/components/widgets/RefControl.js"],"names":["RefControl","options","onChange","placeholder","propTypes","Plotly","object","isRequired","attr","string","func","array","value","mapPlotToProps","plot","props","axis","slice","charAt","axisBase","axes","layoutKeys","keysAtPath","layoutKey","startsWith","axisIndex","test","parseInt","match","forEach","currentAxis","push","label","getAxisTitle","Axes","name2id","id2name"],"mappings":";;;;;;AAAA;;;;AACA;;AAEA;;;;AACA;;;;AACA;;;;AAEA,IAAMA,aAAa,SAAbA,UAAa;AAAA,QAAEC,OAAF,QAAEA,OAAF;AAAA,QAAWC,QAAX,QAAWA,QAAX;AAAA,QAAqBC,WAArB,QAAqBA,WAArB;AAAA,WACf;AACI,iBAASF,OADb;AAEI,kBAAUC,QAFd;AAGI,kBAAU,OAHd;AAII,qBAAaC;AAJjB,MADe;AAAA,CAAnB;;AASAH,WAAWI,SAAX,GAAuB;AACnBC,YAAQ,iBAAUC,MAAV,CAAiBC,UADN;AAEnBC,UAAM,iBAAUC,MAAV,CAAiBF,UAFJ;AAGnBL,cAAU,iBAAUQ,IAAV,CAAeH,UAHN;AAInBN,aAAS,iBAAUU,KAAV,CAAgBJ,UAJN;AAKnBJ,iBAAa,iBAAUM,MAAV,CAAiBF,UALX;AAMnBK,WAAO,iBAAUH;AANE,CAAvB;;AASA,SAASI,cAAT,CAAwBC,IAAxB,EAA8BC,KAA9B,EAAqC;AACjC;;;;AADiC,QAK1BV,MAL0B,GAKHU,KALG,CAK1BV,MAL0B;AAAA,QAKlBG,IALkB,GAKHO,KALG,CAKlBP,IALkB;AAAA,QAKZI,KALY,GAKHG,KALG,CAKZH,KALY;;AAMjC,QAAMI,OAAO,iCAAgBR,IAAhB,EAAsBS,KAAtB,CAA4B,CAAC,CAA7B,EAAgC,CAAhC,EAAmCC,MAAnC,CAA0C,CAA1C,CAAb;AACA,QAAMC,WAAcH,IAAd,SAAN;;AAEA,QAAII,OAAO,EAAX;AACA,QAAMnB,UAAU,EAAhB;;AAEA;AACA;AACA,QAAMoB,aAAaP,KAAKQ,UAAL,CAAgB,CAAC,aAAD,CAAhB,CAAnB;AAdiC;AAAA;AAAA;;AAAA;AAejC,6BAAwBD,UAAxB,8HAAoC;AAAA,gBAAzBE,SAAyB;;AAChC,gBAAIA,UAAUC,UAAV,CAAqBL,QAArB,CAAJ,EAAoC;AAChC;AACA,oBAAMM,YAAa,QAAQC,IAAR,CAAaH,SAAb,CAAD,GACdI,SAASJ,UAAUK,KAAV,CAAgB,OAAhB,EAAyB,CAAzB,CAAT,EAAsC,EAAtC,IAA4C,CAD9B,GACkC,CADpD;AAEAR,uBAAO,mBAAOK,SAAP,EAAkBF,SAAlB,EAA6BH,IAA7B,CAAP;AACH;AACJ;AAtBgC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAwBjCA,SAAKS,OAAL,CAAa,UAACC,WAAD,EAAiB;AAC1B7B,gBAAQ8B,IAAR,CAAa;AACTC,mBAAOlB,KAAKmB,YAAL,CAAkBH,WAAlB,CADE;AAETlB,mBAAOP,OAAO6B,IAAP,CAAYC,OAAZ,CAAoBL,WAApB;AAFE,SAAb;AAIH,KALD;;AAOA,QAAM3B,cAAcW,KAAKmB,YAAL,CAAkB5B,OAAO6B,IAAP,CAAYE,OAAZ,CAAoBxB,KAApB,CAAlB,CAApB;;AAEA,WAAO,EAACX,gBAAD,EAAUE,wBAAV,EAAP;AACH;;kBAEc,oCAAqBU,cAArB,EAAqCb,UAArC,C","file":"RefControl.js","sourcesContent":["import React, {PropTypes} from 'react';\nimport {insert} from 'ramda';\n\nimport Dropdown from '@workspace/components/widgets/Dropdown';\nimport connectWorkspacePlot from '@workspace/utils/connectWorkspacePlot';\nimport {splitAttrString} from '@workspace/utils/stylePanel';\n\nconst RefControl = ({options, onChange, placeholder}) => (\n    <Dropdown\n        options={options}\n        onChange={onChange}\n        minWidth={'125px'}\n        placeholder={placeholder}\n    />\n);\n\nRefControl.propTypes = {\n    Plotly: PropTypes.object.isRequired,\n    attr: PropTypes.string.isRequired,\n    onChange: PropTypes.func.isRequired,\n    options: PropTypes.array.isRequired,\n    placeholder: PropTypes.string.isRequired,\n    value: PropTypes.string\n};\n\nfunction mapPlotToProps(plot, props) {\n    /*\n     * splitAttrString returns a list like: ['layout', 'shapes', 0, 'xref'],\n     * using the first character, determine which axis to build dropdown for\n     */\n    const {Plotly, attr, value} = props;\n    const axis = splitAttrString(attr).slice(-1)[0].charAt(0);\n    const axisBase = `${axis}axis`;\n\n    let axes = [];\n    const options = [];\n\n    // Extract and sort axes as they are not always ordered in layout\n    // Axes will be an ordered array of axes names, i.e. xaxis, xaxis2, etc.\n    const layoutKeys = plot.keysAtPath(['_fullLayout']);\n    for (const layoutKey of layoutKeys) {\n        if (layoutKey.startsWith(axisBase)) {\n            // Check if there are no digits in axisName, E.g., 'xaxis'.\n            const axisIndex = (/[\\d]+/.test(layoutKey)) ?\n                parseInt(layoutKey.match(/[\\d]+/)[0], 10) - 1 : 0;\n            axes = insert(axisIndex, layoutKey, axes);\n        }\n    }\n\n    axes.forEach((currentAxis) => {\n        options.push({\n            label: plot.getAxisTitle(currentAxis),\n            value: Plotly.Axes.name2id(currentAxis)\n        });\n    });\n\n    const placeholder = plot.getAxisTitle(Plotly.Axes.id2name(value));\n\n    return {options, placeholder};\n}\n\nexport default connectWorkspacePlot(mapPlotToProps)(RefControl);\n"]}