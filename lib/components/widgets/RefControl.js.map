{"version":3,"sources":["../../../src/components/widgets/RefControl.js"],"names":["RefControl","options","onChange","placeholder","propTypes","Plotly","object","isRequired","attr","string","func","array","value","mapPlotToProps","plot","props","axis","slice","charAt","axisBase","axes","layoutKeys","keysAtPath","layoutKey","startsWith","axisIndex","test","parseInt","match","forEach","push","label","getAxisTitle","currentAxis","Axes","name2id","id2name"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;AAEA;;;;AACA;;;;AACA;;;;AAEA,IAAMA,aAAa,SAAbA,UAAa;AAAA,MAAGC,OAAH,QAAGA,OAAH;AAAA,MAAYC,QAAZ,QAAYA,QAAZ;AAAA,MAAsBC,WAAtB,QAAsBA,WAAtB;AAAA,SACjB;AACE,aAASF,OADX;AAEE,cAAUC,QAFZ;AAGE,cAAU,OAHZ;AAIE,iBAAaC;AAJf,IADiB;AAAA,CAAnB;;AASAH,WAAWI,SAAX,GAAuB;AACrBC,UAAQ,oBAAUC,MAAV,CAAiBC,UADJ;AAErBC,QAAM,oBAAUC,MAAV,CAAiBF,UAFF;AAGrBL,YAAU,oBAAUQ,IAAV,CAAeH,UAHJ;AAIrBN,WAAS,oBAAUU,KAAV,CAAgBJ,UAJJ;AAKrBJ,eAAa,oBAAUM,MAAV,CAAiBF,UALT;AAMrBK,SAAO,oBAAUH;AANI,CAAvB;;AASA,SAASI,cAAT,CAAwBC,IAAxB,EAA8BC,KAA9B,EAAqC;AACnC;;;;AADmC,MAK3BV,MAL2B,GAKHU,KALG,CAK3BV,MAL2B;AAAA,MAKnBG,IALmB,GAKHO,KALG,CAKnBP,IALmB;AAAA,MAKbI,KALa,GAKHG,KALG,CAKbH,KALa;;AAMnC,MAAMI,OAAO,iCAAgBR,IAAhB,EACVS,KADU,CACJ,CAAC,CADG,EACA,CADA,EAEVC,MAFU,CAEH,CAFG,CAAb;AAGA,MAAMC,WAAcH,IAAd,SAAN;;AAEA,MAAII,OAAO,EAAX;AACA,MAAMnB,UAAU,EAAhB;;AAEA;AACA;AACA,MAAMoB,aAAaP,KAAKQ,UAAL,CAAgB,CAAC,aAAD,CAAhB,CAAnB;AAhBmC;AAAA;AAAA;;AAAA;AAiBnC,yBAAwBD,UAAxB,8HAAoC;AAAA,UAAzBE,SAAyB;;AAClC,UAAIA,UAAUC,UAAV,CAAqBL,QAArB,CAAJ,EAAoC;AAClC;AACA,YAAMM,YAAY,QAAQC,IAAR,CAAaH,SAAb,IACdI,SAASJ,UAAUK,KAAV,CAAgB,OAAhB,EAAyB,CAAzB,CAAT,EAAsC,EAAtC,IAA4C,CAD9B,GAEd,CAFJ;AAGAR,eAAO,mBAAOK,SAAP,EAAkBF,SAAlB,EAA6BH,IAA7B,CAAP;AACD;AACF;AAzBkC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AA2BnCA,OAAKS,OAAL,CAAa,uBAAe;AAC1B5B,YAAQ6B,IAAR,CAAa;AACXC,aAAOjB,KAAKkB,YAAL,CAAkBC,WAAlB,CADI;AAEXrB,aAAOP,OAAO6B,IAAP,CAAYC,OAAZ,CAAoBF,WAApB;AAFI,KAAb;AAID,GALD;;AAOA,MAAM9B,cAAcW,KAAKkB,YAAL,CAAkB3B,OAAO6B,IAAP,CAAYE,OAAZ,CAAoBxB,KAApB,CAAlB,CAApB;;AAEA,SAAO,EAAEX,gBAAF,EAAWE,wBAAX,EAAP;AACD;;kBAEc,oCAAqBU,cAArB,EAAqCb,UAArC,C","file":"RefControl.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { insert } from \"ramda\";\n\nimport Dropdown from \"./Dropdown\";\nimport connectWorkspacePlot from \"@workspace/utils/connectWorkspacePlot\";\nimport { splitAttrString } from \"@workspace/utils/stylePanel\";\n\nconst RefControl = ({ options, onChange, placeholder }) => (\n  <Dropdown\n    options={options}\n    onChange={onChange}\n    minWidth={\"125px\"}\n    placeholder={placeholder}\n  />\n);\n\nRefControl.propTypes = {\n  Plotly: PropTypes.object.isRequired,\n  attr: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n  options: PropTypes.array.isRequired,\n  placeholder: PropTypes.string.isRequired,\n  value: PropTypes.string,\n};\n\nfunction mapPlotToProps(plot, props) {\n  /*\n     * splitAttrString returns a list like: ['layout', 'shapes', 0, 'xref'],\n     * using the first character, determine which axis to build dropdown for\n     */\n  const { Plotly, attr, value } = props;\n  const axis = splitAttrString(attr)\n    .slice(-1)[0]\n    .charAt(0);\n  const axisBase = `${axis}axis`;\n\n  let axes = [];\n  const options = [];\n\n  // Extract and sort axes as they are not always ordered in layout\n  // Axes will be an ordered array of axes names, i.e. xaxis, xaxis2, etc.\n  const layoutKeys = plot.keysAtPath([\"_fullLayout\"]);\n  for (const layoutKey of layoutKeys) {\n    if (layoutKey.startsWith(axisBase)) {\n      // Check if there are no digits in axisName, E.g., 'xaxis'.\n      const axisIndex = /[\\d]+/.test(layoutKey)\n        ? parseInt(layoutKey.match(/[\\d]+/)[0], 10) - 1\n        : 0;\n      axes = insert(axisIndex, layoutKey, axes);\n    }\n  }\n\n  axes.forEach(currentAxis => {\n    options.push({\n      label: plot.getAxisTitle(currentAxis),\n      value: Plotly.Axes.name2id(currentAxis),\n    });\n  });\n\n  const placeholder = plot.getAxisTitle(Plotly.Axes.id2name(value));\n\n  return { options, placeholder };\n}\n\nexport default connectWorkspacePlot(mapPlotToProps)(RefControl);\n"]}