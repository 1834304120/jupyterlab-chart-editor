{"version":3,"sources":["../../../src/components/widgets/RadioItems.js"],"names":["RadioItems","props","state","activeOption","uid","handleChange","bind","renderOption","nextProps","setState","e","newActiveOption","target","value","toString","onOptionChange","optionName","label","icon","disabled","defaultActive","labelWrapperClass","Boolean","contentClass","onChange","optionClass","radioClassName","orientation","optionList","options","map","stylingClass","defaultProps","propTypes","arrayOf","shape","oneOfType","string","bool","number","isRequired","func","oneOf","module","exports"],"mappings":"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","file":"RadioItems.js","sourcesContent":["import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport classnames from \"classnames\";\nimport hat from \"hat\";\n\n/**\n *\n * Basic html radio group - returns onOptionChange\n * (value of the radio input that is clicked)\n *\n * Options labels and values must be unique to the component\n * ActiveOption identifies the default checked option and\n * must be equal to the corresponding value\n *\n * Icons when present will replace the labels and circular radio buttons\n *\n * Can be displayed vertically (orientation: 'vertical') or\n * horizontally (orientation: 'horizontal')\n */\n\nclass RadioItems extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      activeOption: this.props.activeOption,\n      uid: hat(),\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.renderOption = this.renderOption.bind(this);\n  }\n\n  componentWillReceiveProps(nextProps) {\n    // Reset the value to the graph's actual value\n    if (nextProps.activeOption !== this.state.activeOption) {\n      this.setState({\n        activeOption: nextProps.activeOption,\n      });\n    }\n  }\n\n  handleChange(e) {\n    let newActiveOption = e.target.value;\n\n    // prevent action when clicking on the active item twice\n    if (newActiveOption === this.state.activeOption) {\n      return;\n    }\n\n    // Preserve Type\n    if (newActiveOption === \"true\") {\n      newActiveOption = true;\n    } else if (newActiveOption === \"false\") {\n      newActiveOption = false;\n    } else if (typeof newActiveOption === \"number\") {\n      newActiveOption = newActiveOption.toString();\n    }\n\n    this.setState({ activeOption: newActiveOption });\n    this.props.onOptionChange(newActiveOption);\n  }\n\n  renderOption(optionName) {\n    const { label, value, icon, disabled } = optionName;\n    const defaultActive = this.state.activeOption === value;\n\n    const labelWrapperClass = classnames({\n      \"radio-item\": true,\n      \"js-radio-item\": true,\n      icon: Boolean(icon),\n    });\n\n    const contentClass = classnames(\n      {\n        \"radio-item__content__icon\": Boolean(icon),\n        \"radio-item__content\": Boolean(!icon),\n      },\n      icon\n    );\n\n    // noop the onChange handler if the option is disabled\n    const onChange = disabled ? () => {} : this.handleChange;\n\n    const optionClass = classnames({\n      [this.props.radioClassName]: true,\n      \"+is-disabled\": disabled,\n      \"+text-center\": this.props.orientation === \"horizontal\",\n      \"+inline-block\": this.props.orientation === \"horizontal\",\n      \"+text-left\": this.props.orientation === \"vertical\",\n    });\n\n    return (\n      <div className={optionClass} key={value}>\n        <label className={labelWrapperClass}>\n          <input\n            type=\"radio\"\n            className=\"radio-item__input\"\n            checked={defaultActive}\n            onChange={onChange}\n            name={this.state.uid}\n            value={value}\n          />\n\n          <div className={contentClass} />\n        </label>\n\n        {label ? <span className=\"radio-item__title\">{label}</span> : null}\n      </div>\n    );\n  }\n\n  render() {\n    const optionList = this.props.options.map(this.renderOption);\n\n    return <div className={this.props.stylingClass}>{optionList}</div>;\n  }\n}\n\nRadioItems.defaultProps = {\n  radioClassName: \"+soft-quarter\",\n  orientation: \"horizontal\",\n};\n\nRadioItems.propTypes = {\n  options: PropTypes.arrayOf(\n    PropTypes.shape({\n      value: PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.bool,\n        PropTypes.number,\n      ]).isRequired,\n      label: PropTypes.string,\n      icon: PropTypes.string,\n      disabled: PropTypes.bool,\n    })\n  ),\n  onOptionChange: PropTypes.func.isRequired,\n  activeOption: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.bool,\n    PropTypes.number,\n  ]),\n  stylingClass: PropTypes.string,\n  radioClassName: PropTypes.string,\n  orientation: PropTypes.oneOf([\"vertical\", \"horizontal\"]),\n};\n\nmodule.exports = RadioItems;\n"]}