{"version":3,"sources":["../../src/components/DropdownWithTextInput.js"],"names":["DropdownWithTextInput","props","onSelect","bind","onUpdate","addOptionIfNotAvailable","newOptionList","options","value","state","list","intermediateTextValue","nextProps","item","customValue","setState","newValue","originalList","slice","find","o","unshift","label","clearable","minWidth","placeholder","editableClass","String","textValue","defaultProps","propTypes","PropTypes","array","isRequired","func","any","string","bool"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;;;;;IAEqBA,qB;;;AACjB,mCAAYC,KAAZ,EAAmB;AAAA;;AAAA,kJACTA,KADS;;AAEf,cAAKC,QAAL,GAAgB,MAAKA,QAAL,CAAcC,IAAd,OAAhB;AACA,cAAKC,QAAL,GAAgB,MAAKA,QAAL,CAAcD,IAAd,OAAhB;AACA,cAAKE,uBAAL,GAA+B,MAAKA,uBAAL,CAA6BF,IAA7B,OAA/B;AACA,cAAKG,aAAL,GAAqB,MAAKA,aAAL,CAAmBH,IAAnB,OAArB;;AALe,0BAOU,MAAKF,KAPf;AAAA,YAORM,OAPQ,eAORA,OAPQ;AAAA,YAOCC,KAPD,eAOCA,KAPD;;;AASf,cAAKC,KAAL,GAAa;AACTD,wBADS;AAETE,kBAAM,MAAKJ,aAAL,CAAmBC,OAAnB,EAA4BC,KAA5B,CAFG;AAGTG,mCAAuB;AAHd,SAAb;;AATe;AAelB;;;;kDAEyBC,S,EAAW;AACjC,iBAAKP,uBAAL,CAA6BO,UAAUJ,KAAvC;AACH;;;iCAEQK,I,EAAM;AAAA,yBACqB,KAAKZ,KAD1B;AAAA,gBACJG,QADI,UACJA,QADI;AAAA,gBACMU,WADN,UACMA,WADN;;AAEX,iBAAKC,QAAL,CAAc;AACVP,uBAAOK;AADG,aAAd;;AAIA;;;;AAIA,gBAAIA,SAASC,WAAb,EAA0B;AACtBV,yBAASS,IAAT;AACH,aAFD,MAEO;AACH;;;;AAIA,qBAAKE,QAAL,CAAc,EAACJ,uBAAuBE,IAAxB,EAAd;AACH;AACJ;;;iCAEQG,Q,EAAU;AACf,iBAAKD,QAAL,CAAc;AACVP,uBAAOQ;AADG,aAAd;AAGA,iBAAKX,uBAAL,CAA6BW,QAA7B;;AAEA,iBAAKf,KAAL,CAAWG,QAAX,CAAoBY,QAApB;AACH;;AAED;;;;sCACcC,Y,EAAcT,K,EAAO;AAC/B,gBAAME,OAAOO,aAAaC,KAAb,EAAb;;AAEA,gBAAI,CAACR,KAAKS,IAAL,CAAU;AAAA,uBAAKC,EAAEZ,KAAF,KAAYA,KAAjB;AAAA,aAAV,CAAL,EAAwC;AACpCE,qBAAKW,OAAL,CAAa;AACTC,2BAAOd,KADE;AAETA;AAFS,iBAAb;AAIH;;AAED,mBAAOE,IAAP;AACH;;;gDAEuBF,K,EAAO;AAC3B,iBAAKO,QAAL,CAAc;AACVL,sBAAM,KAAKJ,aAAL,CAAmB,KAAKG,KAAL,CAAWC,IAA9B,EAAoCF,KAApC;AADI,aAAd;AAGH;;;iCAEQ;AAAA;;AAAA,0BACmD,KAAKP,KADxD;AAAA,gBACEsB,SADF,WACEA,SADF;AAAA,gBACaT,WADb,WACaA,WADb;AAAA,gBAC0BU,QAD1B,WAC0BA,QAD1B;AAAA,gBACoCC,WADpC,WACoCA,WADpC;AAAA,yBAEwC,KAAKhB,KAF7C;AAAA,gBAEEE,qBAFF,UAEEA,qBAFF;AAAA,gBAEyBH,KAFzB,UAEyBA,KAFzB;AAAA,gBAEgCE,IAFhC,UAEgCA,IAFhC;;;AAIL,gBAAMgB,gBAAgB,0BAClB,sBADkB,EAElB,WAFkB,EAGlB,aAHkB,CAAtB;;AAMA,gBAAIlB,UAAUM,WAAd,EAA2B;AACvB,uBACE;AAAA;AAAA,sBAAM,WAAU,eAAhB;AACI;AACI,mCAAWY,aADf;AAEI,8BAAMC,OAAOhB,qBAAP,CAFV;AAGI,8BAAK,MAHT;AAII,kCAAU;AAAA,mCACN,OAAKI,QAAL,CAAc,EAACJ,uBAAuBiB,SAAxB,EAAd,CADM;AAAA,yBAJd;AAOI,kCAAU,KAAKxB,QAPnB;AAQI,qCAAaqB;AARjB;AADJ,iBADF;AAcH;;AAED,mBACI;AAAA;AAAA,kBAAM,WAAU,eAAhB;AACI;AACI,yBAAI,UADR;AAEI,+BAAWF,SAFf;AAGI,2BAAOf,KAHX;AAII,6BAASE,IAJb;AAKI,8BAAU,KAAKR,QALnB;AAMI,8BAAUsB;AANd;AADJ,aADJ;AAYH;;;;;;kBA/GgBxB,qB;;;AAkHrBA,sBAAsB6B,YAAtB,GAAqC;AACjCf,iBAAa,QADoB;AAEjCW,iBAAa;AAFoB,CAArC;;AAKAzB,sBAAsB8B,SAAtB,GAAkC;AAC9BvB,aAAS,gBAAMwB,SAAN,CAAgBC,KAAhB,CAAsBC,UADD;AAE9B7B,cAAU,iBAAU8B,IAAV,CAAeD,UAFK;AAG9BzB,WAAO,gBAAMuB,SAAN,CAAgBI,GAHO;AAI9BX,cAAU,gBAAMO,SAAN,CAAgBK,MAJI;AAK9Bb,eAAW,gBAAMQ,SAAN,CAAgBM,IALG;AAM9BvB,iBAAa,gBAAMiB,SAAN,CAAgBK,MANC;AAO9BX,iBAAa,gBAAMM,SAAN,CAAgBK;AAPC,CAAlC","file":"DropdownWithTextInput.js","sourcesContent":["import EditableText from '@workspace/components/widgets/EditableText';\nimport React, {Component, PropTypes} from 'react';\nimport Dropdown from '@workspace/components/widgets/Dropdown';\nimport classnames from 'classnames';\n\nexport default class DropdownWithTextInput extends Component {\n    constructor(props) {\n        super(props);\n        this.onSelect = this.onSelect.bind(this);\n        this.onUpdate = this.onUpdate.bind(this);\n        this.addOptionIfNotAvailable = this.addOptionIfNotAvailable.bind(this);\n        this.newOptionList = this.newOptionList.bind(this);\n\n        const {options, value} = this.props;\n\n        this.state = {\n            value,\n            list: this.newOptionList(options, value),\n            intermediateTextValue: ''\n        };\n\n    }\n\n    componentWillReceiveProps(nextProps) {\n        this.addOptionIfNotAvailable(nextProps.value);\n    }\n\n    onSelect(item) {\n        const {onUpdate, customValue} = this.props;\n        this.setState({\n            value: item\n        });\n\n        /*\n         * Don't propagate the change when custom is selected.\n         * The text input will update propagate the change onBlur\n         */\n        if (item !== customValue) {\n            onUpdate(item);\n        } else {\n            /*\n             * Otherwise, we're in like a \"edit\" mode - user is\n             * prompted to fill in a custom value into a text box\n             */\n            this.setState({intermediateTextValue: item});\n        }\n    }\n\n    onUpdate(newValue) {\n        this.setState({\n            value: newValue\n        });\n        this.addOptionIfNotAvailable(newValue);\n\n        this.props.onUpdate(newValue);\n    }\n\n    // if the input doesn't exist already then add it to our list of options.\n    newOptionList(originalList, value) {\n        const list = originalList.slice();\n\n        if (!list.find(o => o.value === value)) {\n            list.unshift({\n                label: value,\n                value\n            });\n        }\n\n        return list;\n    }\n\n    addOptionIfNotAvailable(value) {\n        this.setState({\n            list: this.newOptionList(this.state.list, value)\n        });\n    }\n\n    render() {\n        const {clearable, customValue, minWidth, placeholder} = this.props;\n        const {intermediateTextValue, value, list} = this.state;\n\n        const editableClass = classnames(\n            'numeric-input-number',\n            '+editable',\n            '+float-left'\n        );\n\n        if (value === customValue) {\n            return (\n              <span className=\"font-dropdown\">\n                  <EditableText\n                      className={editableClass}\n                      text={String(intermediateTextValue)}\n                      type=\"text\"\n                      onChange={textValue =>\n                          this.setState({intermediateTextValue: textValue})\n                      }\n                      onUpdate={this.onUpdate}\n                      placeholder={placeholder}\n                  />\n              </span>\n          );\n        }\n\n        return (\n            <span className=\"font-dropdown\">\n                <Dropdown\n                    ref=\"dropdown\"\n                    clearable={clearable}\n                    value={value}\n                    options={list}\n                    onChange={this.onSelect}\n                    minWidth={minWidth}\n                />\n            </span>\n        );\n    }\n}\n\nDropdownWithTextInput.defaultProps = {\n    customValue: 'custom',\n    placeholder: ''\n};\n\nDropdownWithTextInput.propTypes = {\n    options: React.PropTypes.array.isRequired,\n    onUpdate: PropTypes.func.isRequired,\n    value: React.PropTypes.any,\n    minWidth: React.PropTypes.string,\n    clearable: React.PropTypes.bool,\n    customValue: React.PropTypes.string,\n    placeholder: React.PropTypes.string\n};\n"]}