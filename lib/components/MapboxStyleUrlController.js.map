{"version":3,"sources":["../../src/components/MapboxStyleUrlController.js"],"names":["PRESET_STYLES","label","value","STYLE_OPTIONS","VALUE_TYPES","PRESET","MAPBOX_STUDIO","MAPBOX_ATLAS","JSON","STATUS","LOADING","BLANK","WARNING","DONE","menuItem","content","menuItemWarning","MAPBOX_ATLAS_ERROR_MESSAGES","INVALID_JSON","url","FAILED_REQUEST","errorMessage","parse","protocol","DOWNLOAD","FAILED_PARSING","EXPECTED_URL","UNKNOWN","JsonEditor","props","state","invalidJSON","setValidJSON","bind","setState","nextProps","jsonString","jsonObject","e","console","error","applyChanges","textareaStyle","textareaClass","stringify","target","MapboxStyleUrlController","defaultValueType","defaultAtlasUrl","get","valueType","values","status","atlasStyleURL","changeValueType","setValue","updatePlot","setAtlasURL","downloadAtlasJSON","viewJson","setValueFromProps","style","find","option","isNil","newValueType","Object","assign","then","stateUpdate","styleJSON","catch","ERROR","contains","message","keys","dispatch","accesstoken","propTypes","object","isRequired","func","MapboxStyleUrl","selectedToken","onTokenChange","renderOptions","help","header","title","tooltip","viewJsonButton","buttonText","onChange","newValue","headerText","placeholder","onSubmit","textAreaValue","buttonClass","join","token","oneOf","shape","string","module","exports"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;AACA;;;;AACA;;AACA;;AACA;;;;AACA;;;;AACA;;;;AACA;;AACA;;AACA;;;;;;;;;;;;;;AAEA,IAAMA,gBAAgB,CAClB,EAACC,OAAO,OAAR,EAAiBC,OAAO,OAAxB,EADkB,EAElB,EAACD,OAAO,UAAR,EAAoBC,OAAO,UAA3B,EAFkB,EAGlB,EAACD,OAAO,OAAR,EAAiBC,OAAO,OAAxB,EAHkB,EAIlB,EAACD,OAAO,MAAR,EAAgBC,OAAO,MAAvB,EAJkB,EAKlB,EAACD,OAAO,WAAR,EAAqBC,OAAO,WAA5B,EALkB,EAMlB,EAACD,OAAO,wBAAR,EAAkCC,OAAO,mBAAzC,EANkB,CAAtB;;AASA,IAAMC,gBAAgB,CAClB,EAACF,OAAO,eAAR,EAAyBC,OAAO,QAAhC,EADkB,EAElB,EAACD,OAAO,qBAAR,EAA+BC,OAAO,eAAtC,EAFkB,EAGlB,EAACD,OAAO,oBAAR,EAA8BC,OAAO,cAArC,EAHkB,EAIlB,EAACD,OAAO,aAAR,EAAuBC,OAAO,MAA9B,EAJkB,CAAtB;;AAOA,IAAME,cAAc;AAChBC,YAAQ,QADQ;AAEhBC,mBAAe,eAFC;AAGhBC,kBAAc,cAHE;AAIhBC,UAAM;AAJU,CAApB;;AAOA,IAAMC,SAAS;AACXC,aAAS,SADE;AAEXC,WAAO,OAFI;AAGXC,aAAS,SAHE;AAIXC,UAAM;AAJK,CAAf;;AAOA,IAAMC,WAAW,SAAXA,QAAW,CAACC,OAAD,EAAa;AAC1B,WACI;AAAA;AAAA,UAAK,WAAU,WAAf;AACI;AAAA;AAAA,cAAK,WAAU,qBAAf;AACKA;AADL;AADJ,KADJ;AAOH,CARD;;AAUA,IAAMC,kBAAkB,SAAlBA,eAAkB,CAACD,OAAD,EAAa;AACjC,WACI;AAAA;AAAA,UAAK,WAAU,WAAf;AACI;AAAA;AAAA,cAAK,WAAU,qBAAf;AACI;AAAA;AAAA,kBAAM,WAAU,8BAAhB;AACKA;AADL;AADJ;AADJ,KADJ;AASH,CAVD;;AAYA,IAAME,8BAA8B;AAChCC,kBAAc;AAAA,eACVF,gBACI;AAAA;AAAA;AACG,iDAAsBE,YADzB;AAEE;AAAA;AAAA,kBAAG,MAAMC,GAAT,EAAc,QAAO,QAArB;AAA+BA;AAA/B;AAFF,SADJ,CADU;AAAA,KADkB;;AAUhCC,oBAAgB,6BAAO;AACnB,YAAIC,qBAAJ;AACA,YAAI,cAAIC,KAAJ,CAAUH,GAAV,EAAeI,QAAf,KAA4B,OAAhC,EAAyC;AACrCF,2BACIL,gBACI;AAAA;AAAA;AACK,qDAAsBI,cAD3B;AAEI;AAAA;AAAA,sBAAG,MAAK,kCAAR,EAA2C,QAAO,QAAlD;AAAA;AAAA,iBAFJ;AAAA;AAAA,aADJ,CADJ;AAUH,SAXD,MAWO;AACHC,2BACIL,gBACI;AAAA;AAAA;AACK,qDAAsBQ,QAD3B;AAEI;AAAA;AAAA,sBAAG,MAAML,GAAT,EAAc,QAAO,QAArB;AAA+BA;AAA/B,iBAFJ;AAGK,6BAAE,gDAAF;AAHL,aADJ,CADJ;AASH;AACD,eAAOE,YAAP;AACH,KAnC+B;;AAqChCI,oBAAgB;AAAA,eACZT,gBACM;AAAA;AAAA;AACK,iDAAsBS,cAD3B;AAEI;AAAA;AAAA,kBAAG,MAAMN,GAAT,EAAc,QAAO,QAArB;AAA+BA;AAA/B,aAFJ;AAAA;AAGK,iDAAsBO,YAH3B;AAAA;AAAA,SADN,CADY;AAAA,KArCgB;;AAgDhCC,aAAS;AAAA,eACLX,gBACI;AAAA;AAAA;AACG,iDAAsBW;AADzB,SADJ,CADK;AAAA;AAhDuB,CAApC;;AAyDA;;IACMC,U;;;AACF,wBAAYC,KAAZ,EAAmB;AAAA;;AAAA,4HACTA,KADS;;AAEf,cAAKC,KAAL,GAAa;AACT5B,mBAAO,IADE;AAET6B,yBAAa;AAFJ,SAAb;AAIA,cAAKC,YAAL,GAAoB,MAAKA,YAAL,CAAkBC,IAAlB,OAApB;AANe;AAOlB;;;;6CAEoB;AACjB,iBAAKC,QAAL,CAAc,EAAChC,OAAO,KAAK2B,KAAL,CAAW3B,KAAnB,EAAd;AACH;;;kDAEyBiC,S,EAAW;AACjC,iBAAKD,QAAL,CAAc,EAAChC,OAAOiC,UAAUjC,KAAlB,EAAd;AACH;;;qCAEYkC,U,EAAY;AACrB,iBAAKF,QAAL,CAAc,EAACH,aAAa,KAAd,EAAd;AACA,gBAAI;AACA,oBAAMM,aAAa7B,KAAKc,KAAL,CAAWc,UAAX,CAAnB;AACA,qBAAKF,QAAL,CAAc,EAAChC,OAAOmC,UAAR,EAAd;AACH,aAHD,CAGE,OAAOC,CAAP,EAAU;AACRC,wBAAQC,KAAR,CAAcF,CAAd;AACA,qBAAKJ,QAAL,CAAc,EAACH,aAAa,IAAd,EAAd;AACH;AACJ;;;iCAES;AAAA;;AAAA,yBAKF,KAAKF,KALH;AAAA,gBAEFY,YAFE,UAEFA,YAFE;AAAA,gBAGFC,aAHE,UAGFA,aAHE;AAAA,gBAIFC,aAJE,UAIFA,aAJE;AAAA,gBAMCzC,KAND,GAMU,KAAK4B,KANf,CAMC5B,KAND;;;AAQN,mBACI;AAAA;AAAA;AACKY,yBACO;AACI,2BAAO4B,aADX;AAEI,+BAAWC,aAFf;AAGI,2BAAOnC,KAAKoC,SAAL,CAAe1C,KAAf,EAAsB,IAAtB,EAA4B,CAA5B,CAHX;AAII,4BAAQ;AAAA,+BAAK,OAAK8B,YAAL,CAAkBM,EAAEO,MAAF,CAAS3C,KAA3B,CAAL;AAAA;AAJZ,kBADP,CADL;AAUK,qBAAK4B,KAAL,CAAWC,WAAX,GACGjB,SACI;AAAA;AAAA,sBAAM,WAAU,2CAAhB;AACK,iCAAE,cAAF;AADL,iBADJ,CADH,GAOG,IAjBR;AAoBKA,yBACG;AAAA;AAAA;AACI,mCAAU,mDADd;AAEI,iCAAS;AAAA,mCAAM2B,aAAa,OAAKX,KAAL,CAAW5B,KAAxB,CAAN;AAAA;AAFb;AAIK,iCAAE,eAAF;AAJL,iBADH;AApBL,aADJ;AAgCH;;;;;;IAIC4C,wB;;;AACF,sCAAYjB,KAAZ,EAAmB;AAAA;;AAAA;;AAAA,yJACTA,KADS;;AAGf,YAAIkB,yBAAJ;AACA,YAAMC,kBAAkB,sBAAYC,GAAZ,CAAgB,uCAAhB,CAAxB;AACA,YAAID,oBAAoB,EAAxB,EAA4B;AACxBD,+BAAmB3C,YAAYG,YAA/B;AACH,SAFD,MAEO;AACHwC,+BAAmB3C,YAAYC,MAA/B;AACH;;AAED,eAAKyB,KAAL,GAAa;AACToB,uBAAWH,gBADF;;AAGT;;;;AAIAI,4DACK/C,YAAYC,MADjB,EAC0B,IAD1B,4BAEKD,YAAYE,aAFjB,EAEiC,IAFjC,4BAGKF,YAAYG,YAHjB,EAGgC,IAHhC,4BAIKH,YAAYI,IAJjB,EAIwB,IAJxB,WAPS;AAaT4C,oBAAQ3C,OAAOE,KAbN;AAcT6B,mBAAO,IAdE;AAeTa,2BAAeL;AAfN,SAAb;;AAkBA,eAAKM,eAAL,GAAuB,OAAKA,eAAL,CAAqBrB,IAArB,QAAvB;AACA,eAAKsB,QAAL,GAAgB,OAAKA,QAAL,CAActB,IAAd,QAAhB;AACA,eAAKuB,UAAL,GAAkB,OAAKA,UAAL,CAAgBvB,IAAhB,QAAlB;AACA,eAAKwB,WAAL,GAAmB,OAAKA,WAAL,CAAiBxB,IAAjB,QAAnB;AACA,eAAKyB,iBAAL,GAAyB,OAAKA,iBAAL,CAAuBzB,IAAvB,QAAzB;AACA,eAAK0B,QAAL,GAAgB,OAAKA,QAAL,CAAc1B,IAAd,QAAhB;AAlCe;AAmClB;;;;6CAEoB;AACjB,iBAAK2B,iBAAL,CAAuB,KAAK/B,KAA5B;AACH;;;kDAEyBM,S,EAAW;AAAA,yBACL,KAAKL,KADA;AAAA,gBAC1BqB,MAD0B,UAC1BA,MAD0B;AAAA,gBAClBD,SADkB,UAClBA,SADkB;;AAEjC,gBAAI,CAACC,OAAOD,SAAP,CAAD,IAAuB,KAAKrB,KAAL,CAAW3B,KAAX,CAAiB2D,KAAjB,KAA2B1B,UAAUjC,KAAV,CAAgB2D,KAAtE,EAA8E;AAC1E,qBAAKD,iBAAL,CAAuBzB,SAAvB;AACH;AACJ;;;0CAEiBN,K,EAAO;AACrB,gBAAM3B,QAAQ,KAAK2B,KAAL,CAAW3B,KAAX,CAAiB2D,KAA/B;AADqB,gBAEdV,MAFc,GAEJ,KAAKrB,KAFD,CAEdqB,MAFc;;AAGrB,gBAAID,kBAAJ;AACA,gBAAIlD,cAAc8D,IAAd,CAAmB;AAAA,uBAAUC,OAAO7D,KAAP,KAAiBA,KAA3B;AAAA,aAAnB,CAAJ,EAA0D;AACtDiD,uBAAO/C,YAAYC,MAAnB,IAA6BH,KAA7B;AACAgD,4BAAY9C,YAAYC,MAAxB;AACH;;AAED;;;;AALA,iBASK,IAAI,OAAOH,KAAP,KAAiB,QAArB,EAA+B;AAChCiD,2BAAO/C,YAAYE,aAAnB,IAAoCJ,KAApC;AACAgD,gCAAY9C,YAAYE,aAAxB;AACH;;AAED;;;;;;;AALK,qBAYA,IACD,gBAAE0D,KAAF,CAAQ9D,KAAR,KACA,sBAAY+C,GAAZ,CAAgB,uCAAhB,CAFC,EAGH;AACEC,oCAAY9C,YAAYG,YAAxB;AACH;;AAED;;;AAPK,yBAUA;AACD2C,wCAAY9C,YAAYI,IAAxB;AACA2C,mCAAO/C,YAAYI,IAAnB,IAA2B2C,OAAO/C,YAAYG,YAAnB,IAAmCL,KAA9D;AACH;;AAED,iBAAKgC,QAAL,CAAc,EAACgB,oBAAD,EAAYC,cAAZ,EAAd;AAEH;;;wCAEec,Y,EAAc;AAAA,0BACE,KAAKnC,KADP;AAAA,gBACnBqB,MADmB,WACnBA,MADmB;AAAA,gBACXD,SADW,WACXA,SADW;;AAE1B,iBAAKhB,QAAL,CAAc,EAACgB,WAAWe,YAAZ,EAAd;AACA,gBAAId,OAAOc,YAAP,KAAwBd,OAAOc,YAAP,MAAyBd,OAAOD,SAAP,CAArD,EAAwE;AACpE,qBAAKrB,KAAL,CAAW2B,UAAX,CAAsBK,KAAtB,CAA4BV,OAAOc,YAAP,CAA5B;AACH;AACJ;;;iCAEQ/D,K,EAAO;AAAA,0BACgB,KAAK4B,KADrB;AAAA,gBACLqB,MADK,WACLA,MADK;AAAA,gBACGD,SADH,WACGA,SADH;;AAEZ,iBAAKhB,QAAL,CAAc;AACViB,wBAAQe,OAAOC,MAAP,CAAchB,MAAd,sBAAwBD,SAAxB,EAAoChD,KAApC,EADE;AAEVsC,uBAAO;AAFG,aAAd;AAIH;;;qCAEY;AAAA,0BACmB,KAAKV,KADxB;AAAA,gBACFqB,MADE,WACFA,MADE;AAAA,gBACMD,SADN,WACMA,SADN;;AAET,iBAAKrB,KAAL,CAAW2B,UAAX,CAAsBK,KAAtB,CAA4BV,OAAOD,SAAP,CAA5B;AACH;;;oCAEWG,a,EAAe;AACvB,iBAAKnB,QAAL,CAAc,EAACmB,4BAAD,EAAgBb,OAAO,IAAvB,EAAd;AACH;;;4CAEmB;AAAA;;AAAA,gBACTa,aADS,GACQ,KAAKvB,KADb,CACTuB,aADS;;AAEhB,gBAAMG,aAAa,KAAK3B,KAAL,CAAW2B,UAAX,CAAsBK,KAAzC;AACA,iBAAK3B,QAAL,CAAc;AACVkB,wBAAQ3C,OAAOC,OADL;AAEV8B,uBAAO;AAFG,aAAd;;AAKA,mBAAQ,oCAAuBa,aAAvB,EACHe,IADG,CACE,qBAAa;AACf,oBAAMC,cAAc,OAAKvC,KAAzB;AACAuC,4BAAYjB,MAAZ,GAAqB3C,OAAOI,IAA5B;AACAwD,4BAAYlB,MAAZ,CAAmB/C,YAAYG,YAA/B,IAA+C+D,SAA/C;AACAD,4BAAYlB,MAAZ,CAAmB/C,YAAYI,IAA/B,IAAuC8D,SAAvC;AACA,uBAAKpC,QAAL,CAAcmC,WAAd;;AAEAb,2BAAWc,SAAX;AACH,aATG,EAUHC,KAVG,CAUG,iBAAS;AACZ,oBAAMF,cAAc,OAAKvC,KAAzB;AACAuC,4BAAYjB,MAAZ,GAAqB3C,OAAO+D,KAA5B;AACA,oBAAI,CAAC,gBAAEC,QAAF,CAAWjC,MAAMkC,OAAjB,EAA0BR,OAAOS,IAAP,+BAA1B,CAAL,EAAiE;AAC7DpC,4BAAQC,KAAR,CAAcA,KAAd;AACA6B,gCAAY7B,KAAZ,GAAoB,8BAAmBb,OAAvC;AACH,iBAHD,MAGO;AACH0C,gCAAY7B,KAAZ,GAAoBA,MAAMkC,OAA1B;;AAEA,wBAAIlC,MAAM8B,SAAV,EAAqB;AACjBD,oCAAYlB,MAAZ,CAAmB/C,YAAYG,YAA/B,IAA+CiC,MAAM8B,SAArD;AACAD,oCAAYlB,MAAZ,CAAmB/C,YAAYI,IAA/B,IAAuCgC,MAAM8B,SAA7C;AACH;AAEJ;AACD,uBAAKpC,QAAL,CAAcmC,WAAd;AACH,aA1BG,CAAR;AA6BH;;;mCAEU;AACP,iBAAKxC,KAAL,CAAW+C,QAAX,CAAoB,gCAAe,qBAAUpE,IAAzB,CAApB;AACH;;;iCAEQ;AACL,mBACI,8BAAC,cAAD;AACI,2BAAW,KAAKsB,KAAL,CAAWoB,SAD1B;AAEI,wBAAQ,KAAKpB,KAAL,CAAWqB,MAFvB;AAGI,wBAAQ,KAAKrB,KAAL,CAAWsB,MAHvB;AAII,uBAAO,KAAKtB,KAAL,CAAWU,KAJtB;AAKI,+BAAe,KAAKV,KAAL,CAAWuB,aAL9B;;AAOI,iCAAiB,KAAKC,eAP1B;AAQI,0BAAU,KAAKC,QARnB;AASI,4BAAY,KAAKC,UATrB;AAUI,6BAAa,KAAKC,WAVtB;AAWI,mCAAmB,KAAKC,iBAX5B;AAYI,0BAAU,KAAKC,QAZnB;AAaI,+BAAe,KAAK9B,KAAL,CAAW3B,KAAX,CAAiB2E,WAbpC;AAcI,+BAAe,KAAKhD,KAAL,CAAW2B,UAAX,CAAsBqB;AAdzC,cADJ;AAmBH;;;;;;AAGL/B,yBAAyBgC,SAAzB,GAAqC;AACjC5E,WAAO,iBAAU6E,MAAV,CAAiBC,UADS;AAEjCxB,gBAAY,iBAAUuB,MAAV,CAAiBC,UAFI;AAGjCJ,cAAU,iBAAUK;AAHa,CAArC;;AAMA,IAAMC,iBAAiB,SAAjBA,cAAiB,QAAS;AAAA,QAExBhC,SAFwB,GAgBxBrB,KAhBwB,CAExBqB,SAFwB;AAAA,QAGxBC,MAHwB,GAgBxBtB,KAhBwB,CAGxBsB,MAHwB;AAAA,QAIxBC,MAJwB,GAgBxBvB,KAhBwB,CAIxBuB,MAJwB;AAAA,QAKxBZ,KALwB,GAgBxBX,KAhBwB,CAKxBW,KALwB;AAAA,QAMxBa,aANwB,GAgBxBxB,KAhBwB,CAMxBwB,aANwB;AAAA,QAQxBC,eARwB,GAgBxBzB,KAhBwB,CAQxByB,eARwB;AAAA,QASxBC,QATwB,GAgBxB1B,KAhBwB,CASxB0B,QATwB;AAAA,QAUxBC,UAVwB,GAgBxB3B,KAhBwB,CAUxB2B,UAVwB;AAAA,QAWxBC,WAXwB,GAgBxB5B,KAhBwB,CAWxB4B,WAXwB;AAAA,QAYxBC,iBAZwB,GAgBxB7B,KAhBwB,CAYxB6B,iBAZwB;AAAA,QAaxBC,QAbwB,GAgBxB9B,KAhBwB,CAaxB8B,QAbwB;AAAA,QAcxBwB,aAdwB,GAgBxBtD,KAhBwB,CAcxBsD,aAdwB;AAAA,QAexBC,aAfwB,GAgBxBvD,KAhBwB,CAexBuD,aAfwB;;;AAkB5B,aAASC,aAAT,GAAyB;AACrB,YAAMnF,QAAQiD,OAAOD,SAAP,CAAd;;AAEA,YAAMoC,OACJ;AAAA;AAAA,cAAK,WAAU,WAAf;AACI;AAAA;AAAA,kBAAK,WAAU,kCAAf;AAEI;AAAA;AAAA,sBAAG,MAAK,mCAAR,EAA4C,QAAO,QAAnD;AACK,iCAAE,WAAF;AADL;AAFJ;AADJ,SADF;;AAWA,iBAASC,MAAT,CAAgBC,KAAhB,EAAuBC,OAAvB,EAAgC;AAC5B,mBACI;AAAA;AAAA,kBAAK,WAAU,qBAAf;AACKD,qBADL;AAEI;AAAA;AAAA,sBAAM,WAAU,qCAAhB,EAAsD,aAAWC,OAAjE;AACI,yDAAG,WAAU,eAAb;AADJ;AAFJ,aADJ;AAQH;;AAED,YAAIC,iBAAiB,IAArB;AACA,YAAI,gBAAEjB,QAAF,CAAWvB,SAAX,EAAsB,CAAC9C,YAAYG,YAAb,EAA2BH,YAAYI,IAAvC,CAAtB,KACGN,KADP,EACc;AACV,gBAAIyF,mBAAJ;AACA,gBAAIzC,cAAc9C,YAAYG,YAA9B,EAA4C;AACxCoF,6BAAa,wBAAb;AACH,aAFD,MAEO;AACHA,6BAAa,kBAAb;AACH;;AAEDD,6BACI5E,SACI;AAAA;AAAA,kBAAK,WAAU,gBAAf,EAAgC,SAAS6C,QAAzC;AACKgC;AADL,aADJ,CADJ;AAOH;;AAED,YAAIzC,cAAc9C,YAAYC,MAA9B,EAAsC;AAClC,gBAAMuF,WAAW,SAAXA,QAAW,WAAY;AACzBrC,yBAASsC,QAAT;AACArC;AACH,aAHD;AAIA,mBACI1C,SACI;AAAA;AAAA,kBAAM,WAAU,iBAAhB;AACI;AACI,6BAASd,aADb;AAEI,8BAAU4F,QAFd;AAGI,2BAAO1F,KAHX;AAII,+BAAW;AAJf;AADJ,aADJ,CADJ;AAYH,SAjBD,MAiBO,IAAI,gBAAEuE,QAAF,CAAWvB,SAAX,EAAsB,CAAC9C,YAAYE,aAAb,EAA4BF,YAAYG,YAAxC,CAAtB,CAAJ,EAAkF;AACrF,gBAAIkF,gBAAJ;AAAA,gBAAaK,mBAAb;AAAA,gBAAyBC,oBAAzB;AAAA,gBAAsCC,iBAAtC;AAAA,gBAAgDJ,kBAAhD;AAAA,gBAA0DK,sBAA1D;AAAA,gBAAyE5E,qBAAzE;;AAEA,gBAAI6B,cAAc9C,YAAYE,aAA9B,EAA6C;AACzCmF,0BAAU,aAAE,8CAAF,CAAV;AACAK,6BAAa,aAAE,mBAAF,CAAb;AACAC,8BAAc,aAAE,2DAAF,CAAd;AACAC,2BAAWxC,UAAX;AACAoC,4BAAWrC,QAAX;AACA0C,gCAAiB/F,UAAU,IAAX,GAAmB6F,WAAnB,GAAiC7F,KAAjD;AACAmB,+BAAe,IAAf;AACH,aARD,MAQO;AACHoE,0BAAU,aAAE,8DAAF,CAAV;AACAK,6BAAa,aAAE,kBAAF,CAAb;AACAC,8BAAc,aAAE,iEAAF,CAAd;AACAC,2BAAWtC,iBAAX;AACAkC,4BAAWnC,WAAX;AACAwC,gCAAiB5C,kBAAkB,IAAnB,GAA2B0C,WAA3B,GAAyC1C,aAAzD;AACAhC,+BAAemB,QAAQvB,4BAA4BuB,KAA5B,EAAmCa,aAAnC,CAAR,GAA4D,IAA3E;AACH;;AAED,gBAAMsC,cAAavC,WAAW3C,OAAOC,OAAlB,GACf,aAAE,YAAF,CADe,GAEf,aAAE,YAAF,CAFJ;;AAIA,gBAAMwF,cAAc,0BAChB,KADgB,EACT,SADS,EACE,aADF,EACiB,cADjB,EACiC,cADjC,EAEhB,EAAC,0BAA0B9C,WAAW3C,OAAOC,OAA7C,EAFgB,CAApB;;AAKA,mBACI;AAAA;AAAA;AAGK6E,uBAAOO,UAAP,EAAmBL,OAAnB,CAHL;AAMK3E,yBACG;AACI,+BAAU,WADd;AAEI,iCAAaiF,WAFjB;AAGI,8BAAU;AAAA,+BAAKH,UAAStD,EAAEO,MAAF,CAAS3C,KAAlB,CAAL;AAAA,qBAHd;AAII,2BAAO+F;AAJX,kBADH,CANL;AAeKnF,yBACG;AAAA;AAAA;AACI,mCAAWoF,WADf;AAEI,iCAASF;AAFb;AAIKL;AAJL,iBADH,CAfL;AAwBKtE,4BAxBL;AA0BKqE,8BA1BL;AA4BKJ;AA5BL,aADJ;AAkCH,SAhEM,MAgEA,IAAIpC,cAAc9C,YAAYI,IAA9B,EAAoC;AACvC,gBAAMiF,WAAU,qPAAhB;AAKA,gBAAMM,eAAc,CAChB,GADgB,EAEhB,mBAFgB,EAGhB,+BAHgB,EAIhB,qDAJgB,EAKhB,gEALgB,EAMhB,uBANgB,EAOhB,qBAPgB,EAQlBI,IARkB,CAQb,IARa,CAApB;;AAUA,gBAAM1D,eAAe,SAAfA,YAAe,WAAY;AAC7Bc,yBAASsC,QAAT;AACArC;AACH,aAHD;;AAKA,mBACI;AAAA;AAAA;AAGK+B,uBAAO,aAAE,mBAAF,CAAP,EAA+BE,QAA/B,CAHL;AAMI,8CAAC,UAAD;AACI,mCAAe,WADnB;AAEI,2BAAOvF,KAFX;AAGI,kCAAcuC;AAHlB,kBANJ;AAYKiD,8BAZL;AAcKJ;AAdL,aADJ;AAmBH;AACJ;;AAED,QAAMc,QAAQlD,cAAc9C,YAAYE,aAA1B,GACT;AACG,uBAAe6E,aADlB;AAEG,kBAAUC;AAFb,MADS,GAIJ,IAJV;;AAMA,WACI;AAAA;AAAA,UAAK,WAAU,kBAAf;AAEI;AAAA;AAAA,cAAK,WAAU,WAAf;AACI;AAAA;AAAA,kBAAK,WAAU,kBAAf;AACK,6BAAE,cAAF;AADL,aADJ;AAII;AAAA;AAAA,kBAAK,WAAU,mBAAf;AACI;AAAA;AAAA,sBAAM,WAAU,iBAAhB;AACI;AACI,iCAASjF,aADb;AAEI,kCAAUmD,eAFd;AAGI,+BAAOJ,SAHX;AAII,mCAAW;AAJf;AADJ;AADJ;AAJJ,SAFJ;AAkBKkD,aAlBL;AAoBKf;AApBL,KADJ;AA0BH,CA1ND;;AA4NAH,eAAeJ,SAAf,GAA2B;AACvB5B,eAAW,iBAAUmD,KAAV,CAAgBnC,OAAOS,IAAP,CAAYvE,WAAZ,CAAhB,EAA0C4E,UAD9B;AAEvB7B,YAAQ,iBAAUmD,KAAV,2DACHlG,YAAYC,MADT,EACkB,iBAAUgG,KAAV,CAAgB,CAAC,OAAD,EAAU,UAAV,EAAsB,OAAtB,EAA+B,MAA/B,EAAuC,WAAvC,EAAoD,mBAApD,CAAhB,CADlB,qCAEHjG,YAAYE,aAFT,EAEyB,iBAAUiG,MAFnC,qCAGHnG,YAAYG,YAHT,EAGwB,iBAAUwE,MAHlC,qCAIH3E,YAAYI,IAJT,EAIgB,iBAAUuE,MAJ1B,sBAKLC,UAPoB;AAQvB5B,YAAQ,iBAAUiD,KAAV,CAAgBnC,OAAOS,IAAP,CAAYlE,MAAZ,CAAhB,EAAqCuE,UARtB;AASvBxC,WAAO,iBAAUuC,MATM;AAUvB1B,mBAAe,iBAAUkD,MAVF;;AAYvBjD,qBAAiB,iBAAU2B,IAZJ;AAavB1B,cAAU,iBAAU0B,IAbG;AAcvBzB,gBAAY,iBAAUyB,IAdC;AAevBxB,iBAAa,iBAAUwB,IAfA;AAgBvBvB,uBAAmB,iBAAUuB,IAhBN;AAiBvBtB,cAAU,iBAAUsB,IAjBG;AAkBvBE,mBAAe,iBAAUoB,MAlBF;AAmBvBnB,mBAAe,iBAAUH;AAnBF,CAA3B;;AAsBAuB,OAAOC,OAAP,GAAiB3D,wBAAjB","file":"MapboxStyleUrlController.js","sourcesContent":["import React, {Component, PropTypes} from 'react';\nimport Dropdown from '@workspace/components/widgets/Dropdown';\nimport R from 'ramda';\nimport {_} from '@common/utils/i18n';\nimport UncontrolledTextarea from '@workspace/components/widgets/UncontrolledTextarea';\nimport {fetchAndParseStyleJSON} from '@workspace/utils/mapbox';\nimport {MAPBOX_ATLAS_MESSAGES} from '@workspace/constants/errorMessages';\nimport Environment from '@common/utils/environment';\nimport classnames from 'classnames';\nimport URL from 'url';\nimport {EDIT_MODE, MAPBOX_ERROR_TYPES} from '@workspace/constants/workspace';\nimport {selectEditMode} from '@workspace/actions/workspace';\nimport MapboxTokenDropdown from '@workspace/components/widgets/MapboxTokenDropdown';\n\nconst PRESET_STYLES = [\n    {label: 'Basic', value: 'basic'},\n    {label: 'Outdoors', value: 'outdoors'},\n    {label: 'Light', value: 'light'},\n    {label: 'Dark', value: 'dark'},\n    {label: 'Satellite', value: 'satellite'},\n    {label: 'Satellite with Streets', value: 'satellite-streets'}\n];\n\nconst STYLE_OPTIONS = [\n    {label: 'Preset Styles', value: 'PRESET'},\n    {label: 'Mapbox Studio Style', value: 'MAPBOX_STUDIO'},\n    {label: 'Mapbox Atlas Style', value: 'MAPBOX_ATLAS'},\n    {label: 'Custom JSON', value: 'JSON'}\n];\n\nconst VALUE_TYPES = {\n    PRESET: 'PRESET',\n    MAPBOX_STUDIO: 'MAPBOX_STUDIO',\n    MAPBOX_ATLAS: 'MAPBOX_ATLAS',\n    JSON: 'JSON'\n};\n\nconst STATUS = {\n    LOADING: 'LOADING',\n    BLANK: 'BLANK',\n    WARNING: 'WARNING',\n    DONE: 'DONE'\n};\n\nconst menuItem = (content) => {\n    return (\n        <div className=\"menu-item\">\n            <div className=\"menu-item__no-title\">\n                {content}\n            </div>\n        </div>\n    );\n};\n\nconst menuItemWarning = (content) => {\n    return (\n        <div className=\"menu-item\">\n            <div className=\"menu-item__no-title\">\n                <span className=\"menu-item__multiple +red-imp\">\n                    {content}\n                </span>\n            </div>\n        </div>\n    );\n};\n\nconst MAPBOX_ATLAS_ERROR_MESSAGES = {\n    INVALID_JSON: url => (\n        menuItemWarning(\n            <span>\n              {MAPBOX_ATLAS_MESSAGES.INVALID_JSON}\n              <a href={url} target=\"_blank\">{url}</a>\n            </span>\n        )\n    ),\n\n    FAILED_REQUEST: url => {\n        let errorMessage;\n        if (URL.parse(url).protocol === 'http:') {\n            errorMessage = (\n                menuItemWarning(\n                    <span>\n                        {MAPBOX_ATLAS_MESSAGES.FAILED_REQUEST}\n                        <a href=\"http://help.plot.ly/mapbox-atlas\" target=\"_blank\">\n                            http://help.plot.ly/mapbox-atlas\n                        </a>.\n                    </span>\n                )\n            );\n        } else {\n            errorMessage = (\n                menuItemWarning(\n                    <span>\n                        {MAPBOX_ATLAS_MESSAGES.DOWNLOAD}\n                        <a href={url} target=\"_blank\">{url}</a>\n                        {_(' in your browser to verify that the URL works?')}\n                    </span>\n                )\n            );\n        }\n        return errorMessage;\n    },\n\n    FAILED_PARSING: url => (\n        menuItemWarning(\n              <span>\n                  {MAPBOX_ATLAS_MESSAGES.FAILED_PARSING}\n                  <a href={url} target=\"_blank\">{url}</a>.\n                  {MAPBOX_ATLAS_MESSAGES.EXPECTED_URL}\n                  http://my-atlas-server:2999/pages/light-v6/cilo6dghg0008a2kqgq9dnsug.json\n              </span>\n        )\n    ),\n\n    UNKNOWN: () => (\n        menuItemWarning(\n            <span>\n              {MAPBOX_ATLAS_MESSAGES.UNKNOWN}\n            </span>\n        )\n    )\n};\n\n// TODO: Try replacing this with our new jsoneditor component\nclass JsonEditor extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            value: null,\n            invalidJSON: false\n        };\n        this.setValidJSON = this.setValidJSON.bind(this);\n    }\n\n    componentWillMount() {\n        this.setState({value: this.props.value});\n    }\n\n    componentWillReceiveProps(nextProps) {\n        this.setState({value: nextProps.value});\n    }\n\n    setValidJSON(jsonString) {\n        this.setState({invalidJSON: false});\n        try {\n            const jsonObject = JSON.parse(jsonString);\n            this.setState({value: jsonObject});\n        } catch (e) {\n            console.error(e);\n            this.setState({invalidJSON: true});\n        }\n    }\n\n    render () {\n        const {\n            applyChanges,\n            textareaStyle,\n            textareaClass\n        } = this.props;\n        const {value} = this.state;\n\n        return (\n            <div>\n                {menuItem(\n                        <UncontrolledTextarea\n                            style={textareaStyle}\n                            className={textareaClass}\n                            value={JSON.stringify(value, null, 2)}\n                            onBlur={e => this.setValidJSON(e.target.value)}\n                        />\n                )}\n\n                {this.state.invalidJSON ?\n                    menuItem(\n                        <span className=\"menu-item__multiple +red-imp +text-center\">\n                            {_('Invalid JSON')}\n                        </span>\n                    )\n                    :\n                    null\n                }\n\n                {menuItem(\n                    <div\n                        className=\"btn --small --secondary +text-center --full-width\"\n                        onClick={() => applyChanges(this.state.value)}\n                    >\n                        {_('Apply Changes')}\n                    </div>\n                )}\n\n            </div>\n        );\n    }\n}\n\n\nclass MapboxStyleUrlController extends Component {\n    constructor(props) {\n        super(props);\n\n        let defaultValueType;\n        const defaultAtlasUrl = Environment.get('PLOTLY_MAPBOX_ATLAS_DEFAULT_STYLE_URL');\n        if (defaultAtlasUrl !== '') {\n            defaultValueType = VALUE_TYPES.MAPBOX_ATLAS;\n        } else {\n            defaultValueType = VALUE_TYPES.PRESET;\n        }\n\n        this.state = {\n            valueType: defaultValueType,\n\n            /*\n             * each of these values can get set to plotly.js's\n             * layout.mapbox.source value\n             */\n            values: {\n                [VALUE_TYPES.PRESET]: null,\n                [VALUE_TYPES.MAPBOX_STUDIO]: null,\n                [VALUE_TYPES.MAPBOX_ATLAS]: null,\n                [VALUE_TYPES.JSON]: null\n            },\n            status: STATUS.BLANK,\n            error: null,\n            atlasStyleURL: defaultAtlasUrl\n        };\n\n        this.changeValueType = this.changeValueType.bind(this);\n        this.setValue = this.setValue.bind(this);\n        this.updatePlot = this.updatePlot.bind(this);\n        this.setAtlasURL = this.setAtlasURL.bind(this);\n        this.downloadAtlasJSON = this.downloadAtlasJSON.bind(this);\n        this.viewJson = this.viewJson.bind(this);\n    }\n\n    componentWillMount() {\n        this.setValueFromProps(this.props);\n    }\n\n    componentWillReceiveProps(nextProps) {\n        const {values, valueType} = this.state;\n        if (!values[valueType] && (this.props.value.style !== nextProps.value.style)) {\n            this.setValueFromProps(nextProps);\n        }\n    }\n\n    setValueFromProps(props) {\n        const value = this.props.value.style;\n        const {values} = this.state;\n        let valueType;\n        if (PRESET_STYLES.find(option => option.value === value)) {\n            values[VALUE_TYPES.PRESET] = value;\n            valueType = VALUE_TYPES.PRESET;\n        }\n\n        /*\n         * If it's a string, it's likely a mapbox style url like\n         * mapbox://chriddyp/styles/my-style\n         */\n        else if (typeof value === 'string') {\n            values[VALUE_TYPES.MAPBOX_STUDIO] = value;\n            valueType = VALUE_TYPES.MAPBOX_STUDIO;\n        }\n\n        /*\n         * When folks have Atlas set up without mapbox studio,\n         * nothing will work until they load up their style JSON.\n         * mapbox in the plotly.js figure won't be defined and so the `value`\n         * will be null. Display the Mapbox Atlas style URL input to prompt them\n         * to download their style data.\n         */\n        else if (\n            R.isNil(value) &&\n            Environment.get('PLOTLY_MAPBOX_ATLAS_DEFAULT_STYLE_URL')\n        ) {\n            valueType = VALUE_TYPES.MAPBOX_ATLAS;\n        }\n\n        /*\n         * Otherwise, it's probably a style JSON object.\n         */\n        else {\n            valueType = VALUE_TYPES.JSON;\n            values[VALUE_TYPES.JSON] = values[VALUE_TYPES.MAPBOX_ATLAS] = value;\n        }\n\n        this.setState({valueType, values});\n\n    }\n\n    changeValueType(newValueType) {\n        const {values, valueType} = this.state;\n        this.setState({valueType: newValueType});\n        if (values[newValueType] && values[newValueType] !== values[valueType]) {\n            this.props.updatePlot.style(values[newValueType]);\n        }\n    }\n\n    setValue(value) {\n        const {values, valueType} = this.state;\n        this.setState({\n            values: Object.assign(values, {[valueType]: value}),\n            error: null\n        });\n    }\n\n    updatePlot() {\n        const {values, valueType} = this.state;\n        this.props.updatePlot.style(values[valueType]);\n    }\n\n    setAtlasURL(atlasStyleURL) {\n        this.setState({atlasStyleURL, error: null});\n    }\n\n    downloadAtlasJSON() {\n        const {atlasStyleURL} = this.state;\n        const updatePlot = this.props.updatePlot.style;\n        this.setState({\n            status: STATUS.LOADING,\n            error: null\n        });\n\n        return (fetchAndParseStyleJSON(atlasStyleURL)\n            .then(styleJSON => {\n                const stateUpdate = this.state;\n                stateUpdate.status = STATUS.DONE;\n                stateUpdate.values[VALUE_TYPES.MAPBOX_ATLAS] = styleJSON;\n                stateUpdate.values[VALUE_TYPES.JSON] = styleJSON;\n                this.setState(stateUpdate);\n\n                updatePlot(styleJSON);\n            })\n            .catch(error => {\n                const stateUpdate = this.state;\n                stateUpdate.status = STATUS.ERROR;\n                if (!R.contains(error.message, Object.keys(MAPBOX_ERROR_TYPES))) {\n                    console.error(error);\n                    stateUpdate.error = MAPBOX_ERROR_TYPES.UNKNOWN;\n                } else {\n                    stateUpdate.error = error.message;\n\n                    if (error.styleJSON) {\n                        stateUpdate.values[VALUE_TYPES.MAPBOX_ATLAS] = error.styleJSON;\n                        stateUpdate.values[VALUE_TYPES.JSON] = error.styleJSON;\n                    }\n\n                }\n                this.setState(stateUpdate);\n            })\n\n        );\n    }\n\n    viewJson() {\n        this.props.dispatch(selectEditMode(EDIT_MODE.JSON));\n    }\n\n    render() {\n        return (\n            <MapboxStyleUrl\n                valueType={this.state.valueType}\n                values={this.state.values}\n                status={this.state.status}\n                error={this.state.error}\n                atlasStyleURL={this.state.atlasStyleURL}\n\n                changeValueType={this.changeValueType}\n                setValue={this.setValue}\n                updatePlot={this.updatePlot}\n                setAtlasURL={this.setAtlasURL}\n                downloadAtlasJSON={this.downloadAtlasJSON}\n                viewJson={this.viewJson}\n                selectedToken={this.props.value.accesstoken}\n                onTokenChange={this.props.updatePlot.accesstoken}\n            />\n        );\n\n    }\n}\n\nMapboxStyleUrlController.propTypes = {\n    value: PropTypes.object.isRequired,\n    updatePlot: PropTypes.object.isRequired,\n    dispatch: PropTypes.func\n};\n\nconst MapboxStyleUrl = props => {\n    const {\n        valueType,\n        values,\n        status,\n        error,\n        atlasStyleURL,\n\n        changeValueType,\n        setValue,\n        updatePlot,\n        setAtlasURL,\n        downloadAtlasJSON,\n        viewJson,\n        selectedToken,\n        onTokenChange\n    } = props;\n\n    function renderOptions() {\n        const value = values[valueType];\n\n        const help = (\n          <div className=\"menu-item\">\n              <div className=\"menu-item__no-title +text-center\">\n                  {/* TODO: fill in this help url */}\n                  <a href=\"http://help.plot.ly/mapbox-atlas/\" target=\"_blank\">\n                      {_('Help Page')}\n                  </a>\n              </div>\n          </div>\n        );\n\n        function header(title, tooltip) {\n            return (\n                <div className=\"style-block__header\">\n                    {title}\n                    <span className=\"hint--left hint--small +float-right\" data-hint={tooltip}>\n                        <i className=\"icon-question\"></i>\n                    </span>\n                </div>\n            );\n        }\n\n        let viewJsonButton = null;\n        if (R.contains(valueType, [VALUE_TYPES.MAPBOX_ATLAS, VALUE_TYPES.JSON])\n            && value) {\n            let buttonText;\n            if (valueType === VALUE_TYPES.MAPBOX_ATLAS) {\n                buttonText = 'View Mapbox Style JSON';\n            } else {\n                buttonText = 'Rich JSON Editor';\n            }\n\n            viewJsonButton = (\n                menuItem(\n                    <div className=\"button-control\" onClick={viewJson}>\n                        {buttonText}\n                    </div>\n                )\n            );\n        }\n\n        if (valueType === VALUE_TYPES.PRESET) {\n            const onChange = newValue => {\n                setValue(newValue);\n                updatePlot();\n            };\n            return (\n                menuItem(\n                    <span className=\"widget-dropdown\">\n                        <Dropdown\n                            options={PRESET_STYLES}\n                            onChange={onChange}\n                            value={value}\n                            clearable={false}\n                        />\n                    </span>\n                )\n            );\n        } else if (R.contains(valueType, [VALUE_TYPES.MAPBOX_STUDIO, VALUE_TYPES.MAPBOX_ATLAS])) {\n            let tooltip, headerText, placeholder, onSubmit, onChange, textAreaValue, errorMessage;\n\n            if (valueType === VALUE_TYPES.MAPBOX_STUDIO) {\n                tooltip = _('Import custom map styles from Mapbox Studio.');\n                headerText = _('Mapbox Studio URL');\n                placeholder = _('mapbox://styles/your-mapbox-username/your-mapbox-style-id');\n                onSubmit = updatePlot;\n                onChange = setValue;\n                textAreaValue = (value === null) ? placeholder : value;\n                errorMessage = null;\n            } else {\n                tooltip = _('Download map styles from Mapbox Atlas enterprise map server.');\n                headerText = _('Mapbox Atlas URL');\n                placeholder = _('https://<your-atlas-server>:2999/pages/light-v6/<style-id>.json');\n                onSubmit = downloadAtlasJSON;\n                onChange = setAtlasURL;\n                textAreaValue = (atlasStyleURL === null) ? placeholder : atlasStyleURL;\n                errorMessage = error ? MAPBOX_ATLAS_ERROR_MESSAGES[error](atlasStyleURL) : null;\n            }\n\n            const buttonText = status === STATUS.LOADING ?\n                _('Loading...') :\n                _('Load Style');\n\n            const buttonClass = classnames(\n                'btn', '--small', '--secondary', '+text-center', '--full-width',\n                {'+cursor-wait-important': status === STATUS.LOADING}\n            );\n\n            return (\n                <div>\n\n\n                    {header(headerText, tooltip)}\n\n\n                    {menuItem(\n                        <textarea\n                            className=\"url-input\"\n                            placeholder={placeholder}\n                            onChange={e => onChange(e.target.value)}\n                            value={textAreaValue}\n                        />\n                    )}\n\n                    {menuItem(\n                        <div\n                            className={buttonClass}\n                            onClick={onSubmit}\n                        >\n                            {buttonText}\n                        </div>\n                    )}\n\n                    {errorMessage}\n\n                    {viewJsonButton}\n\n                    {help}\n\n                </div>\n            );\n\n        } else if (valueType === VALUE_TYPES.JSON) {\n            const tooltip = _(`\n                A Mapbox style is a JSON object that defines the visual appearance of a map:\n                what data to draw, the order to draw it in, and how to style the data when\n                drawing it.\n            `);\n            const placeholder = [\n                '{',\n                '    \"version\": 8,',\n                '    \"name\": \"Mapbox Streets\",',\n                '    \"sprite\": \"mapbox://sprites/mapbox/streets-v8\",',\n                '    \"glyphs\": \"mapbox://fonts/mapbox/{fontstack}/{range}.pbf\",',\n                '    \"sources\": {...},',\n                '    \"layers\": [...]'\n            ].join('\\n');\n\n            const applyChanges = newValue => {\n                setValue(newValue);\n                updatePlot();\n            };\n\n            return (\n                <div>\n\n\n                    {header(_('Mapbox Style JSON'), tooltip)}\n\n\n                    <JsonEditor\n                        textareaClass={'json-view'}\n                        value={value}\n                        applyChanges={applyChanges}\n                    />\n\n                    {viewJsonButton}\n\n                    {help}\n\n                </div>\n            );\n        }\n    }\n\n    const token = valueType === VALUE_TYPES.MAPBOX_STUDIO ?\n        (<MapboxTokenDropdown\n            selectedToken={selectedToken}\n            onChange={onTokenChange}\n        />) : null;\n\n    return (\n        <div className=\"mapbox-style-url\">\n\n            <div className=\"menu-item\">\n                <div className=\"menu-item__title\">\n                    {_('Mapbox Style')}\n                </div>\n                <div className=\"menu-item__widget\">\n                    <span className=\"widget-dropdown\">\n                        <Dropdown\n                            options={STYLE_OPTIONS}\n                            onChange={changeValueType}\n                            value={valueType}\n                            clearable={false}\n                        />\n                    </span>\n                </div>\n            </div>\n\n            {token}\n\n            {renderOptions()}\n\n        </div>\n    );\n\n};\n\nMapboxStyleUrl.propTypes = {\n    valueType: PropTypes.oneOf(Object.keys(VALUE_TYPES)).isRequired,\n    values: PropTypes.shape({\n        [VALUE_TYPES.PRESET]: PropTypes.oneOf(['basic', 'outdoors', 'light', 'dark', 'satellite', 'satellite-streets']),\n        [VALUE_TYPES.MAPBOX_STUDIO]: PropTypes.string,\n        [VALUE_TYPES.MAPBOX_ATLAS]: PropTypes.object,\n        [VALUE_TYPES.JSON]: PropTypes.object\n    }).isRequired,\n    status: PropTypes.oneOf(Object.keys(STATUS)).isRequired,\n    error: PropTypes.object,\n    atlasStyleURL: PropTypes.string,\n\n    changeValueType: PropTypes.func,\n    setValue: PropTypes.func,\n    updatePlot: PropTypes.func,\n    setAtlasURL: PropTypes.func,\n    downloadAtlasJSON: PropTypes.func,\n    viewJson: PropTypes.func,\n    selectedToken: PropTypes.string,\n    onTokenChange: PropTypes.func\n};\n\nmodule.exports = MapboxStyleUrlController;\n"]}