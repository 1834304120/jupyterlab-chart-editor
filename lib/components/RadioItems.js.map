{"version":3,"sources":["../../src/components/RadioItems.js"],"names":["RadioItems","props","state","activeOption","uid","handleChange","bind","renderOption","nextProps","setState","e","newActiveOption","target","value","toString","onOptionChange","optionName","label","icon","disabled","defaultActive","labelWrapperClass","Boolean","contentClass","onChange","optionClass","radioClassName","orientation","optionList","options","map","stylingClass","defaultProps","propTypes","arrayOf","shape","oneOfType","string","bool","number","isRequired","func","oneOf","module","exports"],"mappings":"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","file":"RadioItems.js","sourcesContent":["import React, {Component, PropTypes} from 'react';\nimport classnames from 'classnames';\nimport hat from 'hat';\n\n/**\n *\n * Basic html radio group - returns onOptionChange\n * (value of the radio input that is clicked)\n *\n * Options labels and values must be unique to the component\n * ActiveOption identifies the default checked option and\n * must be equal to the corresponding value\n *\n * Icons when present will replace the labels and circular radio buttons\n *\n * Can be displayed vertically (orientation: 'vertical') or\n * horizontally (orientation: 'horizontal')\n */\n\nclass RadioItems extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            activeOption: this.props.activeOption,\n            uid: hat()\n        };\n\n        this.handleChange = this.handleChange.bind(this);\n        this.renderOption = this.renderOption.bind(this);\n    }\n\n    componentWillReceiveProps(nextProps) {\n        // Reset the value to the graph's actual value\n        if (nextProps.activeOption !== this.state.activeOption) {\n            this.setState({\n                activeOption: nextProps.activeOption\n            });\n        }\n    }\n\n    handleChange(e) {\n        let newActiveOption = e.target.value;\n\n        // prevent action when clicking on the active item twice\n        if (newActiveOption === this.state.activeOption) {\n            return;\n        }\n\n        // Preserve Type\n        if (newActiveOption === 'true') {\n            newActiveOption = true;\n        } else if (newActiveOption === 'false') {\n            newActiveOption = false;\n        } else if (typeof(newActiveOption) === 'number') {\n            newActiveOption = newActiveOption.toString();\n        }\n\n        this.setState({activeOption: newActiveOption});\n        this.props.onOptionChange(newActiveOption);\n\n    }\n\n    renderOption(optionName) {\n        const {label, value, icon, disabled} = optionName;\n        const defaultActive = this.state.activeOption === value;\n\n        const labelWrapperClass = classnames({\n            'radio-item': true,\n            'js-radio-item': true,\n            'icon': Boolean(icon)\n        });\n\n        const contentClass = classnames({\n            'radio-item__content__icon': Boolean(icon),\n            'radio-item__content': Boolean(!icon)\n        }, icon);\n\n        // noop the onChange handler if the option is disabled\n        const onChange = disabled ? () => {} : this.handleChange;\n\n        const optionClass = classnames({\n            [this.props.radioClassName]: true,\n            '+is-disabled': disabled,\n            '+text-center': this.props.orientation === 'horizontal',\n            '+inline-block': this.props.orientation === 'horizontal',\n            '+text-left': this.props.orientation === 'vertical'\n        });\n\n        return (\n            <div className={optionClass} key={value}>\n                <label className={labelWrapperClass}\n                       ref={icon ? 'iconOption' : 'textOption'}\n                >\n                    <input type=\"radio\"\n                           className=\"radio-item__input\"\n                           checked={defaultActive}\n                           onChange={onChange}\n                           ref={label}\n                           name={this.state.uid}\n                           value={value}\n                    />\n\n                    <div className={contentClass}/>\n                </label>\n\n                { label ?\n                    <span className=\"radio-item__title\">\n                        {label}\n                    </span>\n                  : null\n                }\n            </div>\n        );\n    }\n\n    render() {\n\n        const optionList = this.props.options.map(this.renderOption);\n\n        return (\n            <div className={this.props.stylingClass}>\n                {optionList}\n            </div>\n        );\n    }\n}\n\nRadioItems.defaultProps = {\n    radioClassName: '+soft-quarter',\n    orientation: 'horizontal'\n};\n\nRadioItems.propTypes = {\n    options: PropTypes.arrayOf(PropTypes.shape({\n        value: PropTypes.oneOfType([\n            PropTypes.string,\n            PropTypes.bool,\n            PropTypes.number\n        ]).isRequired,\n        label: PropTypes.string,\n        icon: PropTypes.string,\n        disabled: PropTypes.bool\n    })),\n    onOptionChange: PropTypes.func.isRequired,\n    activeOption: PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.bool,\n        PropTypes.number\n    ]),\n    stylingClass: PropTypes.string,\n    radioClassName: PropTypes.string,\n    orientation: PropTypes.oneOf(['vertical', 'horizontal'])\n};\n\nmodule.exports = RadioItems;\n"]}