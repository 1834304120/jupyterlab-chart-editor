{"version":3,"sources":["../../src/components/UploadShapefile.js"],"names":["ErrorMessages","STATUS","LOADING","ERROR","SUCCESS","INITIAL","UploadShapefile","props","state","status","upload","bind","renderBlankState","renderFullState","renderErrorState","renderLoadingState","renderDropzone","nextProps","value","setState","files","reader","fileExtension","name","slice","toLowerCase","onload","contents","e","target","result","showErrorState","error","console","message","UPLOAD_SHAPE_FILE","PARSING_ERROR","onUpload","JSON","parse","then","geojson","catch","length","ONE_AT_A_TIME","readAsText","readAsArrayBuffer","content","refs","dzone","open","stringify","split","join","propTypes","func","isRequired","object","module","exports"],"mappings":"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","file":"UploadShapefile.js","sourcesContent":["import React, {Component, PropTypes} from 'react';\nimport Dropzone from 'react-dropzone';\nimport {_} from '@common/utils/i18n';\n\nimport shp from 'shpjs';\nimport CustomFileReader from '@workspace/utils/CustomFileReader';\nimport * as ErrorMessages from '@workspace/constants/errorMessages';\n\nconst STATUS = {\n    LOADING: 'LOADING',\n    ERROR: 'ERROR',\n    SUCCESS: 'SUCCESS',\n    INITIAL: 'INITIAL'\n};\n\nclass UploadShapefile extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            status: STATUS.INITIAL\n        };\n\n        this.upload = this.upload.bind(this);\n        this.renderBlankState = this.renderBlankState.bind(this);\n        this.renderFullState = this.renderFullState.bind(this);\n        this.renderErrorState = this.renderErrorState.bind(this);\n        this.renderLoadingState = this.renderLoadingState.bind(this);\n        this.renderDropzone = this.renderDropzone.bind(this);\n    }\n\n    componentWillReceiveProps(nextProps) {\n        if (nextProps.value && nextProps.value !== null) {\n            this.setState({status: STATUS.SUCCESS});\n        }\n    }\n\n    upload(files) {\n        const reader = new CustomFileReader();\n        const fileExtension = files[0].name.slice(-4).toLowerCase();\n\n        reader.onload = e => {\n            const contents = e.target.result;\n            const showErrorState = (error) => {\n                console.error(error);\n\n                this.setState({\n                    status: STATUS.ERROR,\n                    message: ErrorMessages.UPLOAD_SHAPE_FILE.PARSING_ERROR\n                });\n            };\n\n            if (fileExtension === 'json') {\n                try {\n                    this.props.onUpload(JSON.parse(contents));\n                } catch (error) {\n                    showErrorState(error);\n                }\n            } else {\n                /* shp accepts shapefiles and GeoJSON zipped files:\n                 * https://github.com/calvinmetcalf/shapefile-js/blob/gh-pages/lib/index.js#L59\n                */\n\n                shp(contents).then(geojson => {\n                    this.props.onUpload(geojson);\n                    /*\n                     * remain in the \"loading\" state until the value comes\n                     * back to the component in componentWillReceiveProps\n                     */\n                }).catch(showErrorState);\n            }\n        };\n\n        if (files.length > 1) {\n            this.setState({\n                status: STATUS.ERROR,\n                // TODO: move to constants\n                message: ErrorMessages.UPLOAD_SHAPE_FILE.ONE_AT_A_TIME\n            });\n        } else if (files.length === 1) {\n            this.setState({status: STATUS.LOADING});\n\n            if (fileExtension === 'json') {\n                reader.readAsText(files[0]);\n            } else {\n                reader.readAsArrayBuffer(files[0]);\n            }\n        }\n\n    }\n\n    renderDropzone(content) {\n        return (\n            <Dropzone\n                ref=\"dzone\"\n                onDrop={this.upload}\n                className=\"upload-shapefile upload-shapefile__inactive-dropzone\"\n                activeClassName=\"upload-shapefile upload-shapefile__active-dropzone\"\n                disableClick={true}\n            >\n\n                {content}\n\n            </Dropzone>\n        );\n    }\n\n    renderBlankState() {\n        // The clicking behaviour of 'react-dropzone' by default is already to open the browser's file picker\n        // We don't need an onClick handler because that duplicates the event:\n        // http://okonet.ru/react-dropzone/ Under the features section:\n        // disableClick - Clicking the <Dropzone> brings up the browser file picker. To disable, set to true.\n\n        return this.renderDropzone(\n            <span className=\"+vertically-horizontally-centered-content upload-shapefile__dropzone-content\">\n                <a onClick={() => this.refs.dzone.open()}>upload </a>\n                {_('a GeoJSON file (.json or .geojson) or a .zip file containing a .shp, .shx, and .dbf file')}\n            </span>\n        );\n    }\n\n    renderLoadingState() {\n        return (\n            <div className=\"upload-shapefile +cursor-loading\">\n                <div className=\"+vertically-horizontally-centered-content\">\n                    {_('Loading...')}\n                </div>\n            </div>\n        );\n    }\n\n    renderErrorState() {\n        return this.renderDropzone(\n            <div className=\"upload-shapefile__dropzone-content +vertically-horizontally-centered-content\">\n                <div className=\"+text-error\">\n                    {this.state.message}\n                </div>\n                <a onClick={() => this.refs.dzone.open()}>{_('Upload again')}</a>\n            </div>\n        );\n    }\n\n    renderFullState() {\n        // TODO: this will be hella slow for big JSON files..\n        return (\n            <div className=\"upload-shapefile upload-shapefile__geojson-container thin-scroll\">\n                GeoJSON:\n                <pre className=\"upload-shapefile__geojson\">\n                    {\n                        JSON.stringify(this.props.value, null, 2)\n                        .split('\\n')\n                        .slice(0, 100)\n                        .join('\\n')\n                    }\n                    ...\n                </pre>\n            </div>\n        );\n    }\n\n    render() {\n        let content;\n        if (this.state.status === STATUS.LOADING) {\n            content = this.renderLoadingState();\n        } else if (this.state.status === STATUS.INITIAL) {\n            content = this.renderBlankState();\n        } else if (this.state.status === STATUS.SUCCESS) {\n            content = this.renderFullState();\n        } else if (this.state.status === STATUS.ERROR) {\n            content = this.renderErrorState();\n        }\n\n        return <div>{content}</div>;\n\n    }\n\n}\n\nUploadShapefile.propTypes = {\n    onUpload: PropTypes.func.isRequired,\n\n    // geojson\n    value: PropTypes.object.isRequired\n};\n\nmodule.exports = UploadShapefile;\n"]}