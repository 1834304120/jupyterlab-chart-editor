{"version":3,"sources":["../../src/components/DefaultPanels.js"],"names":["DefaultPanels","props","context","dataSources","dataSourceNames","_","label","value","contextTypes","Object","assign","object","array"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AAEA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;;;;;AAEA;AACA;IACMA,a;;;AACJ,yBAAYC,KAAZ,EAAmBC,OAAnB,EAA4B;AAAA;;AAAA,8HACpBD,KADoB,EACbC,OADa;;AAE1B,UAAKC,WAAL,GAAmBD,QAAQC,WAA3B;AACA,UAAKC,eAAL,GAAuBF,QAAQE,eAA/B;AAH0B;AAI3B;;;;6BAEQ;AACP,UAAMC,IAAI,KAAKA,CAAf;;AAEA,aACE;AAAA;AAAA;AACE;AAAA;AAAA,YAAO,SAAQ,OAAf,EAAuB,MAAK,QAA5B;AACE;AAAA;AAAA;AACE;AACE,qBAAM,WADR;AAEE,oBAAK,MAFP;AAGE,uBAAS,CACP,EAAEC,OAAO,MAAT,EAAiBC,OAAO,OAAxB,EADO,EAEP,EAAED,OAAO,SAAT,EAAoBC,OAAO,SAA3B,EAFO,EAGP,EAAED,OAAO,cAAT,EAAyBC,OAAO,eAAhC,EAHO;AAHX,cADF;AAWE,8DAAQ,OAAM,GAAd,EAAkB,MAAK,MAAvB,EAA8B,SAAS,KAAKH,eAA5C,GAXF;AAaE,8DAAQ,OAAM,GAAd,EAAkB,MAAK,MAAvB,EAA8B,SAAS,KAAKA,eAA5C,GAbF;AAeE,+DAAS,OAAOC,EAAE,aAAF,CAAhB,EAAkC,MAAK,aAAvC;AAfF;AADF,SADF;AAqBE;AAAA;AAAA,YAAO,SAAQ,OAAf,EAAuB,MAAK,QAA5B;AACE;AAAA;AAAA;AACE;AAAA;AAAA,gBAAS,SAASA,EAAE,OAAF,CAAlB;AACE;AACE,uBAAOA,EAAE,SAAF,CADT;AAEE,qBAAK,CAFP;AAGE,qBAAK,CAHP;AAIE,sBAAM,GAJR;AAKE,sBAAK;AALP;AADF,aADF;AAWE;AAAA;AAAA,gBAAS,SAASA,EAAE,SAAF,CAAlB;AACE;AACE,sBAAK,MADP;AAEE,yBAAS,CACP,EAAEC,OAAO,OAAT,EAAkBC,OAAO,OAAzB,EADO,EAEP,EAAED,OAAO,QAAT,EAAmBC,OAAO,SAA1B,EAFO;AAFX;AADF,aAXF;AAqBE;AAAA;AAAA,gBAAS,SAASF,EAAE,QAAF,CAAlB;AACE;AACE,uBAAOA,EAAE,gBAAF,CADT;AAEE,qBAAK,CAFP;AAGE,qBAAK,CAHP;AAIE,sBAAM,GAJR;AAKE,sBAAK;AALP,gBADF;AASE,+DAAa,OAAOA,EAAE,cAAF,CAApB,EAAuC,MAAK,cAA5C,GATF;AAWE,iEAAS,OAAOA,EAAE,MAAF,CAAhB,EAA2B,KAAK,CAAhC,EAAmC,MAAK,aAAxC,GAXF;AAaE;AACE,uBAAOA,EAAE,YAAF,CADT;AAEE,qBAAK,CAFP;AAGE,sBAAK;AAHP;AAbF,aArBF;AAyCE;AAAA;AAAA,gBAAS,SAASA,EAAE,OAAF,CAAlB;AACE;AACE,uBAAOA,EAAE,OAAF,CADT;AAEE,qBAAK,CAFP;AAGE,sBAAM,GAHR;AAIE,sBAAK;AAJP,gBADF;AAQE,+DAAa,OAAOA,EAAE,YAAF,CAApB,EAAqC,MAAK,YAA1C,GARF;AAUE,+DAAO,OAAOA,EAAE,cAAF,CAAd,EAAiC,MAAK,aAAtC;AAVF;AAzCF;AADF;AArBF,OADF;AAgFD;;;;;;AAGH;AACA;;;AACAL,cAAcQ,YAAd,GAA6BC,OAAOC,MAAP,CAAc;AACzCP,eAAa,oBAAUQ,MADkB;AAEzCP,mBAAiB,oBAAUQ;AAFc,CAAd,EAG1B,eAAKJ,YAHqB,CAA7B;;kBAKeR,a","file":"DefaultPanels.js","sourcesContent":["import React from \"react\";\nimport Base from \"./base\";\nimport PropTypes from \"prop-types\";\n\nimport TraceAccordion from \"./TraceAccordion\";\nimport Panel from \"./Panel\";\nimport Select from \"./Select\";\nimport Numeric from \"./Numeric\";\nimport ColorPicker from \"./Color\";\nimport Section from \"./Section\";\nimport Flaglist from \"./Flaglist\";\nimport Radio from \"./Radio\";\nimport PanelsWithModeMenu from './PanelsWithModeMenu';\n\n// These are the built-in panels for the editor. If the editor has children specified,\n// those panels will override these.\nclass DefaultPanels extends Base {\n  constructor(props, context) {\n    super(props, context);\n    this.dataSources = context.dataSources;\n    this.dataSourceNames = context.dataSourceNames;\n  }\n\n  render() {\n    const _ = this._;\n\n    return (\n      <PanelsWithModeMenu>\n        <Panel section=\"Graph\" name=\"Create\">\n          <TraceAccordion>\n            <Select\n              label=\"Plot Type\"\n              attr=\"mode\"\n              options={[\n                { label: \"Line\", value: \"lines\" },\n                { label: \"Scatter\", value: \"markers\" },\n                { label: \"Scatter line\", value: \"lines+markers\" },\n              ]}\n            />\n\n            <Select label=\"X\" attr=\"xsrc\" options={this.dataSourceNames} />\n\n            <Select label=\"Y\" attr=\"ysrc\" options={this.dataSourceNames} />\n\n            <Numeric label={_(\"Marker Size\")} attr=\"marker.size\" />\n          </TraceAccordion>\n        </Panel>\n\n        <Panel section=\"Style\" name=\"Traces\">\n          <TraceAccordion>\n            <Section heading={_(\"Trace\")}>\n              <Numeric\n                label={_(\"Opacity\")}\n                min={0}\n                max={1}\n                step={0.1}\n                attr=\"opacity\"\n              />\n            </Section>\n\n            <Section heading={_(\"Display\")}>\n              <Flaglist\n                attr=\"mode\"\n                options={[\n                  { label: \"Lines\", value: \"lines\" },\n                  { label: \"Points\", value: \"markers\" },\n                ]}\n              />\n            </Section>\n\n            <Section heading={_(\"Points\")}>\n              <Numeric\n                label={_(\"Marker Opacity\")}\n                min={0}\n                max={1}\n                step={0.1}\n                attr=\"marker.opacity\"\n              />\n\n              <ColorPicker label={_(\"Marker Color\")} attr=\"marker.color\" />\n\n              <Numeric label={_(\"Size\")} min={0} attr=\"marker.size\" />\n\n              <Numeric\n                label={_(\"Line width\")}\n                min={0}\n                attr=\"marker.line.width\"\n              />\n            </Section>\n\n            <Section heading={_(\"Lines\")}>\n              <Numeric\n                label={_(\"Width\")}\n                min={0}\n                step={1.0}\n                attr=\"line.width\"\n              />\n\n              <ColorPicker label={_(\"Line color\")} attr=\"line.color\" />\n\n              <Radio label={_(\"Connect Gaps\")} attr=\"connectgaps\" />\n            </Section>\n          </TraceAccordion>\n        </Panel>\n      </PanelsWithModeMenu>\n    );\n  }\n}\n\n// It's not enough for Base to specify which context it accepts. This component\n// must manually pull Base's defined context types into its own.\nDefaultPanels.contextTypes = Object.assign({\n  dataSources: PropTypes.object,\n  dataSourceNames: PropTypes.array,\n}, Base.contextTypes);\n\nexport default DefaultPanels;\n"]}