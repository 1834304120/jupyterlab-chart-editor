{"version":3,"sources":["../../src/components/Anchor.js"],"names":["Anchor","options","onChange","value","propTypes","string","isRequired","func","array","axisLetter","oneOf","mapPlotToProps","plot","props","keysAtPath","filter","key","startsWith","map","label","axisName","replace","unshift","module","exports"],"mappings":";;AAAA;;;;AACA;;;;AACA;;;;;;AAEA;;;;;AAKA,IAAMA,SAAS,SAATA,MAAS;AAAA,QAAEC,OAAF,QAAEA,OAAF;AAAA,QAAWC,QAAX,QAAWA,QAAX;AAAA,QAAqBC,KAArB,QAAqBA,KAArB;AAAA,WACX;AACI,iBAASF,OADb;AAEI,eAAOE,KAFX;AAGI,kBAAUD,QAHd;AAII,kBAAU;AAJd,MADW;AAAA,CAAf;;AASAF,OAAOI,SAAP,GAAmB;AACfD,WAAO,iBAAUE,MAAV,CAAiBC,UADT;AAEfJ,cAAU,iBAAUK,IAAV,CAAeD,UAFV;AAGfL,aAAS,iBAAUO,KAAV,CAAgBF,UAHV;AAIfG,gBAAY,iBAAUC,KAAV,CAAgB,CAAC,GAAD,EAAM,GAAN,CAAhB;AAJG,CAAnB;;AAOA,SAASC,cAAT,CAAwBC,IAAxB,EAA8BC,KAA9B,EAAqC;AAAA,QAC1BJ,UAD0B,GACZI,KADY,CAC1BJ,UAD0B;;AAEjC,QAAMR,UAAUW,KAAKE,UAAL,CAAgB,CAAC,aAAD,CAAhB,EACXC,MADW,CACJ;AAAA,eAAOC,IAAIC,UAAJ,CAAkBR,UAAlB,UAAP;AAAA,KADI,EAEXS,GAFW,CAEP;AAAA,eAAa;AACdC,mBAAOC,QADO;AAEdjB,mBAAOiB,SAASC,OAAT,CAAiB,MAAjB,EAAyB,EAAzB;AAFO,SAAb;AAAA,KAFO,CAAhB;AAMApB,YAAQqB,OAAR,CAAgB,EAACH,OAAO,YAAR,EAAsBhB,OAAO,MAA7B,EAAhB;AACA,WAAO,EAACF,gBAAD,EAAP;AACH;;AAEDsB,OAAOC,OAAP,GAAiB,oCAAqBb,cAArB,EAAqCX,MAArC,CAAjB","file":"Anchor.js","sourcesContent":["import React, {PropTypes} from 'react';\nimport Dropdown from '@workspace/components/widgets/Dropdown';\nimport connectWorkspacePlot from '@workspace/utils/connectWorkspacePlot';\n\n/*\n * The Anchor component is a control for specifing the `anchor` axis property\n * in plotly.js: https://plot.ly/javascript/reference/#layout-xaxis-anchor\n */\n\nconst Anchor = ({options, onChange, value}) => (\n    <Dropdown\n        options={options}\n        value={value}\n        onChange={onChange}\n        minWidth={'110px'}\n    />\n);\n\nAnchor.propTypes = {\n    value: PropTypes.string.isRequired,\n    onChange: PropTypes.func.isRequired,\n    options: PropTypes.array.isRequired,\n    axisLetter: PropTypes.oneOf(['x', 'y'])\n};\n\nfunction mapPlotToProps(plot, props) {\n    const {axisLetter} = props;\n    const options = plot.keysAtPath(['_fullLayout'])\n        .filter(key => key.startsWith(`${axisLetter}axis`))\n        .map(axisName => ({\n            label: axisName,\n            value: axisName.replace('axis', '')\n        }));\n    options.unshift({label: 'Unanchored', value: 'free'});\n    return {options};\n}\n\nmodule.exports = connectWorkspacePlot(mapPlotToProps)(Anchor);\n"]}