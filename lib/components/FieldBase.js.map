{"version":3,"sources":["../../src/components/FieldBase.js"],"names":["SRC_ATTR_PATTERN","FieldBase","props","context","setLocals","dataSources","dataSourceNames","updatePlot","bind","nextProps","nextState","nextContext","_index","traceIndex","_gd","graphDiv","_data","data","_fullData","fullData","_fullProperty","attr","_property","_contextUpdate","handleUpdate","value","full","fullValue","undefined","show","renderField","get","newValue","set","test","contextTypes","any","array","layout","object","fullLayout","func","number","defaultProps"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;AACA;;;;;;;;;;;;AAEA,IAAMA,mBAAmB,MAAzB;;IAEMC,S;;;AACJ,qBAAYC,KAAZ,EAAmBC,OAAnB,EAA4B;AAAA;;AAAA,sHACpBD,KADoB;;AAG1B,UAAKE,SAAL,CAAeF,KAAf,EAAsBC,OAAtB;;AAEA,UAAKE,WAAL,GAAmBF,QAAQE,WAA3B;AACA,UAAKC,eAAL,GAAuBH,QAAQG,eAA/B;;AAEA,UAAKC,UAAL,GAAkB,MAAKA,UAAL,CAAgBC,IAAhB,OAAlB;AAR0B;AAS3B;;;;wCAEmBC,S,EAAWC,S,EAAWC,W,EAAa;AACrD,WAAKP,SAAL,CAAeK,SAAf,EAA0BE,WAA1B;AACD;;;8BAEST,K,EAAOC,O,EAAS;AACxBD,cAAQA,SAAS,KAAKA,KAAtB;;AAEA,WAAKU,MAAL,GAAcT,QAAQU,UAAtB;;AAEA;AACA,WAAKC,GAAL,GAAWX,QAAQY,QAAnB;AACA,WAAKC,KAAL,GAAab,QAAQc,IAAR,CAAa,KAAKL,MAAlB,KAA6B,EAA1C;AACA,WAAKM,SAAL,GAAiBf,QAAQgB,QAAR,CAAiB,KAAKP,MAAtB,KAAiC,EAAlD;;AAEA;AACA,WAAKQ,aAAL,GAAqB,+BAAe,KAAKF,SAApB,EAA+BhB,MAAMmB,IAArC,CAArB;AACA,WAAKC,SAAL,GAAiB,+BAAe,KAAKN,KAApB,EAA2Bd,MAAMmB,IAAjC,CAAjB;;AAEA,WAAKE,cAAL,GAAsBpB,QAAQqB,YAA9B;AACD;;;+BAEUC,K,EAAO;AAChB,WAAKF,cAAL,IAAuB,KAAKA,cAAL,CAAoB,KAAKrB,KAAL,CAAWmB,IAA/B,EAAqCI,KAArC,CAAvB;AACD;;;6BAmBQ;AACP,UAAIC,OAAO,KAAKC,SAAhB;AACA,UAAKD,SAASE,SAAT,IAAsBF,SAAS,IAAhC,IAAyC,KAAKxB,KAAL,CAAW2B,IAAxD,EAA8D;AAC5D,eAAO,KAAKC,WAAL,EAAP;AACD,OAFD,MAEO;AACL,eAAO,0CAAP;AACD;AACF;;;wBAxBW;AACV,aAAO,KAAKR,SAAL,CAAeS,GAAf,EAAP;AACD,K;sBAUSC,Q,EAAU;AAClB,WAAKV,SAAL,CAAeW,GAAf,CAAmBD,QAAnB;AACA,WAAKT,cAAL,CAAoB,KAAKT,GAAzB,EAA8B,KAAKE,KAAnC,EAA0C,KAAKd,KAAL,CAAWmB,IAArD,EAA2DW,QAA3D;AACD;;;wBAXe;AACd,UAAIhC,iBAAiBkC,IAAjB,CAAsB,KAAKhC,KAAL,CAAWmB,IAAjC,CAAJ,EAA4C;AAC1C,eAAO,KAAKC,SAAL,CAAeS,GAAf,EAAP;AACD,OAFD,MAEO;AACL,eAAO,KAAKX,aAAL,CAAmBW,GAAnB,EAAP;AACD;AACF;;;;;;AAiBH9B,UAAUkC,YAAV,GAAyB;AACvBpB,YAAU,oBAAUqB,GADG;AAEvBnB,QAAM,oBAAUoB,KAFO;AAGvBlB,YAAU,oBAAUkB,KAHG;AAIvBC,UAAQ,oBAAUC,MAJK;AAKvBC,cAAY,oBAAUD,MALC;AAMvBf,gBAAc,oBAAUiB,IAND;AAOvB5B,cAAY,oBAAU6B;AAPC,CAAzB;;AAUAzC,UAAU0C,YAAV,GAAyB;AACvBd,QAAM;AADiB,CAAzB;;kBAIe5B,S","file":"FieldBase.js","sourcesContent":["import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport nestedProperty from \"plotly.js/src/lib/nested_property\";\n\nconst SRC_ATTR_PATTERN = /src$/;\n\nclass FieldBase extends Component {\n  constructor(props, context) {\n    super(props);\n\n    this.setLocals(props, context);\n\n    this.dataSources = context.dataSources;\n    this.dataSourceNames = context.dataSourceNames;\n\n    this.updatePlot = this.updatePlot.bind(this);\n  }\n\n  componentWillUpdate(nextProps, nextState, nextContext) {\n    this.setLocals(nextProps, nextContext);\n  }\n\n  setLocals(props, context) {\n    props = props || this.props;\n\n    this._index = context.traceIndex;\n\n    // gd, data, fullData:\n    this._gd = context.graphDiv;\n    this._data = context.data[this._index] || [];\n    this._fullData = context.fullData[this._index] || [];\n\n    // Property accessors:\n    this._fullProperty = nestedProperty(this._fullData, props.attr);\n    this._property = nestedProperty(this._data, props.attr);\n\n    this._contextUpdate = context.handleUpdate;\n  }\n\n  updatePlot(value) {\n    this._contextUpdate && this._contextUpdate(this.props.attr, value);\n  }\n\n  get value() {\n    return this._property.get();\n  }\n\n  get fullValue() {\n    if (SRC_ATTR_PATTERN.test(this.props.attr)) {\n      return this._property.get();\n    } else {\n      return this._fullProperty.get();\n    }\n  }\n\n  set value(newValue) {\n    this._property.set(newValue);\n    this._contextUpdate(this._gd, this._data, this.props.attr, newValue);\n  }\n\n  render() {\n    var full = this.fullValue;\n    if ((full !== undefined && full !== null) || this.props.show) {\n      return this.renderField();\n    } else {\n      return <div />;\n    }\n  }\n}\n\nFieldBase.contextTypes = {\n  graphDiv: PropTypes.any,\n  data: PropTypes.array,\n  fullData: PropTypes.array,\n  layout: PropTypes.object,\n  fullLayout: PropTypes.object,\n  handleUpdate: PropTypes.func,\n  traceIndex: PropTypes.number,\n};\n\nFieldBase.defaultProps = {\n  show: false,\n};\n\nexport default FieldBase;\n"]}