{"version":3,"sources":["../../src/components/TraceAccordion.js"],"names":["TracePanel","traceIndex","props","index","children","childContextTypes","number","TraceAccordion","context","data","renderPanel","bind","nextProps","nextState","nextContext","d","i","map","contextTypes","array"],"mappings":";;;;;;;;AAAA;;;;AAMA;;;;AACA;;;;;;;;;;IAEMA,U;;;;;;;;;;;sCACc;AAChB,aAAO;AACLC,oBAAY,KAAKC,KAAL,CAAWC;AADlB,OAAP;AAGD;;;6BAEQ;AACP,aACE;AAAA;AAAA;AACE;AAAA;AAAA,YAAK,WAAW,cAAI,aAAJ,EAAmB,KAAnB,EAA0B,CAAC,QAAD,CAA1B,CAAhB;AAAA;AACS,eAAKD,KAAL,CAAWC;AADpB,SADF;AAIE;AAAA;AAAA,YAAK,WAAW,cAAI,aAAJ,EAAmB,OAAnB,CAAhB;AAA8C,eAAKD,KAAL,CAAWE;AAAzD;AAJF,OADF;AAQD;;;;;;AAGHJ,WAAWK,iBAAX,GAA+B;AAC7BJ,cAAY,oBAAUK;AADO,CAA/B;;IAIMC,c;;;AACJ,0BAAYL,KAAZ,EAAmBM,OAAnB,EAA4B;AAAA;;AAAA,iIACpBN,KADoB;;AAE1B,WAAKO,IAAL,GAAYD,QAAQC,IAApB;AACA,WAAKC,WAAL,GAAmB,OAAKA,WAAL,CAAiBC,IAAjB,QAAnB;AAH0B;AAI3B;;;;wCAEoBC,S,EAAWC,S,EAAWC,W,EAAa;AACtD,WAAKL,IAAL,GAAaK,eAAeA,YAAYL,IAA5B,IAAqC,EAAjD;AACD;;;gCAEWM,C,EAAGC,C,EAAG;AAChB,aACE;AAAC,kBAAD;AAAA,UAAY,KAAKA,CAAjB,EAAoB,OAAOA,CAA3B;AACG,aAAKd,KAAL,CAAWE;AADd,OADF;AAKD;;;6BAEQ;AACP,aAAO;AAAA;AAAA,UAAK,WAAU,YAAf;AAA6B,aAAKK,IAAL,CAAUQ,GAAV,CAAc,KAAKP,WAAnB;AAA7B,OAAP;AACD;;;;;;AAGHH,eAAeW,YAAf,GAA8B;AAC5BT,QAAM,oBAAUU;AADY,CAA9B;;kBAIeZ,c","file":"TraceAccordion.js","sourcesContent":["import React, {\n  Component,\n  Children,\n  cloneElement,\n  isValidElement,\n} from \"react\";\nimport PropTypes from \"prop-types\";\nimport { bem } from \"../lib\";\n\nclass TracePanel extends Component {\n  getChildContext() {\n    return {\n      traceIndex: this.props.index,\n    };\n  }\n\n  render() {\n    return (\n      <div>\n        <div className={bem(\"trace-panel\", \"top\", [\"active\"])}>\n          Trace {this.props.index}\n        </div>\n        <div className={bem(\"trace-panel\", \"panel\")}>{this.props.children}</div>\n      </div>\n    );\n  }\n}\n\nTracePanel.childContextTypes = {\n  traceIndex: PropTypes.number,\n};\n\nclass TraceAccordion extends Component {\n  constructor(props, context) {\n    super(props);\n    this.data = context.data;\n    this.renderPanel = this.renderPanel.bind(this);\n  }\n\n  componentWillUpdate (nextProps, nextState, nextContext) {\n    this.data = (nextContext && nextContext.data) || [];\n  }\n\n  renderPanel(d, i) {\n    return (\n      <TracePanel key={i} index={i}>\n        {this.props.children}\n      </TracePanel>\n    );\n  }\n\n  render() {\n    return <div className=\"tracePanel\">{this.data.map(this.renderPanel)}</div>;\n  }\n}\n\nTraceAccordion.contextTypes = {\n  data: PropTypes.array,\n};\n\nexport default TraceAccordion;\n"]}