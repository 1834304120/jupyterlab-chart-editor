{"version":3,"sources":["../../src/components/Example.js"],"names":["WorkspaceActions","EXAMPLES","scatter","line","bar","pie","errorbars","heatmap","contour","histogram","box","histogram2d","histogram2dcontour","scattergeo","choropleth","surface","scatter3d","STATUS","LOADING","ERROR","SUCCESS","LoadExampleButton","props","loadExample","bind","state","status","chartType","setState","fetch","method","headers","Headers","then","response","ok","json","Error","statusText","dispatch","loadFigure","figure","catch","window","Raven","captureException","err","console","error","has","propTypes","oneOf","Object","keys","func","isRequired","ExampleButton","buttonClass","loadingButtonclass"],"mappings":"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","file":"Example.js","sourcesContent":["import R from 'ramda';\nimport React, {PropTypes, Component} from 'react';\nimport classnames from 'classnames';\nimport {_} from '@common/utils/i18n';\nimport * as WorkspaceActions from '@workspace/actions/workspace';\nimport {GET_ENCODING_SCHEMA} from '@workspace/constants/graphTable';\n\n// Some of these have hardcoded splinter tests. Change them with this in mind\nexport const EXAMPLES = {\n    scatter: 'https://plot.ly/~chris/17604', // Splinter tested\n    line: 'https://plot.ly/~chris/17606', // Splinter tested\n    bar: 'https://plot.ly/~PlotBot/41',\n    pie: 'https://plot.ly/~stacyannj/2145', // Splinter tested\n    errorbars: 'https://plot.ly/~etpinard/267', // Splinter tested\n    heatmap: 'https://plot.ly/~chris/17615', // Splinter tested\n    contour: 'https://plot.ly/~chris/17618', // Splinter tested\n    histogram: 'https://plot.ly/~chris/17610',\n    box: 'https://plot.ly/~PlotBot/32',\n    histogram2d: 'https://plot.ly/~chris/17612',\n    histogram2dcontour: 'https://plot.ly/~chris/17600', // Splinter tested\n    scattergeo: 'https://plot.ly/~chris/17602', // Splinter tested\n    choropleth: 'https://plot.ly/~chris/17624',\n    surface: 'https://plot.ly/~chris/17620', // Splinter tested\n    scatter3d: 'https://plot.ly/~chelsea_lyn/8794'\n    // mesh3d: 'https://plot.ly/~chris/17628' // TODO: add once validation passes\n    // scattermapbox: 'https://plot.ly/~chris/17622' // TODO: add once validation passes\n};\n\nexport const STATUS = {\n    LOADING: 'LOADING',\n    ERROR: 'ERROR',\n    SUCCESS: 'SUCCESS'\n};\n\nexport class LoadExampleButton extends Component {\n    constructor(props) {\n        super(props);\n        this.loadExample = this.loadExample.bind(this);\n        this.state = {status: STATUS.SUCCESS};\n    }\n\n\n    /*\n     * Download the JSON of the figure and\n     * 1 - Convert the data from the figure into our column state\n     * 2 - Create a new table with that data\n     * 3 - Re-create the graph by assigning these columns to graph attributes\n     */\n    loadExample() {\n        const {chartType} = this.props;\n        this.setState({status: STATUS.LOADING});\n\n        fetch(`${EXAMPLES[chartType]}.json`, {\n            method: 'GET',\n            headers: new Headers({\n                'Content-Type': 'application/json'\n            })\n\n        }).then(response => {\n            if (response.ok) {\n                return response.json();\n            }\n            throw new Error(response.statusText);\n\n        }).then(figure => {\n            const {dispatch, chartType} = this.props;\n\n            dispatch(WorkspaceActions.loadFigure(figure, chartType));\n            this.setState({status: STATUS.SUCCESS});\n        })\n\n          .catch(err => {\n              window.Raven.captureException(err);\n              console.error(err);\n\n              this.setState({status: STATUS.ERROR});\n              return;\n          });\n    }\n\n    render() {\n        if (!R.has(this.props.chartType, EXAMPLES)) {\n            return null;\n        }\n\n        return (\n            <ExampleButton loadExample={this.loadExample} status={this.state.status} />\n        );\n    }\n}\nLoadExampleButton.propTypes = {\n    chartType: PropTypes.oneOf(Object.keys(GET_ENCODING_SCHEMA())),\n    dispatch: PropTypes.func.isRequired\n};\n\nconst ExampleButton = props => {\n    const buttonClass = classnames(\n        'plot-example-button',\n        'js-example-button'\n    );\n\n    const loadingButtonclass = classnames(\n        'plot-example-button',\n        'js-example-button',\n        'plot-example-loading'\n    );\n\n    if (props.status === STATUS.LOADING) {\n        return (\n            <div className={loadingButtonclass}>\n                {_('Loading...')}\n            </div>\n        );\n    }\n\n    if (props.status === STATUS.ERROR) {\n        return (\n            <div className={buttonClass}\n                 onClick={props.loadExample}\n            >\n                 {_('Hm... error occurred. Click to try again.')}\n            </div>\n        );\n    }\n\n    return (\n        <div className={buttonClass}\n             onClick={props.loadExample}\n        >\n            <i className=\"icon-arrow +soft-quarter-right\"/>\n            {_('Try an example')}\n        </div>\n    );\n};\n\nExampleButton.propTypes = {\n    loadExample: PropTypes.func.isRequired,\n    status: PropTypes.oneOf(Object.keys(STATUS))\n};\n"]}