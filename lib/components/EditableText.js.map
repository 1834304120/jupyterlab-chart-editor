{"version":3,"sources":["../../src/components/EditableText.js"],"names":["EditableText","props","handleClick","bind","handleChange","handleUpdate","handleKeyPress","event","target","select","onChange","value","onUpdate","keyCode","which","refs","text","blur","focus","type","className","disable","autoFocus","onKeyDown","placeholder","readOnly","size","propTypes","func","string","bool","oneOf","number","defaultProps","module","exports"],"mappings":";;;;AAAA;;;;;;;;;;;;AAEA;;;;IAIMA,Y;;;AACF,0BAAYC,KAAZ,EAAmB;AAAA;;AAAA,gIACTA,KADS;;AAGf,cAAKC,WAAL,GAAmB,MAAKA,WAAL,CAAiBC,IAAjB,OAAnB;AACA,cAAKC,YAAL,GAAoB,MAAKA,YAAL,CAAkBD,IAAlB,OAApB;AACA,cAAKE,YAAL,GAAoB,MAAKA,YAAL,CAAkBF,IAAlB,OAApB;AACA,cAAKG,cAAL,GAAsB,MAAKA,cAAL,CAAoBH,IAApB,OAAtB;AANe;AAOlB;;AAED;;;;;oCACYI,K,EAAO;AACfA,kBAAMC,MAAN,CAAaC,MAAb;AACH;;;qCAEYF,K,EAAO;AAAA,gBACTG,QADS,GACG,KAAKT,KADR,CACTS,QADS;;;AAGhB,gBAAIA,QAAJ,EAAc;AACVA,yBAASH,MAAMC,MAAN,CAAaG,KAAtB;AACH;AACJ;;;qCAEYJ,K,EAAO;AAAA,gBACTK,QADS,GACG,KAAKX,KADR,CACTW,QADS;;;AAGhB,gBAAIA,QAAJ,EAAc;AACVA,yBAASL,MAAMC,MAAN,CAAaG,KAAtB;AACH;AACJ;;;uCAEcJ,K,EAAO;;AAElB;;;AAGA,gBAAI,CAACA,MAAMM,OAAN,IAAiBN,MAAMO,KAAxB,MAAmC,EAAvC,EAA2C;AACvC,qBAAKC,IAAL,CAAUC,IAAV,CAAeC,IAAf;AACH;AACJ;;;gCAEO;AACJ,iBAAKF,IAAL,CAAUC,IAAV,CAAeE,KAAf;AACH;;;iCAEQ;AAAA,yBAID,KAAKjB,KAJJ;AAAA,gBAEDkB,IAFC,UAEDA,IAFC;AAAA,gBAEKC,SAFL,UAEKA,SAFL;AAAA,gBAEgBJ,IAFhB,UAEgBA,IAFhB;AAAA,gBAEsBK,OAFtB,UAEsBA,OAFtB;AAAA,gBAE+BC,SAF/B,UAE+BA,SAF/B;AAAA,gBAE0CC,SAF1C,UAE0CA,SAF1C;AAAA,gBAEqDC,WAFrD,UAEqDA,WAFrD;AAAA,gBAGDC,QAHC,UAGDA,QAHC;AAAA,gBAGSC,IAHT,UAGSA,IAHT;;AAKL,mBACI;AACI,qBAAI,MADR;AAEI,sBAAMP,IAFV;AAGI,2BAAWC,aAAa,EAH5B;AAII,uBAAOJ,IAJX;AAKI,yBAAS,KAAKd,WALlB;AAMI,0BAAU,KAAKE,YANnB;AAOI,wBAAQ,KAAKC,YAPjB;AAQI,0BAAUgB,OARd;AASI,2BAAWC,SATf;AAUI,4BAAY,KAAKhB,cAVrB;AAWI,2BAAWiB,SAXf;AAYI,6BAAaC,WAZjB;AAaI,0BAAUC,QAbd;AAcI,sBAAMC;AAdV,cADJ;AAkBH;;;;;;AAGL1B,aAAa2B,SAAb,GAAyB;AACrB;AACAjB,cAAU,iBAAUkB,IAFC;;AAIrB;AACAhB,cAAU,iBAAUgB,IALC;;AAOrB;AACAL,eAAW,iBAAUK,IARA;;AAUrB;AACAZ,UAAM,iBAAUa,MAXK;;AAarB;AACAL,iBAAa,iBAAUK,MAdF;AAerBT,eAAW,iBAAUS,MAfA;AAgBrBR,aAAS,iBAAUS,IAhBE;AAiBrBR,eAAW,iBAAUQ,IAjBA;AAkBrBL,cAAU,iBAAUK,IAlBC;AAmBrBX,UAAM,iBAAUY,KAAV,CAAgB,CAAC,MAAD,EAAS,UAAT,CAAhB,CAnBe;AAoBrBL,UAAM,iBAAUM;AApBK,CAAzB;;AAuBAhC,aAAaiC,YAAb,GAA4B;AACxBR,cAAU,KADc;AAExBN,UAAM;AAFkB,CAA5B;;AAKAe,OAAOC,OAAP,GAAiBnC,YAAjB","file":"EditableText.js","sourcesContent":["import React, {Component, PropTypes} from 'react';\n\n/**\n * A generic component to handle text that can be edited when the user\n * clicks on it.\n */\nclass EditableText extends Component {\n    constructor(props) {\n        super(props);\n\n        this.handleClick = this.handleClick.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n        this.handleUpdate = this.handleUpdate.bind(this);\n        this.handleKeyPress = this.handleKeyPress.bind(this);\n    }\n\n    // Selects/highlights all of the text in the filename input\n    handleClick(event) {\n        event.target.select();\n    }\n\n    handleChange(event) {\n        const {onChange} = this.props;\n\n        if (onChange) {\n            onChange(event.target.value);\n        }\n    }\n\n    handleUpdate(event) {\n        const {onUpdate} = this.props;\n\n        if (onUpdate) {\n            onUpdate(event.target.value);\n        }\n    }\n\n    handleKeyPress(event) {\n\n        /*\n         * This will force handleUpdate to be called via the input's onBlur\n         */\n        if ((event.keyCode || event.which) === 13) {\n            this.refs.text.blur();\n        }\n    }\n\n    focus() {\n        this.refs.text.focus();\n    }\n\n    render() {\n        const {\n            type, className, text, disable, autoFocus, onKeyDown, placeholder,\n            readOnly, size\n        } = this.props;\n        return (\n            <input\n                ref=\"text\"\n                type={type}\n                className={className || ''}\n                value={text}\n                onClick={this.handleClick}\n                onChange={this.handleChange}\n                onBlur={this.handleUpdate}\n                disabled={disable}\n                autoFocus={autoFocus}\n                onKeyPress={this.handleKeyPress}\n                onKeyDown={onKeyDown}\n                placeholder={placeholder}\n                readOnly={readOnly}\n                size={size}\n           />\n        );\n    }\n}\n\nEditableText.propTypes = {\n    // Called with input value on changes (as the user types)\n    onChange: PropTypes.func,\n\n    // Called with input value on blur (and enter if no onEnter is given)\n    onUpdate: PropTypes.func,\n\n    // Called on input keyDown events\n    onKeyDown: PropTypes.func,\n\n    // Input value property\n    text: PropTypes.string,\n\n    // Input properties\n    placeholder: PropTypes.string,\n    className: PropTypes.string,\n    disable: PropTypes.bool,\n    autoFocus: PropTypes.bool,\n    readOnly: PropTypes.bool,\n    type: PropTypes.oneOf(['text', 'password']),\n    size: PropTypes.number\n};\n\nEditableText.defaultProps = {\n    readOnly: false,\n    type: 'text'\n};\n\nmodule.exports = EditableText;\n"]}