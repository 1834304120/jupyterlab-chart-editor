{"version":3,"sources":["../../src/components/SwitchOrientation.js"],"names":["OPTIONS","label","value","switchOrientationCommands","traceIndex","orientation","targetTracePath","targetXaxisIdPath","targetYaxisIdPath","targetXaxisId","path","targetYaxisId","finder","trace","xaxis","yaxis","type","traceIndicesWithSharedAxes","findIndicesAtPath","restyleArray","map","data","target","i","relayoutObject","reduce","r","thisTraceIndex","tracePath","xaxisId","yaxisId","xaxisKey","slice","yaxisKey","xaxisTypePath","yaxisTypePath","SwitchOrientation","activeOption","className","dispatch","onOptionChange","commands","propTypes","func","isRequired","string","number"],"mappings":"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","file":"SwitchOrientation.js","sourcesContent":["import React, {PropTypes} from 'react';\nimport {contains} from 'ramda';\n\nimport RadioItems from '@workspace/components/widgets/RadioItems';\nimport connectWorkspacePlot from '@workspace/utils/connectWorkspacePlot';\nimport {WorkspacePlot} from '@workspace/utils/Plot';\nimport {relayout, restyle} from '@workspace/actions/workspace';\n\n/*\n * Style Control for switching the vertical or horizontal orientation\n * of traces in subplots.\n *\n * The Plotly 2 interpretation of orientation is a lil\n * more involved than just the plotly.js per-trace\n * `orientation` key.\n * - We switch the orientation of *all* of the traces that\n *   are in the same subplot rather than just the single\n *   trace.\n * - We switch the types of the axes that the trace belongs\n *   to.\n *\n * Another confusing case happens when there are multiple sets of\n * shared axes like in this example: https://plot.ly/~chris/17707/\n * This is pretty rare and so for now we'll rely on\n * plotly.js's sensible behaviour (plots the numerical and\n * categorical data together on one axis) and let the user\n * add new axes if they wish to.\n *\n */\n\nconst OPTIONS = [\n    {label: 'Vertical', value: 'v'},\n    {label: 'Horizontal', value: 'h'}\n];\n\n/*\n * Compute the restyle and relayout commands necessary to switch\n * the orientation of a trace\n */\nfunction switchOrientationCommands(traceIndex, orientation) {\n    const targetTracePath = ['_fullData', traceIndex];\n    const targetXaxisIdPath = [...targetTracePath, 'xaxis'];\n    const targetYaxisIdPath = [...targetTracePath, 'yaxis'];\n    const targetXaxisId = WorkspacePlot.path(targetXaxisIdPath);\n    const targetYaxisId = WorkspacePlot.path(targetYaxisIdPath);\n\n    const finder = trace => {\n        return (\n            (trace.xaxis === targetXaxisId || trace.yaxis === targetYaxisId) &&\n            contains(trace.type, ['bar', 'histogram', 'box'])\n        );\n    };\n    const traceIndicesWithSharedAxes = WorkspacePlot\n        .findIndicesAtPath(finder, ['_fullData']);\n\n    // Swap the orientation of all of the traces in that subplot\n    const restyleArray = traceIndicesWithSharedAxes.map(i => ({\n        data: {orientation},\n        target: i\n    }));\n\n    // Swap axis types\n    const relayoutObject = traceIndicesWithSharedAxes.reduce(\n         (r, thisTraceIndex) => {\n             const tracePath = ['_fullData', thisTraceIndex];\n\n             // e.g. x, x2 AND e.g. y, y2\n             const xaxisId = WorkspacePlot.path([...tracePath, 'xaxis']);\n             const yaxisId = WorkspacePlot.path([...tracePath, 'yaxis']);\n\n             const xaxisKey = `xaxis${xaxisId.slice(1)}`;\n             const yaxisKey = `yaxis${yaxisId.slice(1)}`;\n             const xaxisTypePath = ['_fullLayout', xaxisKey, 'type'];\n             const yaxisTypePath = ['_fullLayout', yaxisKey, 'type'];\n\n             // Note that we switch x/y here.\n             r[`${xaxisKey}.type`] = WorkspacePlot.path(yaxisTypePath);\n             r[`${yaxisKey}.type`] = WorkspacePlot.path(xaxisTypePath);\n\n             return r;\n         }, {}\n    );\n\n    return {restyleArray, relayoutObject};\n}\n\nconst SwitchOrientation = ({activeOption, className, dispatch, traceIndex}) => {\n\n    const onOptionChange = orientation => {\n        const commands = switchOrientationCommands(traceIndex, orientation);\n        const {restyleArray, relayoutObject} = commands;\n        dispatch(restyle(restyleArray));\n        dispatch(relayout(relayoutObject));\n    };\n\n    return (\n        <RadioItems\n            onOptionChange={onOptionChange}\n            options={OPTIONS}\n            activeOption={activeOption}\n            stylingClass={className}\n        />\n    );\n\n};\n\nSwitchOrientation.propTypes = {\n    dispatch: PropTypes.func.isRequired,\n    activeOption: PropTypes.string.isRequired,\n    traceIndex: PropTypes.number.isRequired,\n    className: PropTypes.string\n};\n\nexport {switchOrientationCommands};\n\nexport default connectWorkspacePlot(null, true)(SwitchOrientation);\n"]}