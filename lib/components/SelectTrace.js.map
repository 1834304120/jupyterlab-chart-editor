{"version":3,"sources":["../../src/components/SelectTrace.js"],"names":["SelectTrace","nextProps","props","chartType","iconClass","Boolean","fancyTraceOptions","traceOptions","map","label","traceOption","value","type","disabled","getIconClassName","selectedTraceValue","traceSelectHandler","propTypes","func","isRequired","string"],"mappings":";;;;;;;;AASA;;;;AACA;;;;AACA;;;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;+eAfA;;;;;;;;;;;IAiBqBA,W;;;;;;;;;;;8CAEKC,S,EAAW;AAC7B,mBAAO,qDAAyB,KAAKC,KAA9B,EAAqCD,SAArC,CAAP;AACH;;;yCAEgBE,S,EAAW;AAAA;;AACxB,gBAAMC,YAAY,2BAAgBD,SAAhB,CAAlB;AACA,mBAAO,0EACFC,SADE,EACUC,QAAQD,SAAR,CADV,gCAEH,kBAFG,EAEiBC,QAAQD,SAAR,CAFjB,gBAAP;AAIH;;;iCAEQ;AAAA;;AAEL,gBAAME,oBAAoB,KAAKJ,KAAL,CAAWK,YAAX,CAAwBC,GAAxB,CAA4B,uBAAe;AAAA,oBAC1DC,KAD0D,GAClBC,WADkB,CAC1DD,KAD0D;AAAA,oBACnDE,KADmD,GAClBD,WADkB,CACnDC,KADmD;AAAA,oBAC5CC,IAD4C,GAClBF,WADkB,CAC5CE,IAD4C;AAAA,4CAClBF,WADkB,CACtCG,QADsC;AAAA,oBACtCA,QADsC,yCAC3B,KAD2B;;AAEjE,oBAAMT,YAAY,OAAKU,gBAAL,CAAsBF,IAAtB,CAAlB;;AAEA,uBAAO;AACHD,gCADG;AAEHE,sCAFG;AAGHJ,2BAAO;AAAA;AAAA;AAAM,6DAAG,WAAWL,SAAd,GAAN;AAAoCK;AAApC;AAHJ,iBAAP;AAKH,aATyB,CAA1B;;AAWA,mBACI,oDAAU,aAAa,aAAE,YAAF,CAAvB;AACU,uBAAO,KAAKP,KAAL,CAAWa,kBAD5B;AAEU,yBAAST,iBAFnB;AAGU,4BAAY,IAHtB;AAIU,0BAAU,KAAKJ,KAAL,CAAWc,kBAJ/B;AAKU,2BAAW;AALrB,cADJ;AASH;;;;;;kBApCgBhB,W;;;AAuCrBA,YAAYiB,SAAZ,GAAwB;AACpBD,wBAAoB,iBAAUE,IAAV,CAAeC,UADf;AAEpBJ,wBAAoB,iBAAUK,MAAV,CAAiBD,UAFjB;AAGpBZ,kBAAc,yCAAwBY;AAHlB,CAAxB","file":"SelectTrace.js","sourcesContent":["/*\n * This component provides a dropdown for selecting traces. Traces will\n * automatically be paired with a fancy icon label. This component is used\n * for selecting among all possible traces types where the value is also the\n * chart type but also used for selecting among data traces where the label\n * will be an UID or index. Therefore traceOptions are a superset of what\n * is passed to the Dropdown as they contain trace \"type\" key so the fancy\n * label can be constructed.\n */\nimport Dropdown from '@workspace/components/widgets/Dropdown';\nimport React, {PropTypes, Component} from 'react';\nimport classnames from 'classnames';\nimport {CHART_TYPE_ICON} from '@workspace/constants/workspace';\nimport {_} from '@common/utils/i18n';\nimport {traceSelectOptionsShape} from '@workspace/utils/customPropTypes';\nimport {propsNotEqualNoFuncCheck} from '@workspace/utils/shouldComponentUpdate';\n\nexport default class SelectTrace extends Component {\n\n    shouldComponentUpdate(nextProps) {\n        return propsNotEqualNoFuncCheck(this.props, nextProps);\n    }\n\n    getIconClassName(chartType) {\n        const iconClass = CHART_TYPE_ICON[chartType];\n        return classnames({\n            [iconClass]: Boolean(iconClass),\n            '+soft-half-right': Boolean(iconClass)\n        });\n    }\n\n    render() {\n\n        const fancyTraceOptions = this.props.traceOptions.map(traceOption => {\n            const {label, value, type, disabled = false} = traceOption;\n            const iconClass = this.getIconClassName(type);\n\n            return {\n                value,\n                disabled,\n                label: <span><i className={iconClass}></i>{label}</span>\n            };\n        });\n\n        return (\n            <Dropdown placeholder={_('chart type')}\n                      value={this.props.selectedTraceValue}\n                      options={fancyTraceOptions}\n                      searchable={true}\n                      onChange={this.props.traceSelectHandler}\n                      clearable={false}\n            />\n        );\n    }\n}\n\nSelectTrace.propTypes = {\n    traceSelectHandler: PropTypes.func.isRequired,\n    selectedTraceValue: PropTypes.string.isRequired,\n    traceOptions: traceSelectOptionsShape.isRequired\n};\n"]}