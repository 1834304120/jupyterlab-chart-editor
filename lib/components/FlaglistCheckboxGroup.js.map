{"version":3,"sources":["../../src/components/FlaglistCheckboxGroup.js"],"names":["FlaglistCheckboxGroup","createClass","propTypes","options","PropTypes","arrayOf","shape","value","string","isRequired","label","activeOption","onChange","func","className","orientation","_parseFlags","option","props","map","o","join","getInitialState","currentActiveOption","componentWillReceiveProps","nextProps","setState","handleChange","newOptions","newActiveOptions","checked","slice","length","renderCheckedOption","activeOptions","state","split","allOptions","currentChecked","indexOf","push","render","module","exports"],"mappings":"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","file":"FlaglistCheckboxGroup.js","sourcesContent":["import React from 'react';\nimport CheckboxGroup from './CheckboxGroup';\n\n/*\n * Component handles activeOption with shape \"x+y+z\"\n * and ties it to the CheckboxGroup Component\n */\n\nconst FlaglistCheckboxGroup = React.createClass({\n    propTypes: {\n        options: React.PropTypes.arrayOf(React.PropTypes.shape({\n            value: React.PropTypes.string.isRequired,\n            label: React.PropTypes.string.isRequired\n        })).isRequired,\n        activeOption: React.PropTypes.string,\n        onChange: React.PropTypes.func,\n        className: React.PropTypes.string,\n        orientation: React.PropTypes.string\n    },\n\n    /*\n     * convert plotly.js's \"all\" or \"none\" option in its `flaglist` type\n     * to a series of options separated by `+` that our component can handle\n     */\n    _parseFlags(option) {\n        let activeOption;\n        if (option === 'all') {\n            activeOption = this.props.options.map(o => o.value).join('+');\n        } else if (option === 'none') {\n            activeOption = '';\n        } else {\n            activeOption = option;\n        }\n        return activeOption;\n    },\n\n    getInitialState() {\n        let currentActiveOption;\n        if (this.props.activeOption !== null) {\n            currentActiveOption = this.props.activeOption;\n        } else {\n            currentActiveOption = '';\n        }\n\n\n        return {\n            activeOption: this._parseFlags(currentActiveOption)\n        };\n    },\n\n    /*\n     * Sync local state to parent props.\n     */\n    componentWillReceiveProps(nextProps) {\n        this.setState({activeOption: this._parseFlags(nextProps.activeOption)});\n    },\n\n    /*\n     * Called whenever a checkbox is changed, this updates the local\n     * state to reflect the new activeOptions and then called props.onChange with\n     * the new options.\n     */\n    handleChange(newOptions) {\n        let newActiveOptions = '';\n\n        newOptions.map((option) => {\n            if (option.checked === true) {\n                newActiveOptions += option.value + '+';\n            }\n        });\n\n        newActiveOptions = newActiveOptions.slice(0, -1);\n\n        if (newActiveOptions.length === 0) {\n          newActiveOptions = 'none';\n        }\n\n        this.setState({activeOption: newActiveOptions});\n        this.props.onChange(newActiveOptions);\n    },\n\n    /*\n     * Turns the activeOptions \"e.g \"x+y+z\" into an array that\n     * the CheckboxGroup component can handle\n     */\n    renderCheckedOption() {\n        const activeOptions = (this.state.activeOption).split('+');\n        const allOptions = this.props.options;\n        let newOptions = [];\n\n        allOptions.map((option) => {\n            let currentChecked;\n\n            if (activeOptions.indexOf(option.value) > -1) {\n                currentChecked = true;\n            } else {\n                currentChecked = false;\n            }\n\n            newOptions.push({\n                  label: option.label,\n                  value: option.value,\n                  checked: currentChecked\n            });\n        });\n\n        return newOptions;\n\n    },\n\n    render() {\n        return (\n            <CheckboxGroup\n                options={this.renderCheckedOption()}\n                onChange={this.handleChange}\n                className={this.props.className}\n                orientation={this.props.orientation}\n             />\n        );\n    }\n});\n\nmodule.exports = FlaglistCheckboxGroup;\n"]}