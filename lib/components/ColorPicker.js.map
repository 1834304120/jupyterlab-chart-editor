{"version":3,"sources":["../../src/components/ColorPicker.js"],"names":["ColorPicker","props","state","selectedColor","isVisible","isAccessible","bind","onSelectedColorChange","toColorBuffer","toggleVisible","nextProps","newColor","toRgbString","setState","color","user","context","currentUser","feature_set","feature_set_id","featureName","validations","allowedColors","extractRGB","c","rgb","getColorSource","source","hex","onColorChange","tieredOnSelectedColorChange","dispatch","colorText","toHexString","swatchStyle","backgroundColor","propTypes","func","isRequired","string","contextTypes","isDefined","module","exports"],"mappings":"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","file":"ColorPicker.js","sourcesContent":["import ProBadge from './ProBadge';\nimport React, {Component, PropTypes} from 'react';\nimport TieredColorPicker from '@workspace/components/widgets/TieredColorPicker';\nimport getFeatureValue from '@common/utils/features';\nimport tieredDecorator from '@workspace/utils/tieredDecorator';\nimport tinycolor from 'tinycolor2';\nimport {currentUserOrNull} from '@workspace/utils/customPropTypes';\nimport {\n    tierColors, hasInaccessibleFeature\n} from '@workspace/utils/checkFigureFeatureAccess';\n\nclass ColorPicker extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            selectedColor: tinycolor(props.selectedColor),\n            isVisible: false\n        };\n\n        this.isAccessible = this.isAccessible.bind(this);\n        this.onSelectedColorChange = this.onSelectedColorChange.bind(this);\n        this.toColorBuffer = this.toColorBuffer.bind(this);\n        this.toggleVisible = this.toggleVisible.bind(this);\n    }\n\n    componentWillReceiveProps(nextProps) {\n        const newColor = tinycolor(nextProps.selectedColor);\n        const {selectedColor} = this.state;\n\n        if (newColor.toRgbString() !== selectedColor.toRgbString()) {\n            this.setState({selectedColor: newColor});\n        }\n    }\n\n    /**\n     * Determine if the color is accessible\n     * @param {obj} color object from tiny color\n     *\n     * @returns {bool} true if color is accessible, false otherwise\n     *\n     */\n    isAccessible(color) {\n        const user = this.context.currentUser;\n        const feature_set = user ? user.feature_set_id : null;\n        const {featureName, validations} = tierColors;\n\n        const allowedColors = getFeatureValue(feature_set, featureName);\n\n        return !hasInaccessibleFeature(\n            color,\n            allowedColors,\n            validations\n        );\n    }\n\n    toColorBuffer(color) {\n        /**\n         * @param {obj} c, an object that contains rgba field. Either it\n         * has a field called 'rgb' that contains a rgba object or it is a rgba\n         * object\n         *\n         * @returns {obj} returns c.rgb if it exits if it doesn't exist, it\n         * measn that the object itself is a rgba object\n         */\n        const extractRGB = c => c.rgb || c;\n\n        /*\n         * If it contains rgb info, we extract its rgb object, else we return\n         * its hex\n         */\n        const getColorSource = c => c.source === 'rgb' ? extractRGB(c) : c.hex;\n\n        return tinycolor(getColorSource(color));\n    }\n\n    /**\n     * Note: this handler cannot be used alone without being decorated by tiered\n     * decorator\n     *\n     * @param {obj} color, object from tinycolor\n     *\n     * @returns {void} calls restyle\n     */\n    onSelectedColorChange(color) {\n        this.setState({selectedColor: color});\n\n        const newColor = color.toRgbString();\n\n        /*\n         * Call whatever onColorChange was passed in with the same value!\n         * relayout call only wants a RGB String\n         */\n        this.props.onColorChange(newColor);\n    }\n\n    toggleVisible() {\n        this.setState({isVisible: !this.state.isVisible});\n    }\n\n    render() {\n        const {featureName} = tierColors;\n\n        const tieredOnSelectedColorChange = tieredDecorator(\n            this.onSelectedColorChange,\n            this.isAccessible,\n            featureName,\n            this.props.dispatch,\n            this.toColorBuffer\n        );\n\n        const {selectedColor} = this.state;\n\n        const colorText = selectedColor.toHexString();\n\n        /*\n         * We need inline style here to assign the background color\n         * dynamically.\n         */\n        const swatchStyle = {\n            backgroundColor: selectedColor.toRgbString()\n        };\n\n        return (\n            <div className=\"colorpicker-container js-colorpicker-container\">\n\n                <div className=\"colorpicker\">\n                    <div ref=\"swatch\"\n                         className=\"colorpicker-swatch +cursor-clickable js-colorpicker-swatch\"\n                         style={swatchStyle}\n                         onClick={this.toggleVisible}\n                    />\n                </div>\n\n                <div\n                    ref=\"selectedColorText\"\n                    className=\"colorpicker-selected-color +hover-grey\"\n                    onClick={this.toggleVisible}\n                >\n                    {colorText}\n                </div>\n\n                <ProBadge\n                    hide={this.isAccessible(selectedColor)}\n                    className=\"--inline-margin\"\n                />\n\n                {this.state.isVisible ? (\n                    <div className=\"color-picker__popover js-color-picker-popover\">\n                        <div\n                            className=\"color-picker__cover\"\n                            onClick={this.toggleVisible}\n                        />\n                        <TieredColorPicker\n                            ref=\"react-color\"\n                            color={selectedColor.toRgbString()}\n                            onChangeComplete={tieredOnSelectedColorChange}\n                        />\n                    </div>\n                ) : null}\n\n            </div>\n        );\n    }\n}\n\nColorPicker.propTypes = {\n    onColorChange: PropTypes.func.isRequired,\n    selectedColor: PropTypes.string,\n    dispatch: PropTypes.func.isRequired\n};\n\nColorPicker.contextTypes = {\n    currentUser: currentUserOrNull.isDefined\n};\n\nmodule.exports = ColorPicker;\n"]}