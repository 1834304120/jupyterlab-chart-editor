{"version":3,"sources":["../../src/components/ToolMenuItemSubmenu.js"],"names":["ToolMenuItemSubmenu","props","state","isOpen","toggleInfo","bind","setState","title","mainText","subText","children","iconClass","renderInfoBox","propTypes","string","isRequired","node"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;;;;;;;;;IAEqBA,mB;;;AACjB,iCAAYC,KAAZ,EAAmB;AAAA;;AAAA,8IACTA,KADS;;AAGf,cAAKC,KAAL,GAAa;AACTC,oBAAQ;AADC,SAAb;;AAIA,cAAKC,UAAL,GAAkB,MAAKA,UAAL,CAAgBC,IAAhB,OAAlB;AAPe;AAQlB;;;;qCAEY;AACT,iBAAKC,QAAL,CAAc,EAACH,QAAQ,CAAC,KAAKD,KAAL,CAAWC,MAArB,EAAd;AACH;;;wCAEe;AACZ,mBACI;AAAA;AAAA;AACM,qBAAKF,KAAL,CAAWM,KAAX,GACE;AAAA;AAAA,sBAAK,WAAU,2BAAf;AACK,yBAAKN,KAAL,CAAWM;AADhB,iBADF,GAIE,IALR;AAMM,qBAAKN,KAAL,CAAWO,QAAX,GACE;AAAA;AAAA,sBAAK,WAAU,0BAAf;AACK,yBAAKP,KAAL,CAAWO;AADhB,iBADF,GAIE,IAVR;AAWM,qBAAKP,KAAL,CAAWQ,OAAX,GACE;AAAA;AAAA,sBAAK,WAAU,8BAAf;AACK,yBAAKR,KAAL,CAAWQ;AADhB,iBADF,GAIE,IAfR;AAgBI;AAAA;AAAA;AACK,yBAAKR,KAAL,CAAWS;AADhB;AAhBJ,aADJ;AAsBH;;;iCAEQ;AACL,mBACI;AAAA;AAAA;AACI;AAAA;AAAA,sBAAM,SAAS,KAAKN,UAApB;AACI,yDAAG,WAAW,KAAKH,KAAL,CAAWU,SAAzB;AADJ,iBADJ;AAKM,qBAAKT,KAAL,CAAWC,MAAX,GACE;AAAA;AAAA,sBAAK,WAAU,oBAAf;AACI;AACI,mCAAU,2BADd;AAEI,iCAAS,KAAKC;AAFlB,sBADJ;AAKI;AAAA;AAAA;AACK,6BAAKQ,aAAL;AADL;AALJ,iBADF,GAUE;AAfR,aADJ;AAoBH;;;;;;kBA7DgBZ,mB;;;AAgErBA,oBAAoBa,SAApB,GAAgC;AAC5BN,WAAO,iBAAUO,MADW;AAE5BN,cAAU,iBAAUM,MAFQ;AAG5BL,aAAS,iBAAUK,MAHS;AAI5BH,eAAW,iBAAUG,MAAV,CAAiBC,UAJA;AAK5BL,cAAU,iBAAUM;AALQ,CAAhC","file":"ToolMenuItemSubmenu.js","sourcesContent":["import React, {Component, PropTypes} from 'react';\nimport classnames from 'classnames';\n\nexport default class ToolMenuItemSubmenu extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            isOpen: false\n        };\n\n        this.toggleInfo = this.toggleInfo.bind(this);\n    }\n\n    toggleInfo() {\n        this.setState({isOpen: !this.state.isOpen});\n    }\n\n    renderInfoBox() {\n        return (\n            <div>\n                { this.props.title ? (\n                    <div className=\"menu-item__submenu__title\">\n                        {this.props.title}\n                    </div>\n                ) : null}\n                { this.props.mainText ? (\n                    <div className=\"menu-item__submenu__text\">\n                        {this.props.mainText}\n                    </div>\n                ) : null}\n                { this.props.subText ? (\n                    <div className=\"menu-item__submenu__sub-text\">\n                        {this.props.subText}\n                    </div>\n                ) : null}\n                <div>\n                    {this.props.children}\n                </div>\n            </div>\n        );\n    }\n\n    render() {\n        return (\n            <span>\n                <span onClick={this.toggleInfo}>\n                    <i className={this.props.iconClass} />\n                </span>\n\n                { this.state.isOpen ? (\n                    <div className=\"menu-item__submenu\">\n                        <div\n                            className=\"menu-item__submenu__cover\"\n                            onClick={this.toggleInfo}\n                        />\n                        <div>\n                            {this.renderInfoBox()}\n                        </div>\n                    </div>\n                ) : null}\n\n            </span>\n        );\n    }\n}\n\nToolMenuItemSubmenu.propTypes = {\n    title: PropTypes.string,\n    mainText: PropTypes.string,\n    subText: PropTypes.string,\n    iconClass: PropTypes.string.isRequired,\n    children: PropTypes.node\n};\n"]}