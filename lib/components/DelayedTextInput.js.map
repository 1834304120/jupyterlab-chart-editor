{"version":3,"sources":["../../src/components/DelayedTextInput.js"],"names":["DelayedTextInput","props","state","value","handleFocus","bind","handleChange","handleUpdate","handleKeyDown","nextProps","setState","event","autoSelect","target","select","onUpdate","onEnter","onKeyDown","key","keyCode","which","refs","text","type","className","disabled","autoFocus","placeholder","readOnly","size","propTypes","func","isRequired","string","bool","oneOf","number","defaultProps"],"mappings":";;;;;;;;AAAA;;;;;;;;;;;;AAEA;;;;;;;;;;;;;;;IAeqBA,gB;;;AACjB,8BAAYC,KAAZ,EAAmB;AAAA;;AAAA,wIACTA,KADS;;AAEf,cAAKC,KAAL,GAAa,EAACC,OAAOF,MAAME,KAAd,EAAb;;AAEA,cAAKC,WAAL,GAAmB,MAAKA,WAAL,CAAiBC,IAAjB,OAAnB;AACA,cAAKC,YAAL,GAAoB,MAAKA,YAAL,CAAkBD,IAAlB,OAApB;AACA,cAAKE,YAAL,GAAoB,MAAKA,YAAL,CAAkBF,IAAlB,OAApB;AACA,cAAKG,aAAL,GAAqB,MAAKA,aAAL,CAAmBH,IAAnB,OAArB;AAPe;AAQlB;;;;kDAEyBI,S,EAAW;AACjC,gBAAMN,QAAQM,UAAUN,KAAxB;AACA,gBAAIA,UAAU,KAAKD,KAAL,CAAWC,KAAzB,EAAgC;AAC5B,qBAAKO,QAAL,CAAc,EAACP,YAAD,EAAd;AACH;AACJ;;AAED;;;;oCACYQ,K,EAAO;AACf,gBAAI,KAAKV,KAAL,CAAWW,UAAf,EAA2B;AACvBD,sBAAME,MAAN,CAAaC,MAAb;AACH;AACJ;;;2CAE+B;AAAA,gBAATX,KAAS,QAAlBU,MAAkB,CAATV,KAAS;;AAC5B,iBAAKO,QAAL,CAAc,EAACP,YAAD,EAAd;AACH;;;4CAE+B;AAAA,gBAATA,KAAS,SAAlBU,MAAkB,CAATV,KAAS;AAAA,gBACrBY,QADqB,GACT,KAAKd,KADI,CACrBc,QADqB;;;AAG5B,iBAAKL,QAAL,CAAc,EAACP,YAAD,EAAd;;AAEA,gBAAIY,QAAJ,EAAc;AACVA,yBAASZ,KAAT;AACH;AACJ;;;sCAEaQ,K,EAAO;AAAA,yBACsB,KAAKV,KAD3B;AAAA,gBACVe,OADU,UACVA,OADU;AAAA,gBACDD,QADC,UACDA,QADC;AAAA,gBACSE,SADT,UACSA,SADT;;;AAGjB,gBAAMC,MAAOP,MAAMQ,OAAN,IAAiBR,MAAMS,KAApC;;AAEA;AACA,gBAAIF,QAAQ,EAAZ,EAAgB;AACZ,oBAAMf,QAAQ,KAAKkB,IAAL,CAAUC,IAAV,CAAenB,KAA7B;;AAEA,oBAAIa,OAAJ,EAAa;AACTA,4BAAQb,KAAR;AACH,iBAFD,MAEO;AACHY,6BAASZ,KAAT;AACH;AACJ;;AAED;AAVA,iBAWK,IAAIe,QAAQ,EAAZ,EAAgB;AACjB,yBAAKR,QAAL,CAAc,EAACP,OAAO,KAAKF,KAAL,CAAWE,KAAnB,EAAd;AACH;;AAED;AAJK,qBAKA,IAAIc,SAAJ,EAAe;AAChBA,kCAAUN,KAAV;AACH;AACJ;;;iCAEQ;AAAA,0BAID,KAAKV,KAJJ;AAAA,gBAEDsB,IAFC,WAEDA,IAFC;AAAA,gBAEKC,SAFL,WAEKA,SAFL;AAAA,gBAEgBC,QAFhB,WAEgBA,QAFhB;AAAA,gBAE0BC,SAF1B,WAE0BA,SAF1B;AAAA,gBAEqCC,WAFrC,WAEqCA,WAFrC;AAAA,gBAGDC,QAHC,WAGDA,QAHC;AAAA,gBAGSC,IAHT,WAGSA,IAHT;AAAA,gBAKE1B,KALF,GAKW,KAAKD,KALhB,CAKEC,KALF;;AAML,mBACI;AACI,qBAAI,MADR;AAEI,sBAAMoB,IAFV;AAGI,2BAAWC,aAAa,EAH5B;AAII,uBAAOrB,KAJX;AAKI,yBAAS,KAAKC,WALlB;AAMI,0BAAU,KAAKE,YANnB;AAOI,wBAAQ,KAAKC,YAPjB;AAQI,0BAAUkB,QARd;AASI,2BAAWC,SATf;AAUI,2BAAW,KAAKlB,aAVpB;AAWI,6BAAamB,WAXjB;AAYI,0BAAUC,QAZd;AAaI,sBAAMC;AAbV,cADJ;AAiBH;;;;;;kBAzFgB7B,gB;;;AA4FrBA,iBAAiB8B,SAAjB,GAA6B;;AAEzB;AACAf,cAAU,iBAAUgB,IAAV,CAAeC,UAHA;;AAKzB;AACAhB,aAAS,iBAAUe,IANM;;AAQzB;AACAd,eAAW,iBAAUc,IATI;;AAWzB;AACA5B,WAAO,iBAAU8B,MAAV,CAAiBD,UAZC;;AAczB;AACApB,gBAAY,iBAAUsB,IAfG;;AAiBzB;AACAP,iBAAa,iBAAUM,MAlBE;AAmBzBT,eAAW,iBAAUS,MAnBI;AAoBzBR,cAAU,iBAAUS,IApBK;AAqBzBR,eAAW,iBAAUQ,IArBI;AAsBzBN,cAAU,iBAAUM,IAtBK;AAuBzBX,UAAM,iBAAUY,KAAV,CAAgB,CAAC,MAAD,EAAS,UAAT,CAAhB,CAvBmB;AAwBzBN,UAAM,iBAAUO;AAxBS,CAA7B;;AA2BApC,iBAAiBqC,YAAjB,GAAgC;AAC5BT,cAAU,KADkB;AAE5BL,UAAM,MAFsB;AAG5BX,gBAAY;AAHgB,CAAhC","file":"DelayedTextInput.js","sourcesContent":["import React, {Component, PropTypes} from 'react';\n\n/**\n * A generic component to handle text input fields that should not\n * propagate their updates until the user blurs or presses enter.\n *\n * If you want to update on every change, use a bare <input> instead.\n *\n * Exposes three events:\n *     onUpdate: fired on blur, and on pressing enter if there is no onEnter\n *     onEnter (optional): fired only when pressing enter\n *     onKeyDown (optional): fired on any keydown. Intended for capturing\n *         special keys like arrow keys, rather than direct changes to the text\n *\n * TODO: use this in NumericInput as well\n * https://github.com/plotly/streambed/issues/8440\n */\nexport default class DelayedTextInput extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {value: props.value};\n\n        this.handleFocus = this.handleFocus.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n        this.handleUpdate = this.handleUpdate.bind(this);\n        this.handleKeyDown = this.handleKeyDown.bind(this);\n    }\n\n    componentWillReceiveProps(nextProps) {\n        const value = nextProps.value;\n        if (value !== this.state.value) {\n            this.setState({value});\n        }\n    }\n\n    // Selects/highlights all of the text in the input on focus\n    handleFocus(event) {\n        if (this.props.autoSelect) {\n            event.target.select();\n        }\n    }\n\n    handleChange({target: {value}}) {\n        this.setState({value});\n    }\n\n    handleUpdate({target: {value}}) {\n        const {onUpdate} = this.props;\n\n        this.setState({value});\n\n        if (onUpdate) {\n            onUpdate(value);\n        }\n    }\n\n    handleKeyDown(event) {\n        const {onEnter, onUpdate, onKeyDown} = this.props;\n\n        const key = (event.keyCode || event.which);\n\n        // Allow the input to be saved when the enter key is pressed\n        if (key === 13) {\n            const value = this.refs.text.value;\n\n            if (onEnter) {\n                onEnter(value);\n            } else {\n                onUpdate(value);\n            }\n        }\n\n        // revert input with escape key\n        else if (key === 27) {\n            this.setState({value: this.props.value});\n        }\n\n        // pass anything else on to onKeyDown from props\n        else if (onKeyDown) {\n            onKeyDown(event);\n        }\n    }\n\n    render() {\n        const {\n            type, className, disabled, autoFocus, placeholder,\n            readOnly, size\n        } = this.props;\n        const {value} = this.state;\n        return (\n            <input\n                ref=\"text\"\n                type={type}\n                className={className || ''}\n                value={value}\n                onFocus={this.handleFocus}\n                onChange={this.handleChange}\n                onBlur={this.handleUpdate}\n                disabled={disabled}\n                autoFocus={autoFocus}\n                onKeyDown={this.handleKeyDown}\n                placeholder={placeholder}\n                readOnly={readOnly}\n                size={size}\n            />\n        );\n    }\n}\n\nDelayedTextInput.propTypes = {\n\n    // Called with input value on blur (and enter if no onEnter is given)\n    onUpdate: PropTypes.func.isRequired,\n\n    // Called with input value on enter\n    onEnter: PropTypes.func,\n\n    // Called on any keydown\n    onKeyDown: PropTypes.func,\n\n    // Input value property\n    value: PropTypes.string.isRequired,\n\n    // do we select the whole input string on focus?\n    autoSelect: PropTypes.bool,\n\n    // Other properties forwarded to <input>\n    placeholder: PropTypes.string,\n    className: PropTypes.string,\n    disabled: PropTypes.bool,\n    autoFocus: PropTypes.bool,\n    readOnly: PropTypes.bool,\n    type: PropTypes.oneOf(['text', 'password']),\n    size: PropTypes.number\n};\n\nDelayedTextInput.defaultProps = {\n    readOnly: false,\n    type: 'text',\n    autoSelect: true\n};\n"]}