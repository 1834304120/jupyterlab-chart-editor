{"version":3,"sources":["../../src/components/ArrowSelector.js"],"names":["ArrowSelector","props","state","activeOption","onSelect","bind","arrowGenerator","renderOption","renderValue","nextProps","setState","Plotly","arrowArray","Annotations","ARROWPATHS","allArrows","map","each","position","top","fill","path","opacity","strokeWidth","index","label","value","key","chosenArrow","onChange","option","propTypes","number","func","object","isRequired","module","exports"],"mappings":"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","file":"ArrowSelector.js","sourcesContent":["import Dropdown from './Dropdown';\nimport React, {Component, PropTypes} from 'react';\nimport {MIXED_VALUES} from '@workspace/constants/workspace';\n\nclass ArrowSelector extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            activeOption: this.props.activeOption || 0\n        };\n        this.onSelect = this.onSelect.bind(this);\n        this.arrowGenerator = this.arrowGenerator.bind(this);\n        this.renderOption = this.renderOption.bind(this);\n        this.renderValue = this.renderValue.bind(this);\n    }\n\n    componentWillReceiveProps(nextProps) {\n\n        if (nextProps.activeOption === MIXED_VALUES) {\n            // set the active option empty if it is MIXED_VALUES\n            this.setState({\n                activeOption: ''\n            });\n            return;\n        }\n\n        // Reset the value to the graph's actual value\n        if (nextProps.activeOption !== this.state.activeOption) {\n            this.setState({\n                activeOption: nextProps.activeOption\n            });\n        }\n    }\n\n    arrowGenerator() {\n        const {Plotly} = this.props;\n        const arrowArray = Plotly.Annotations.ARROWPATHS;\n        const allArrows = arrowArray.map((each) => {\n            return (\n                <svg width=\"40\" height=\"20\" data-arrowhead=\"1\" style={{position: 'relative', top: '5px'}}>\n                    <line stroke=\"rgb(68, 68, 68)\" style={{fill: 'none'}} x1=\"5\" y1=\"10\" x2=\"23.8\" y2=\"10\" strokeWidth=\"2\" />\n                    <path d={each.path} transform=\"translate(23.8,10)rotate(360)scale(2)\" style={{fill: 'rgb(68, 68, 68)', opacity: 1, strokeWidth: 0}} />\n                </svg>\n            );\n        });\n\n        return allArrows.map((each, index) => {\n            return {\n                label: each,\n                value: index,\n                key: 'arrow' + index\n            };\n        });\n    }\n\n    onSelect(chosenArrow) {\n        this.setState({\n            activeOption: chosenArrow\n        });\n\n        this.props.onChange(chosenArrow);\n    }\n\n    renderOption(option) {\n        return (\n            <li className=\"+ls-none\">\n                <div className=\"+push-quarter-left\">\n                    {option.label}\n                </div>\n            </li>\n        );\n    }\n\n    renderValue(option) {\n        return (\n            <div>\n                {option.label}\n            </div>\n        );\n    }\n\n    render() {\n        return (\n            <span className=\"widget-dropdown\">\n                <Dropdown ref=\"dropdown\"\n                          value={this.state.activeOption}\n                          options={this.arrowGenerator()}\n                          onChange={this.onSelect}\n                          clearable={false}\n                          optionRenderer={this.renderOption}\n                          valueRenderer={this.renderValue}\n                          valueKey={'value'}\n                          minWidth={'100%'}\n                />\n            </span>\n        );\n    }\n}\n\nArrowSelector.propTypes = {\n    activeOption: PropTypes.number,\n    onChange: PropTypes.func,\n    Plotly: PropTypes.object.isRequired\n};\n\nmodule.exports = ArrowSelector;\n"]}