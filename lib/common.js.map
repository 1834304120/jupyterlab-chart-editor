{"version":3,"sources":["../src/common.js"],"names":["bem","setLocale","_","clamp","block","element","modifiers","i","modifier","out","c","baseClass","Array","isArray","length","push","join","state","locale","dictionary","str","parts","split","ref","value","min","max","Math"],"mappings":";;;;;QAagBA,G,GAAAA,G;QAqCAC,S,GAAAA,S;QAKAC,C,GAAAA,C;QAgBAC,K,GAAAA,K;;AAvEhB;;;;AACA;;;;;;AAEA;;;;;;;;;;AAUO,SAASH,GAAT,CAAaI,KAAb,EAAoBC,OAApB,EAA6BC,SAA7B,EAAwC;AAC7C,MAAIC,CAAJ,EAAOC,QAAP;AACA,MAAIC,MAAM,EAAV;AACA,MAAIC,IAAI,oBAAUC,SAAlB;;AAEA,MAAIC,MAAMC,OAAN,CAAcT,KAAd,CAAJ,EAA0B;AACxBE,gBAAYF,KAAZ;AACAA,YAAQ,IAAR;AACAC,cAAU,IAAV;AACD,GAJD,MAIO,IAAIO,MAAMC,OAAN,CAAcR,OAAd,CAAJ,EAA4B;AACjCC,gBAAYD,OAAZ;AACAA,cAAU,IAAV;AACD;;AAED,MAAID,SAASA,MAAMU,MAAnB,EAA2B;AACzBJ,SAAK,OAAON,KAAZ;AACD;;AAED,MAAIC,WAAWA,QAAQS,MAAvB,EAA+B;AAC7BJ,SAAK,OAAOL,OAAZ;AACD;;AAEDI,MAAIM,IAAJ,CAASL,CAAT;AACA,MAAIJ,SAAJ,EAAe;AACb,SAAKC,IAAI,CAAT,EAAYA,IAAID,UAAUQ,MAA1B,EAAkCP,GAAlC,EAAuC;AACrCC,iBAAWF,UAAUC,CAAV,CAAX;AACA,UAAIC,YAAYA,SAASM,MAAzB,EAAiC;AAC/BL,YAAIM,IAAJ,CAASL,IAAI,IAAJ,GAAWF,QAApB;AACD;AACF;AACF;;AAED,SAAOC,IAAIO,IAAJ,CAAS,GAAT,CAAP;AACD;;AAED,IAAIC,QAAQ,EAAZ;;AAEO,SAAShB,SAAT,CAAmBiB,MAAnB,EAA2B;AAChCD,QAAMC,MAAN,GAAeA,MAAf;AACAD,QAAME,UAAN,GAAmB,uBAAaD,MAAb,CAAnB;AACD;;AAEM,SAAShB,CAAT,CAAWkB,GAAX,EAAgB;AACrB,MAAIC,QAAQD,IAAIE,KAAJ,CAAU,GAAV,CAAZ;;AAEA,MAAIC,MAAMN,MAAME,UAAhB;;AAEA,OAAK,IAAIZ,IAAI,CAAb,EAAgBA,IAAIc,MAAMP,MAA1B,EAAkCP,GAAlC,EAAuC;AACrC,QAAIgB,IAAIF,MAAMd,CAAN,CAAJ,CAAJ,EAAmB;AACjBgB,YAAMA,IAAIF,MAAMd,CAAN,CAAJ,CAAN;AACD,KAFD,MAEO;AACL,aAAOa,GAAP;AACD;AACF;;AAED,SAAOG,GAAP;AACD;;AAEM,SAASpB,KAAT,CAAgBqB,KAAhB,EAAuBC,GAAvB,EAA4BC,GAA5B,EAAiC;AACtC,SAAOC,KAAKD,GAAL,CAASD,GAAT,EAAcE,KAAKF,GAAL,CAASC,GAAT,EAAcF,KAAd,CAAd,CAAP;AACD","file":"common.js","sourcesContent":["import constants from \"./constants\";\nimport dictionaries from \"./dictionaries\";\n\n/*\n* BEM helper\n*\n* bem()                       => 'plotly-editor'\n* bem('foo')                  => 'plotly-editor__foo'\n* bem('foo', 'bar')           => 'plotly-editor__foo__bar'\n* bem('foo', ['mod'])         => 'plotly-editor__foo plotly-editor__foo--mod'\n* bem('foo', 'bar', ['mod'])  => 'plotly-editor__foo__bar plotly-editor__foo__bar--mod'\n* bem('foo', ['mod1', mod2']) => 'plotly-editor__foo plotly-editor__foo--mod1 plotly-editor__foo--mod2'\n*/\nexport function bem(block, element, modifiers) {\n  var i, modifier;\n  var out = [];\n  var c = constants.baseClass;\n\n  if (Array.isArray(block)) {\n    modifiers = block;\n    block = null;\n    element = null;\n  } else if (Array.isArray(element)) {\n    modifiers = element;\n    element = null;\n  }\n\n  if (block && block.length) {\n    c += \"__\" + block;\n  }\n\n  if (element && element.length) {\n    c += \"__\" + element;\n  }\n\n  out.push(c);\n  if (modifiers) {\n    for (i = 0; i < modifiers.length; i++) {\n      modifier = modifiers[i];\n      if (modifier && modifier.length) {\n        out.push(c + \"--\" + modifier);\n      }\n    }\n  }\n\n  return out.join(\" \");\n}\n\nvar state = {};\n\nexport function setLocale(locale) {\n  state.locale = locale;\n  state.dictionary = dictionaries[locale];\n}\n\nexport function _(str) {\n  var parts = str.split(\".\");\n\n  var ref = state.dictionary;\n\n  for (var i = 0; i < parts.length; i++) {\n    if (ref[parts[i]]) {\n      ref = ref[parts[i]];\n    } else {\n      return str;\n    }\n  }\n\n  return ref;\n}\n\nexport function clamp (value, min, max) {\n  return Math.max(min, Math.min(max, value));\n}\n"]}