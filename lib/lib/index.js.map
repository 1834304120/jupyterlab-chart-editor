{"version":3,"sources":["../../src/lib/index.js"],"names":["bem","clamp","localize","localizeString","block","element","modifiers","i","modifier","out","c","Array","isArray","length","push","join","value","min","max","Math","Comp","LocalizedComponent","props","context","dictionaries","locale","str","contextTypes","object","string","key","dict","hasOwnProperty"],"mappings":";;;;;;;;;;QAcgBA,G,GAAAA,G;QAmCAC,K,GAAAA,K;QAIAC,Q,GAAAA,Q;QAyBAC,c,GAAAA,c;;AA9EhB;;;;AACA;;AACA;;;;;;;;;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASH,GAAT,CAAaI,KAAb,EAAoBC,OAApB,EAA6BC,SAA7B,EAAwC;AAC7C,MAAIC,CAAJ,EAAOC,QAAP;AACA,MAAIC,MAAM,EAAV;AACA,MAAIC,wBAAJ;;AAEA,MAAIC,MAAMC,OAAN,CAAcR,KAAd,CAAJ,EAA0B;AACxBE,gBAAYF,KAAZ;AACAA,YAAQ,IAAR;AACAC,cAAU,IAAV;AACD,GAJD,MAIO,IAAIM,MAAMC,OAAN,CAAcP,OAAd,CAAJ,EAA4B;AACjCC,gBAAYD,OAAZ;AACAA,cAAU,IAAV;AACD;;AAED,MAAID,SAASA,MAAMS,MAAnB,EAA2B;AACzBH,SAAK,OAAON,KAAZ;AACD;;AAED,MAAIC,WAAWA,QAAQQ,MAAvB,EAA+B;AAC7BH,SAAK,OAAOL,OAAZ;AACD;;AAEDI,MAAIK,IAAJ,CAASJ,CAAT;AACA,MAAIJ,SAAJ,EAAe;AACb,SAAKC,IAAI,CAAT,EAAYA,IAAID,UAAUO,MAA1B,EAAkCN,GAAlC,EAAuC;AACrCC,iBAAWF,UAAUC,CAAV,CAAX;AACA,UAAIC,YAAYA,SAASK,MAAzB,EAAiC;AAC/BJ,YAAIK,IAAJ,CAASJ,IAAI,IAAJ,GAAWF,QAApB;AACD;AACF;AACF;;AAED,SAAOC,IAAIM,IAAJ,CAAS,GAAT,CAAP;AACD;;AAEM,SAASd,KAAT,CAAee,KAAf,EAAsBC,GAAtB,EAA2BC,GAA3B,EAAgC;AACrC,SAAOC,KAAKD,GAAL,CAASD,GAAT,EAAcE,KAAKF,GAAL,CAASC,GAAT,EAAcF,KAAd,CAAd,CAAP;AACD;;AAEM,SAASd,QAAT,CAAkBkB,IAAlB,EAAwB;AAAA,MACvBC,kBADuB;AAAA;;AAE3B,gCAAYC,KAAZ,EAAmBC,OAAnB,EAA4B;AAAA;;AAAA,0IACpBD,KADoB,EACbC,OADa;;AAG1B,UAAIC,eAAeD,QAAQC,YAA3B;AACA,UAAIC,SAASF,QAAQE,MAArB;;AAEA,YAAKvB,QAAL,GAAgB,SAASA,QAAT,CAAkBwB,GAAlB,EAAuB;AACrC,eAAOvB,eAAeqB,YAAf,EAA6BC,MAA7B,EAAqCC,GAArC,CAAP;AACD,OAFD;AAN0B;AAS3B;;AAX0B;AAAA;AAAA,+BAalB;AACP,eAAO,8BAAC,IAAD,aAAM,UAAU,KAAKxB,QAArB,IAAmC,KAAKoB,KAAxC,EAAP;AACD;AAf0B;;AAAA;AAAA;;AAkB7BD,qBAAmBM,YAAnB,GAAkCN,mBAAmBM,YAAnB,IAAmC,EAArE;AACAN,qBAAmBM,YAAnB,CAAgCH,YAAhC,GAA+C,oBAAUI,MAAzD;AACAP,qBAAmBM,YAAnB,CAAgCF,MAAhC,GAAyC,oBAAUI,MAAnD;;AAEA,SAAOR,kBAAP;AACD;;AAEM,SAASlB,cAAT,CAAwBqB,YAAxB,EAAsCC,MAAtC,EAA8CK,GAA9C,EAAmD;AACxD,MAAMC,OAAOP,aAAaC,MAAb,CAAb;AACA,MAAIM,QAAQA,KAAKC,cAAL,CAAoBF,GAApB,CAAZ,EAAsC;AACpC,WAAOC,KAAKD,GAAL,CAAP;AACD,GAFD,MAEO;AACL,WAAOA,GAAP;AACD;AACF","file":"index.js","sourcesContent":["import React, { Component } from \"react\";\nimport { baseClass } from \"./constants\";\nimport PropTypes from \"prop-types\";\n\n//\n// BEM helper\n//\n// bem()                       => 'plotly-editor'\n// bem('foo')                  => 'plotly-editor__foo'\n// bem('foo', 'bar')           => 'plotly-editor__foo__bar'\n// bem('foo', ['mod'])         => 'plotly-editor__foo plotly-editor__foo--mod'\n// bem('foo', 'bar', ['mod'])  => 'plotly-editor__foo__bar plotly-editor__foo__bar--mod'\n// bem('foo', ['mod1', mod2']) => 'plotly-editor__foo plotly-editor__foo--mod1 plotly-editor__foo--mod2'\n//\nexport function bem(block, element, modifiers) {\n  var i, modifier;\n  var out = [];\n  var c = baseClass;\n\n  if (Array.isArray(block)) {\n    modifiers = block;\n    block = null;\n    element = null;\n  } else if (Array.isArray(element)) {\n    modifiers = element;\n    element = null;\n  }\n\n  if (block && block.length) {\n    c += \"__\" + block;\n  }\n\n  if (element && element.length) {\n    c += \"__\" + element;\n  }\n\n  out.push(c);\n  if (modifiers) {\n    for (i = 0; i < modifiers.length; i++) {\n      modifier = modifiers[i];\n      if (modifier && modifier.length) {\n        out.push(c + \"--\" + modifier);\n      }\n    }\n  }\n\n  return out.join(\" \");\n}\n\nexport function clamp(value, min, max) {\n  return Math.max(min, Math.min(max, value));\n}\n\nexport function localize(Comp) {\n  class LocalizedComponent extends Component {\n    constructor(props, context) {\n      super(props, context);\n\n      let dictionaries = context.dictionaries;\n      let locale = context.locale;\n\n      this.localize = function localize(str) {\n        return localizeString(dictionaries, locale, str);\n      };\n    }\n\n    render() {\n      return <Comp localize={this.localize} {...this.props} />;\n    }\n  }\n\n  LocalizedComponent.contextTypes = LocalizedComponent.contextTypes || {};\n  LocalizedComponent.contextTypes.dictionaries = PropTypes.object;\n  LocalizedComponent.contextTypes.locale = PropTypes.string;\n\n  return LocalizedComponent;\n}\n\nexport function localizeString(dictionaries, locale, key) {\n  const dict = dictionaries[locale];\n  if (dict && dict.hasOwnProperty(key)) {\n    return dict[key];\n  } else {\n    return key;\n  }\n}\n"]}