{"version":3,"sources":["../src/hub.js"],"names":["PlotlyHub","SRC_ATTR_PATTERN","findAttrs","obj","pattern","newAttrs","type","attrs","Array","isArray","i","length","j","test","push","key","hasOwnProperty","config","dataSources","setState","revision","editorRevision","setDataSources","debug","console","log","refs","Object","keys","data","refresh","dereference","srcAttrs","srcAttr","unsrcd","replace","srcStr","dst","src","get","set","handlePlotUpdate","graphDiv","gd","__editorRevision","handlePlotInitialized","handleEditorUpdate","update","traces","attr","prop","value","undefined"],"mappings":";;;;;;8QAAA;;;kBA8CwBA,S;;AA7CxB;;;;AACA;;;;;;AAEA,IAAMC,mBAAmB,MAAzB;;AAEA,SAASC,SAAT,CAAmBC,GAAnB,EAAwBC,OAAxB,EAAiC;AAC/B,MAAIC,iBAAJ;AACA,MAAIC,cAAcH,GAAd,yCAAcA,GAAd,CAAJ;AACA,MAAII,QAAQ,EAAZ;AACA,MAAIC,MAAMC,OAAN,CAAcN,GAAd,CAAJ,EAAwB;AACtB,SAAK,IAAIO,IAAI,CAAb,EAAgBA,IAAIP,IAAIQ,MAAxB,EAAgCD,GAAhC,EAAqC;AACnC,UAAI,CAACF,MAAMC,OAAN,CAAcN,IAAIO,CAAJ,CAAd,CAAD,IAA0B,QAAOP,IAAIO,CAAJ,CAAP,MAAkB,QAAhD,EAA0D;AACxD,eAAO,IAAP;AACD;AACD,UAAI,CAAC,EAAEL,WAAWH,UAAUC,IAAIO,CAAJ,CAAV,CAAb,CAAL,EAAsC;AACpC,aAAK,IAAIE,IAAI,CAAb,EAAgBA,IAAIP,SAASM,MAA7B,EAAqCC,GAArC,EAA0C;AACxC,cAAI,CAACR,OAAD,IAAYA,QAAQS,IAAR,CAAaR,SAASO,CAAT,CAAb,CAAhB,EAA2C;AACzCL,kBAAMO,IAAN,CAAW,MAAMJ,CAAN,GAAU,IAAV,GAAiBL,SAASO,CAAT,CAA5B;AACD;AACF;AACF;AACF;AACF,GAbD,MAaO,IAAIN,SAAS,QAAT,IAAqBA,SAAS,UAAlC,EAA8C;AACnD,SAAK,IAAIS,GAAT,IAAgBZ,GAAhB,EAAqB;AACnB,UAAIA,IAAIa,cAAJ,CAAmBD,GAAnB,CAAJ,EAA6B;AAC3B,YAAI,CAAC,EAAEV,WAAWH,UAAUC,IAAIY,GAAJ,CAAV,CAAb,CAAL,EAAwC;AACtC,eAAK,IAAIH,KAAI,CAAb,EAAgBA,KAAIP,SAASM,MAA7B,EAAqCC,IAArC,EAA0C;AACxC,gBAAI,CAACR,OAAD,IAAYA,QAAQS,IAAR,CAAaR,SAASO,EAAT,CAAb,CAAhB,EAA2C;AACzCL,oBAAMO,IAAN,CACEC,OAAOP,MAAMC,OAAN,CAAcN,IAAIY,GAAJ,CAAd,IAA0B,EAA1B,GAA+B,GAAtC,IAA6CV,SAASO,EAAT,CAD/C;AAGD;AACF;AACF,SARD,MAQO;AACL,cAAI,CAACR,OAAD,IAAYA,QAAQS,IAAR,CAAaE,GAAb,CAAhB,EAAmC;AACjCR,kBAAMO,IAAN,CAAWC,GAAX;AACD;AACF;AACF;AACF;AACF;;AAED,SAAOR,MAAMI,MAAN,GAAeJ,KAAf,GAAuB,IAA9B;AACD;;AAEc,SAASP,SAAT,CAAmBiB,MAAnB,EAA2B;AAAA;;AACxCA,WAASA,UAAU,EAAnB;AACA,OAAKC,WAAL,GAAmBD,OAAOC,WAAP,IAAsB,EAAzC;AACA,OAAKC,QAAL,GAAgBF,OAAOE,QAAvB;AACA,OAAKC,QAAL,GAAgBH,OAAOG,QAAP,IAAmB,CAAnC;AACA,MAAIC,iBAAiB,CAArB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAKC,cAAL,GAAsB,gBAAQ;AAC5B,QAAIL,OAAOM,KAAX,EAAkBC,QAAQC,GAAR,CAAY,kBAAZ;AAClB;AACA;AACA,UAAKP,WAAL,GAAmB,EAAnB;AACA,QAAIQ,OAAOC,OAAOC,IAAP,CAAYC,QAAQ,EAApB,CAAX;AACA,SAAK,IAAInB,IAAI,CAAb,EAAgBA,IAAIgB,KAAKf,MAAzB,EAAiCD,GAAjC,EAAsC;AACpC,UAAI,CAACmB,KAAKb,cAAL,CAAoBU,KAAKhB,CAAL,CAApB,CAAL,EAAmC;AACnC,YAAKQ,WAAL,CAAiBQ,KAAKhB,CAAL,CAAjB,IAA4BmB,KAAKH,KAAKhB,CAAL,CAAL,CAA5B;AACD;;AAED,UAAKoB,OAAL;;AAEA,WAAO,MAAKZ,WAAZ;AACD,GAdD;;AAgBA;AACA;AACA;AACA,OAAKY,OAAL,GAAe,YAAM;AACnB,UAAKX,QAAL,CAAc;AACZC,gBAAU,EAAE,MAAKA;AADL,KAAd;AAGD,GAJD;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAKW,WAAL,GAAmB,gBAAQ;AACzB,QAAId,OAAOM,KAAX,EAAkBC,QAAQC,GAAR,CAAY,eAAZ,EAA6BI,IAA7B;AAClB,QAAI,CAACA,IAAL,EAAW;AACX,SAAK,IAAIjB,IAAI,CAAb,EAAgBA,IAAIiB,KAAKlB,MAAzB,EAAiCC,GAAjC,EAAsC;AACpC;AACA,UAAIoB,WAAW9B,UAAU2B,KAAKjB,CAAL,CAAV,EAAmBX,gBAAnB,KAAwC,EAAvD;AACA,WAAK,IAAIS,IAAI,CAAb,EAAgBA,IAAIsB,SAASrB,MAA7B,EAAqCD,GAArC,EAA0C;AACxC,YAAIuB,UAAUD,SAAStB,CAAT,CAAd;AACA,YAAIwB,SAASD,QAAQE,OAAR,CAAgBlC,gBAAhB,EAAkC,EAAlC,CAAb;AACA,YAAImC,SAAS,+BAAeP,KAAKjB,CAAL,CAAf,EAAwBqB,OAAxB,CAAb;AACA,YAAII,MAAM,+BAAeR,KAAKjB,CAAL,CAAf,EAAwBsB,MAAxB,CAAV;;AAEA,YAAII,MAAM,MAAKpB,WAAL,CAAiBkB,OAAOG,GAAP,EAAjB,CAAV;;AAEAF,YAAIG,GAAJ,CAAQF,GAAR;AACD;AACF;AACD,WAAOT,IAAP;AACD,GAlBD;;AAoBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAKY,gBAAL,GAAwB,cAAM;AAC5B,QAAIxB,OAAOM,KAAX,EAAkBC,QAAQC,GAAR,CAAY,oBAAZ;AAClB,UAAKiB,QAAL,GAAgBC,EAAhB;;AAEA,UAAKxB,QAAL,CAAc,EAAEyB,kBAAkB,EAAEvB,cAAtB,EAAd;AACD,GALD;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAKwB,qBAAL,GAA6B,cAAM;AACjC,QAAI5B,OAAOM,KAAX,EAAkBC,QAAQC,GAAR,CAAY,sBAAZ;AAClB,UAAKiB,QAAL,GAAgBC,EAAhB;;AAEA,UAAKxB,QAAL,CAAc;AACZwB,UAAIA;AADQ,KAAd;AAGD,GAPD;;AASA;AACA;AACA;AACA,OAAKG,kBAAL,GAA0B,UAACH,EAAD,EAAKI,MAAL,EAAaC,MAAb,EAAwB;AAChD,QAAI/B,OAAOM,KAAX,EAAkBC,QAAQC,GAAR,CAAY,4BAAZ;;AAElB,SAAK,IAAIf,IAAI,CAAb,EAAgBA,IAAIsC,OAAOrC,MAA3B,EAAmCD,GAAnC,EAAwC;AACtC,WAAK,IAAIuC,IAAT,IAAiBF,MAAjB,EAAyB;AACvB,YAAIG,OAAO,+BAAeP,GAAGd,IAAH,CAAQmB,OAAOtC,CAAP,CAAR,CAAf,EAAmCuC,IAAnC,CAAX;AACA,YAAIE,QAAQJ,OAAOE,IAAP,EAAavC,CAAb,CAAZ;AACA,YAAIyC,UAAUC,SAAd,EAAyB;AACvBF,eAAKV,GAAL,CAASW,KAAT;AACD;AACF;AACF;;AAED,UAAKrB,OAAL;AACD,GAdD;AAeD","file":"hub.js","sourcesContent":["//import { findAttrs } from \"./lib\";\nimport nestedProperty from \"plotly.js/src/lib/nested_property\";\nimport extend from \"plotly.js/src/lib/extend\";\n\nconst SRC_ATTR_PATTERN = /src$/;\n\nfunction findAttrs(obj, pattern) {\n  let newAttrs;\n  let type = typeof obj;\n  let attrs = [];\n  if (Array.isArray(obj)) {\n    for (let i = 0; i < obj.length; i++) {\n      if (!Array.isArray(obj[i]) && typeof obj[i] !== \"object\") {\n        return null;\n      }\n      if (!!(newAttrs = findAttrs(obj[i]))) {\n        for (let j = 0; j < newAttrs.length; j++) {\n          if (!pattern || pattern.test(newAttrs[j])) {\n            attrs.push(\"[\" + i + \"].\" + newAttrs[j]);\n          }\n        }\n      }\n    }\n  } else if (type === \"object\" || type === \"function\") {\n    for (let key in obj) {\n      if (obj.hasOwnProperty(key)) {\n        if (!!(newAttrs = findAttrs(obj[key]))) {\n          for (let j = 0; j < newAttrs.length; j++) {\n            if (!pattern || pattern.test(newAttrs[j])) {\n              attrs.push(\n                key + (Array.isArray(obj[key]) ? \"\" : \".\") + newAttrs[j]\n              );\n            }\n          }\n        } else {\n          if (!pattern || pattern.test(key)) {\n            attrs.push(key);\n          }\n        }\n      }\n    }\n  }\n\n  return attrs.length ? attrs : null;\n}\n\nexport default function PlotlyHub(config) {\n  config = config || {};\n  this.dataSources = config.dataSources || {};\n  this.setState = config.setState;\n  this.revision = config.revision || 0;\n  let editorRevision = 0;\n\n  //\n  // @method setDataSources\n  //\n  // Sets available data references. For example, {foo: [1, 2, 3]} will be substituted\n  // into `data` wherever the key `*src: 'foo'` (e.g. for `x` when `{xsrc: 'foo'}`) is\n  // found.\n  //\n  // @param {object} data - object containing key-value pairs to be substituted\n  // @returns {object} dataSorces - the sanitized data references\n  //\n  this.setDataSources = data => {\n    if (config.debug) console.log(\"set data sources\");\n    // Explicitly clear out and transfer object properties in order to sanitize\n    // the input, at least up to its type, which plotly.js will handle sanitizing.\n    this.dataSources = {};\n    let refs = Object.keys(data || {});\n    for (let i = 0; i < refs.length; i++) {\n      if (!data.hasOwnProperty(refs[i])) continue;\n      this.dataSources[refs[i]] = data[refs[i]];\n    }\n\n    this.refresh();\n\n    return this.dataSources;\n  };\n\n  //\n  // @method refresh\n  //\n  this.refresh = () => {\n    this.setState({\n      revision: ++this.revision,\n    });\n  };\n\n  //\n  // @method dereference\n  //\n  // Applies available data references. For example, {foo: [1, 2, 3]} will be substituted\n  // into `data` wherever the key `*src: 'foo'` (e.g. for `x` when `{xsrc: 'foo'}`) is\n  // found.\n  //\n  // @param {object} data - input data\n  // @returns {object} output data with substitutions\n  //\n  this.dereference = data => {\n    if (config.debug) console.log(\"dereferencing\", data);\n    if (!data) return;\n    for (let j = 0; j < data.length; j++) {\n      //data[j] = extend.extendDeepNoArrays({}, data[j]);\n      let srcAttrs = findAttrs(data[j], SRC_ATTR_PATTERN) || [];\n      for (let i = 0; i < srcAttrs.length; i++) {\n        let srcAttr = srcAttrs[i];\n        let unsrcd = srcAttr.replace(SRC_ATTR_PATTERN, \"\");\n        let srcStr = nestedProperty(data[j], srcAttr);\n        let dst = nestedProperty(data[j], unsrcd);\n\n        let src = this.dataSources[srcStr.get()];\n\n        dst.set(src);\n      }\n    }\n    return data;\n  };\n\n  //\n  // @method handlePlotUpdate\n  //\n  // Triggers editor UI update when the plot has been modified, whether by a restyle, a\n  // redraw, or by some other interaction.\n  //\n  // @param {object} gd - graph div\n  //\n  this.handlePlotUpdate = gd => {\n    if (config.debug) console.log(\"handle plot update\");\n    this.graphDiv = gd;\n\n    this.setState({ __editorRevision: ++editorRevision });\n  };\n\n  //\n  // @method handlePlotUpdate\n  //\n  // Triggers editor UI update when the plot has been modified, whether by a restyle, a\n  // redraw, or by some other interaction.\n  //\n  // @param {object} gd - graph div\n  //\n  this.handlePlotInitialized = gd => {\n    if (config.debug) console.log(\"plot was initialized\");\n    this.graphDiv = gd;\n\n    this.setState({\n      gd: gd,\n    });\n  };\n\n  //\n  // @method handleEditorUpdate\n  //\n  this.handleEditorUpdate = (gd, update, traces) => {\n    if (config.debug) console.log(\"editor triggered an update\");\n\n    for (let i = 0; i < traces.length; i++) {\n      for (let attr in update) {\n        let prop = nestedProperty(gd.data[traces[i]], attr);\n        let value = update[attr][i];\n        if (value !== undefined) {\n          prop.set(value);\n        }\n      }\n    }\n\n    this.refresh();\n  };\n}\n"]}